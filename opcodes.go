package m68k

/**
 * This file is generated by m68kgen
 * Hand written changes will be overwritten!
 */

func (c *Processor) op0000() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[0]
	v := byte(dst) | byte(src)
	c.D[0] = uint32(v)
	c.tracef("%04X ori.b #$%X,D0\n", pc, src)
}

func (c *Processor) op0001() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[1]
	v := byte(dst) | byte(src)
	c.D[1] = uint32(v)
	c.tracef("%04X ori.b #$%X,D1\n", pc, src)
}

func (c *Processor) op0002() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[2]
	v := byte(dst) | byte(src)
	c.D[2] = uint32(v)
	c.tracef("%04X ori.b #$%X,D2\n", pc, src)
}

func (c *Processor) op0003() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[3]
	v := byte(dst) | byte(src)
	c.D[3] = uint32(v)
	c.tracef("%04X ori.b #$%X,D3\n", pc, src)
}

func (c *Processor) op0004() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[4]
	v := byte(dst) | byte(src)
	c.D[4] = uint32(v)
	c.tracef("%04X ori.b #$%X,D4\n", pc, src)
}

func (c *Processor) op0005() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[5]
	v := byte(dst) | byte(src)
	c.D[5] = uint32(v)
	c.tracef("%04X ori.b #$%X,D5\n", pc, src)
}

func (c *Processor) op0006() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[6]
	v := byte(dst) | byte(src)
	c.D[6] = uint32(v)
	c.tracef("%04X ori.b #$%X,D6\n", pc, src)
}

func (c *Processor) op0007() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[7]
	v := byte(dst) | byte(src)
	c.D[7] = uint32(v)
	c.tracef("%04X ori.b #$%X,D7\n", pc, src)
}

func (c *Processor) op0008() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[0]
	v := byte(dst) | byte(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b #$%X,A0\n", pc, src)
}

func (c *Processor) op0009() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[1]
	v := byte(dst) | byte(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b #$%X,A1\n", pc, src)
}

func (c *Processor) op000A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[2]
	v := byte(dst) | byte(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b #$%X,A2\n", pc, src)
}

func (c *Processor) op000B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[3]
	v := byte(dst) | byte(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b #$%X,A3\n", pc, src)
}

func (c *Processor) op000C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[4]
	v := byte(dst) | byte(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b #$%X,A4\n", pc, src)
}

func (c *Processor) op000D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[5]
	v := byte(dst) | byte(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b #$%X,A5\n", pc, src)
}

func (c *Processor) op000E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[6]
	v := byte(dst) | byte(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b #$%X,A6\n", pc, src)
}

func (c *Processor) op000F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[7]
	v := byte(dst) | byte(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b #$%X,A7\n", pc, src)
}

func (c *Processor) op0010() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) | byte(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X ori.b #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0011() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) | byte(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X ori.b #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0012() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) | byte(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X ori.b #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0013() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) | byte(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X ori.b #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0014() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) | byte(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X ori.b #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0015() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) | byte(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X ori.b #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0016() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) | byte(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X ori.b #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0017() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) | byte(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X ori.b #$%X,(A7)\n", pc, src)
}

func (c *Processor) op0038() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := c.buf[1]
	v := byte(dst) | byte(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X ori.b #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0039() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := c.buf[1]
	v := byte(dst) | byte(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X ori.b #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op003C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	c.SR |= (uint32(src) & 0x1F)
	c.tracef("%04X ?.b #$%X,CCR\n", pc, src)
}

func (c *Processor) op0040() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[0]
	v := uint16(dst) | uint16(src)
	c.D[0] = uint32(v)
	c.tracef("%04X ori.w #$%X,D0\n", pc, src)
}

func (c *Processor) op0041() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[1]
	v := uint16(dst) | uint16(src)
	c.D[1] = uint32(v)
	c.tracef("%04X ori.w #$%X,D1\n", pc, src)
}

func (c *Processor) op0042() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[2]
	v := uint16(dst) | uint16(src)
	c.D[2] = uint32(v)
	c.tracef("%04X ori.w #$%X,D2\n", pc, src)
}

func (c *Processor) op0043() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[3]
	v := uint16(dst) | uint16(src)
	c.D[3] = uint32(v)
	c.tracef("%04X ori.w #$%X,D3\n", pc, src)
}

func (c *Processor) op0044() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[4]
	v := uint16(dst) | uint16(src)
	c.D[4] = uint32(v)
	c.tracef("%04X ori.w #$%X,D4\n", pc, src)
}

func (c *Processor) op0045() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[5]
	v := uint16(dst) | uint16(src)
	c.D[5] = uint32(v)
	c.tracef("%04X ori.w #$%X,D5\n", pc, src)
}

func (c *Processor) op0046() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[6]
	v := uint16(dst) | uint16(src)
	c.D[6] = uint32(v)
	c.tracef("%04X ori.w #$%X,D6\n", pc, src)
}

func (c *Processor) op0047() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[7]
	v := uint16(dst) | uint16(src)
	c.D[7] = uint32(v)
	c.tracef("%04X ori.w #$%X,D7\n", pc, src)
}

func (c *Processor) op0048() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[0]
	v := uint16(dst) | uint16(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w #$%X,A0\n", pc, src)
}

func (c *Processor) op0049() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[1]
	v := uint16(dst) | uint16(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w #$%X,A1\n", pc, src)
}

func (c *Processor) op004A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[2]
	v := uint16(dst) | uint16(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w #$%X,A2\n", pc, src)
}

func (c *Processor) op004B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[3]
	v := uint16(dst) | uint16(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w #$%X,A3\n", pc, src)
}

func (c *Processor) op004C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[4]
	v := uint16(dst) | uint16(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w #$%X,A4\n", pc, src)
}

func (c *Processor) op004D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[5]
	v := uint16(dst) | uint16(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w #$%X,A5\n", pc, src)
}

func (c *Processor) op004E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[6]
	v := uint16(dst) | uint16(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w #$%X,A6\n", pc, src)
}

func (c *Processor) op004F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[7]
	v := uint16(dst) | uint16(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w #$%X,A7\n", pc, src)
}

func (c *Processor) op0050() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X ori.w #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0051() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X ori.w #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0052() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X ori.w #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0053() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X ori.w #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0054() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X ori.w #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0055() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X ori.w #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0056() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X ori.w #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0057() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X ori.w #$%X,(A7)\n", pc, src)
}

func (c *Processor) op0078() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X ori.w #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0079() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X ori.w #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op007C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.SR |= uint32(src) & 0x1F
	c.tracef("%04X ?.w #$%X,SR\n", pc, src)
}

func (c *Processor) op0080() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[0]
	v := uint32(dst) | uint32(src)
	c.D[0] = uint32(v)
	c.tracef("%04X ori.l #$%X,D0\n", pc, src)
}

func (c *Processor) op0081() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[1]
	v := uint32(dst) | uint32(src)
	c.D[1] = uint32(v)
	c.tracef("%04X ori.l #$%X,D1\n", pc, src)
}

func (c *Processor) op0082() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[2]
	v := uint32(dst) | uint32(src)
	c.D[2] = uint32(v)
	c.tracef("%04X ori.l #$%X,D2\n", pc, src)
}

func (c *Processor) op0083() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[3]
	v := uint32(dst) | uint32(src)
	c.D[3] = uint32(v)
	c.tracef("%04X ori.l #$%X,D3\n", pc, src)
}

func (c *Processor) op0084() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[4]
	v := uint32(dst) | uint32(src)
	c.D[4] = uint32(v)
	c.tracef("%04X ori.l #$%X,D4\n", pc, src)
}

func (c *Processor) op0085() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[5]
	v := uint32(dst) | uint32(src)
	c.D[5] = uint32(v)
	c.tracef("%04X ori.l #$%X,D5\n", pc, src)
}

func (c *Processor) op0086() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[6]
	v := uint32(dst) | uint32(src)
	c.D[6] = uint32(v)
	c.tracef("%04X ori.l #$%X,D6\n", pc, src)
}

func (c *Processor) op0087() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[7]
	v := uint32(dst) | uint32(src)
	c.D[7] = uint32(v)
	c.tracef("%04X ori.l #$%X,D7\n", pc, src)
}

func (c *Processor) op0088() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[0]
	v := uint32(dst) | uint32(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l #$%X,A0\n", pc, src)
}

func (c *Processor) op0089() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[1]
	v := uint32(dst) | uint32(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l #$%X,A1\n", pc, src)
}

func (c *Processor) op008A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[2]
	v := uint32(dst) | uint32(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l #$%X,A2\n", pc, src)
}

func (c *Processor) op008B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[3]
	v := uint32(dst) | uint32(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l #$%X,A3\n", pc, src)
}

func (c *Processor) op008C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[4]
	v := uint32(dst) | uint32(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l #$%X,A4\n", pc, src)
}

func (c *Processor) op008D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[5]
	v := uint32(dst) | uint32(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l #$%X,A5\n", pc, src)
}

func (c *Processor) op008E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[6]
	v := uint32(dst) | uint32(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l #$%X,A6\n", pc, src)
}

func (c *Processor) op008F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[7]
	v := uint32(dst) | uint32(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l #$%X,A7\n", pc, src)
}

func (c *Processor) op0090() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) | uint32(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X ori.l #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0091() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) | uint32(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X ori.l #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0092() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) | uint32(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X ori.l #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0093() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) | uint32(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X ori.l #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0094() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) | uint32(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X ori.l #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0095() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) | uint32(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X ori.l #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0096() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) | uint32(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X ori.l #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0097() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) | uint32(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X ori.l #$%X,(A7)\n", pc, src)
}

func (c *Processor) op00B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	dst := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	v := uint32(dst) | uint32(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X ori.l #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op00B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	dst := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	v := uint32(dst) | uint32(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X ori.l #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0100() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[0]
	v := byte(dst) | byte(src)
	c.D[0] = uint32(v)
	c.tracef("%04X ori.b #$%X,D0\n", pc, src)
}

func (c *Processor) op0101() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[1]
	v := byte(dst) | byte(src)
	c.D[1] = uint32(v)
	c.tracef("%04X ori.b #$%X,D1\n", pc, src)
}

func (c *Processor) op0102() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[2]
	v := byte(dst) | byte(src)
	c.D[2] = uint32(v)
	c.tracef("%04X ori.b #$%X,D2\n", pc, src)
}

func (c *Processor) op0103() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[3]
	v := byte(dst) | byte(src)
	c.D[3] = uint32(v)
	c.tracef("%04X ori.b #$%X,D3\n", pc, src)
}

func (c *Processor) op0104() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[4]
	v := byte(dst) | byte(src)
	c.D[4] = uint32(v)
	c.tracef("%04X ori.b #$%X,D4\n", pc, src)
}

func (c *Processor) op0105() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[5]
	v := byte(dst) | byte(src)
	c.D[5] = uint32(v)
	c.tracef("%04X ori.b #$%X,D5\n", pc, src)
}

func (c *Processor) op0106() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[6]
	v := byte(dst) | byte(src)
	c.D[6] = uint32(v)
	c.tracef("%04X ori.b #$%X,D6\n", pc, src)
}

func (c *Processor) op0107() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[7]
	v := byte(dst) | byte(src)
	c.D[7] = uint32(v)
	c.tracef("%04X ori.b #$%X,D7\n", pc, src)
}

func (c *Processor) op0108() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[0]
	v := byte(dst) | byte(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b #$%X,A0\n", pc, src)
}

func (c *Processor) op0109() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[1]
	v := byte(dst) | byte(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b #$%X,A1\n", pc, src)
}

func (c *Processor) op010A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[2]
	v := byte(dst) | byte(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b #$%X,A2\n", pc, src)
}

func (c *Processor) op010B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[3]
	v := byte(dst) | byte(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b #$%X,A3\n", pc, src)
}

func (c *Processor) op010C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[4]
	v := byte(dst) | byte(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b #$%X,A4\n", pc, src)
}

func (c *Processor) op010D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[5]
	v := byte(dst) | byte(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b #$%X,A5\n", pc, src)
}

func (c *Processor) op010E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[6]
	v := byte(dst) | byte(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b #$%X,A6\n", pc, src)
}

func (c *Processor) op010F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[7]
	v := byte(dst) | byte(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b #$%X,A7\n", pc, src)
}

func (c *Processor) op0110() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) | byte(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X ori.b #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0111() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) | byte(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X ori.b #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0112() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) | byte(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X ori.b #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0113() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) | byte(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X ori.b #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0114() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) | byte(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X ori.b #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0115() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) | byte(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X ori.b #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0116() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) | byte(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X ori.b #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0117() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) | byte(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X ori.b #$%X,(A7)\n", pc, src)
}

func (c *Processor) op0138() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := c.buf[1]
	v := byte(dst) | byte(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X ori.b #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0139() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := c.buf[1]
	v := byte(dst) | byte(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X ori.b #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op013C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	c.SR |= (uint32(src) & 0x1F)
	c.tracef("%04X ?.b #$%X,CCR\n", pc, src)
}

func (c *Processor) op0140() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[0]
	v := uint16(dst) | uint16(src)
	c.D[0] = uint32(v)
	c.tracef("%04X ori.w #$%X,D0\n", pc, src)
}

func (c *Processor) op0141() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[1]
	v := uint16(dst) | uint16(src)
	c.D[1] = uint32(v)
	c.tracef("%04X ori.w #$%X,D1\n", pc, src)
}

func (c *Processor) op0142() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[2]
	v := uint16(dst) | uint16(src)
	c.D[2] = uint32(v)
	c.tracef("%04X ori.w #$%X,D2\n", pc, src)
}

func (c *Processor) op0143() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[3]
	v := uint16(dst) | uint16(src)
	c.D[3] = uint32(v)
	c.tracef("%04X ori.w #$%X,D3\n", pc, src)
}

func (c *Processor) op0144() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[4]
	v := uint16(dst) | uint16(src)
	c.D[4] = uint32(v)
	c.tracef("%04X ori.w #$%X,D4\n", pc, src)
}

func (c *Processor) op0145() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[5]
	v := uint16(dst) | uint16(src)
	c.D[5] = uint32(v)
	c.tracef("%04X ori.w #$%X,D5\n", pc, src)
}

func (c *Processor) op0146() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[6]
	v := uint16(dst) | uint16(src)
	c.D[6] = uint32(v)
	c.tracef("%04X ori.w #$%X,D6\n", pc, src)
}

func (c *Processor) op0147() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[7]
	v := uint16(dst) | uint16(src)
	c.D[7] = uint32(v)
	c.tracef("%04X ori.w #$%X,D7\n", pc, src)
}

func (c *Processor) op0148() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[0]
	v := uint16(dst) | uint16(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w #$%X,A0\n", pc, src)
}

func (c *Processor) op0149() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[1]
	v := uint16(dst) | uint16(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w #$%X,A1\n", pc, src)
}

func (c *Processor) op014A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[2]
	v := uint16(dst) | uint16(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w #$%X,A2\n", pc, src)
}

func (c *Processor) op014B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[3]
	v := uint16(dst) | uint16(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w #$%X,A3\n", pc, src)
}

func (c *Processor) op014C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[4]
	v := uint16(dst) | uint16(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w #$%X,A4\n", pc, src)
}

func (c *Processor) op014D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[5]
	v := uint16(dst) | uint16(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w #$%X,A5\n", pc, src)
}

func (c *Processor) op014E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[6]
	v := uint16(dst) | uint16(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w #$%X,A6\n", pc, src)
}

func (c *Processor) op014F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[7]
	v := uint16(dst) | uint16(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w #$%X,A7\n", pc, src)
}

func (c *Processor) op0150() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X ori.w #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0151() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X ori.w #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0152() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X ori.w #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0153() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X ori.w #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0154() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X ori.w #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0155() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X ori.w #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0156() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X ori.w #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0157() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X ori.w #$%X,(A7)\n", pc, src)
}

func (c *Processor) op0178() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X ori.w #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0179() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) | uint16(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X ori.w #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op017C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.SR |= uint32(src) & 0x1F
	c.tracef("%04X ?.w #$%X,SR\n", pc, src)
}

func (c *Processor) op0180() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[0]
	v := uint32(dst) | uint32(src)
	c.D[0] = uint32(v)
	c.tracef("%04X ori.l #$%X,D0\n", pc, src)
}

func (c *Processor) op0181() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[1]
	v := uint32(dst) | uint32(src)
	c.D[1] = uint32(v)
	c.tracef("%04X ori.l #$%X,D1\n", pc, src)
}

func (c *Processor) op0182() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[2]
	v := uint32(dst) | uint32(src)
	c.D[2] = uint32(v)
	c.tracef("%04X ori.l #$%X,D2\n", pc, src)
}

func (c *Processor) op0183() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[3]
	v := uint32(dst) | uint32(src)
	c.D[3] = uint32(v)
	c.tracef("%04X ori.l #$%X,D3\n", pc, src)
}

func (c *Processor) op0184() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[4]
	v := uint32(dst) | uint32(src)
	c.D[4] = uint32(v)
	c.tracef("%04X ori.l #$%X,D4\n", pc, src)
}

func (c *Processor) op0185() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[5]
	v := uint32(dst) | uint32(src)
	c.D[5] = uint32(v)
	c.tracef("%04X ori.l #$%X,D5\n", pc, src)
}

func (c *Processor) op0186() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[6]
	v := uint32(dst) | uint32(src)
	c.D[6] = uint32(v)
	c.tracef("%04X ori.l #$%X,D6\n", pc, src)
}

func (c *Processor) op0187() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[7]
	v := uint32(dst) | uint32(src)
	c.D[7] = uint32(v)
	c.tracef("%04X ori.l #$%X,D7\n", pc, src)
}

func (c *Processor) op0188() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[0]
	v := uint32(dst) | uint32(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l #$%X,A0\n", pc, src)
}

func (c *Processor) op0189() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[1]
	v := uint32(dst) | uint32(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l #$%X,A1\n", pc, src)
}

func (c *Processor) op018A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[2]
	v := uint32(dst) | uint32(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l #$%X,A2\n", pc, src)
}

func (c *Processor) op018B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[3]
	v := uint32(dst) | uint32(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l #$%X,A3\n", pc, src)
}

func (c *Processor) op018C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[4]
	v := uint32(dst) | uint32(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l #$%X,A4\n", pc, src)
}

func (c *Processor) op018D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[5]
	v := uint32(dst) | uint32(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l #$%X,A5\n", pc, src)
}

func (c *Processor) op018E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[6]
	v := uint32(dst) | uint32(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l #$%X,A6\n", pc, src)
}

func (c *Processor) op018F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[7]
	v := uint32(dst) | uint32(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l #$%X,A7\n", pc, src)
}

func (c *Processor) op0190() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) | uint32(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X ori.l #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0191() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) | uint32(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X ori.l #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0192() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) | uint32(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X ori.l #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0193() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) | uint32(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X ori.l #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0194() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) | uint32(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X ori.l #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0195() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) | uint32(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X ori.l #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0196() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) | uint32(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X ori.l #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0197() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) | uint32(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X ori.l #$%X,(A7)\n", pc, src)
}

func (c *Processor) op01B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	dst := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	v := uint32(dst) | uint32(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X ori.l #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op01B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	dst := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	v := uint32(dst) | uint32(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X ori.l #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0200() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[0]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.D[0] = uint32(v)
	c.tracef("%04X andi.b #$%X,D0\n", pc, src)
}

func (c *Processor) op0201() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[1]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.D[1] = uint32(v)
	c.tracef("%04X andi.b #$%X,D1\n", pc, src)
}

func (c *Processor) op0202() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[2]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.D[2] = uint32(v)
	c.tracef("%04X andi.b #$%X,D2\n", pc, src)
}

func (c *Processor) op0203() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[3]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.D[3] = uint32(v)
	c.tracef("%04X andi.b #$%X,D3\n", pc, src)
}

func (c *Processor) op0204() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[4]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.D[4] = uint32(v)
	c.tracef("%04X andi.b #$%X,D4\n", pc, src)
}

func (c *Processor) op0205() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[5]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.D[5] = uint32(v)
	c.tracef("%04X andi.b #$%X,D5\n", pc, src)
}

func (c *Processor) op0206() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[6]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.D[6] = uint32(v)
	c.tracef("%04X andi.b #$%X,D6\n", pc, src)
}

func (c *Processor) op0207() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[7]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.D[7] = uint32(v)
	c.tracef("%04X andi.b #$%X,D7\n", pc, src)
}

func (c *Processor) op0208() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[0]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b #$%X,A0\n", pc, src)
}

func (c *Processor) op0209() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[1]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b #$%X,A1\n", pc, src)
}

func (c *Processor) op020A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[2]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b #$%X,A2\n", pc, src)
}

func (c *Processor) op020B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[3]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b #$%X,A3\n", pc, src)
}

func (c *Processor) op020C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[4]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b #$%X,A4\n", pc, src)
}

func (c *Processor) op020D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[5]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b #$%X,A5\n", pc, src)
}

func (c *Processor) op020E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[6]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b #$%X,A6\n", pc, src)
}

func (c *Processor) op020F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[7]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b #$%X,A7\n", pc, src)
}

func (c *Processor) op0210() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) & byte(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X andi.b #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0211() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) & byte(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X andi.b #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0212() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) & byte(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X andi.b #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0213() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) & byte(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X andi.b #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0214() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) & byte(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X andi.b #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0215() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) & byte(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X andi.b #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0216() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) & byte(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X andi.b #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0217() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) & byte(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X andi.b #$%X,(A7)\n", pc, src)
}

func (c *Processor) op0238() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := c.buf[1]
	v := byte(dst) & byte(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X andi.b #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0239() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := c.buf[1]
	v := byte(dst) & byte(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X andi.b #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op023C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	c.SR |= (uint32(src) & 0x1F)
	c.tracef("%04X ?.b #$%X,CCR\n", pc, src)
}

func (c *Processor) op0240() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[0]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.D[0] = uint32(v)
	c.tracef("%04X andi.w #$%X,D0\n", pc, src)
}

func (c *Processor) op0241() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[1]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.D[1] = uint32(v)
	c.tracef("%04X andi.w #$%X,D1\n", pc, src)
}

func (c *Processor) op0242() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[2]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.D[2] = uint32(v)
	c.tracef("%04X andi.w #$%X,D2\n", pc, src)
}

func (c *Processor) op0243() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[3]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.D[3] = uint32(v)
	c.tracef("%04X andi.w #$%X,D3\n", pc, src)
}

func (c *Processor) op0244() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[4]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.D[4] = uint32(v)
	c.tracef("%04X andi.w #$%X,D4\n", pc, src)
}

func (c *Processor) op0245() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[5]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.D[5] = uint32(v)
	c.tracef("%04X andi.w #$%X,D5\n", pc, src)
}

func (c *Processor) op0246() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[6]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.D[6] = uint32(v)
	c.tracef("%04X andi.w #$%X,D6\n", pc, src)
}

func (c *Processor) op0247() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[7]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.D[7] = uint32(v)
	c.tracef("%04X andi.w #$%X,D7\n", pc, src)
}

func (c *Processor) op0248() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[0]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w #$%X,A0\n", pc, src)
}

func (c *Processor) op0249() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[1]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w #$%X,A1\n", pc, src)
}

func (c *Processor) op024A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[2]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w #$%X,A2\n", pc, src)
}

func (c *Processor) op024B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[3]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w #$%X,A3\n", pc, src)
}

func (c *Processor) op024C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[4]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w #$%X,A4\n", pc, src)
}

func (c *Processor) op024D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[5]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w #$%X,A5\n", pc, src)
}

func (c *Processor) op024E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[6]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w #$%X,A6\n", pc, src)
}

func (c *Processor) op024F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[7]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w #$%X,A7\n", pc, src)
}

func (c *Processor) op0250() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X andi.w #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0251() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X andi.w #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0252() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X andi.w #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0253() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X andi.w #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0254() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X andi.w #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0255() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X andi.w #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0256() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X andi.w #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0257() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X andi.w #$%X,(A7)\n", pc, src)
}

func (c *Processor) op0278() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X andi.w #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0279() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X andi.w #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op027C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.SR |= uint32(src) & 0x1F
	c.tracef("%04X ?.w #$%X,SR\n", pc, src)
}

func (c *Processor) op0280() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[0]
	v := uint32(dst) & uint32(src)
	c.D[0] = uint32(v)
	c.tracef("%04X andi.l #$%X,D0\n", pc, src)
}

func (c *Processor) op0281() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[1]
	v := uint32(dst) & uint32(src)
	c.D[1] = uint32(v)
	c.tracef("%04X andi.l #$%X,D1\n", pc, src)
}

func (c *Processor) op0282() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[2]
	v := uint32(dst) & uint32(src)
	c.D[2] = uint32(v)
	c.tracef("%04X andi.l #$%X,D2\n", pc, src)
}

func (c *Processor) op0283() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[3]
	v := uint32(dst) & uint32(src)
	c.D[3] = uint32(v)
	c.tracef("%04X andi.l #$%X,D3\n", pc, src)
}

func (c *Processor) op0284() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[4]
	v := uint32(dst) & uint32(src)
	c.D[4] = uint32(v)
	c.tracef("%04X andi.l #$%X,D4\n", pc, src)
}

func (c *Processor) op0285() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[5]
	v := uint32(dst) & uint32(src)
	c.D[5] = uint32(v)
	c.tracef("%04X andi.l #$%X,D5\n", pc, src)
}

func (c *Processor) op0286() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[6]
	v := uint32(dst) & uint32(src)
	c.D[6] = uint32(v)
	c.tracef("%04X andi.l #$%X,D6\n", pc, src)
}

func (c *Processor) op0287() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[7]
	v := uint32(dst) & uint32(src)
	c.D[7] = uint32(v)
	c.tracef("%04X andi.l #$%X,D7\n", pc, src)
}

func (c *Processor) op0288() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[0]
	v := uint32(dst) & uint32(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l #$%X,A0\n", pc, src)
}

func (c *Processor) op0289() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[1]
	v := uint32(dst) & uint32(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l #$%X,A1\n", pc, src)
}

func (c *Processor) op028A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[2]
	v := uint32(dst) & uint32(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l #$%X,A2\n", pc, src)
}

func (c *Processor) op028B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[3]
	v := uint32(dst) & uint32(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l #$%X,A3\n", pc, src)
}

func (c *Processor) op028C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[4]
	v := uint32(dst) & uint32(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l #$%X,A4\n", pc, src)
}

func (c *Processor) op028D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[5]
	v := uint32(dst) & uint32(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l #$%X,A5\n", pc, src)
}

func (c *Processor) op028E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[6]
	v := uint32(dst) & uint32(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l #$%X,A6\n", pc, src)
}

func (c *Processor) op028F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[7]
	v := uint32(dst) & uint32(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l #$%X,A7\n", pc, src)
}

func (c *Processor) op0290() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) & uint32(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X andi.l #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0291() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) & uint32(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X andi.l #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0292() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) & uint32(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X andi.l #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0293() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) & uint32(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X andi.l #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0294() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) & uint32(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X andi.l #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0295() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) & uint32(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X andi.l #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0296() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) & uint32(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X andi.l #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0297() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) & uint32(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X andi.l #$%X,(A7)\n", pc, src)
}

func (c *Processor) op02B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	dst := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	v := uint32(dst) & uint32(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X andi.l #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op02B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	dst := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	v := uint32(dst) & uint32(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X andi.l #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0300() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[0]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.D[0] = uint32(v)
	c.tracef("%04X andi.b #$%X,D0\n", pc, src)
}

func (c *Processor) op0301() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[1]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.D[1] = uint32(v)
	c.tracef("%04X andi.b #$%X,D1\n", pc, src)
}

func (c *Processor) op0302() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[2]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.D[2] = uint32(v)
	c.tracef("%04X andi.b #$%X,D2\n", pc, src)
}

func (c *Processor) op0303() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[3]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.D[3] = uint32(v)
	c.tracef("%04X andi.b #$%X,D3\n", pc, src)
}

func (c *Processor) op0304() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[4]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.D[4] = uint32(v)
	c.tracef("%04X andi.b #$%X,D4\n", pc, src)
}

func (c *Processor) op0305() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[5]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.D[5] = uint32(v)
	c.tracef("%04X andi.b #$%X,D5\n", pc, src)
}

func (c *Processor) op0306() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[6]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.D[6] = uint32(v)
	c.tracef("%04X andi.b #$%X,D6\n", pc, src)
}

func (c *Processor) op0307() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[7]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.D[7] = uint32(v)
	c.tracef("%04X andi.b #$%X,D7\n", pc, src)
}

func (c *Processor) op0308() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[0]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b #$%X,A0\n", pc, src)
}

func (c *Processor) op0309() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[1]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b #$%X,A1\n", pc, src)
}

func (c *Processor) op030A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[2]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b #$%X,A2\n", pc, src)
}

func (c *Processor) op030B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[3]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b #$%X,A3\n", pc, src)
}

func (c *Processor) op030C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[4]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b #$%X,A4\n", pc, src)
}

func (c *Processor) op030D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[5]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b #$%X,A5\n", pc, src)
}

func (c *Processor) op030E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[6]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b #$%X,A6\n", pc, src)
}

func (c *Processor) op030F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[7]
	v := (dst & 0xFFFFFF00) | uint32(byte(dst)&byte(src))
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b #$%X,A7\n", pc, src)
}

func (c *Processor) op0310() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) & byte(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X andi.b #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0311() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) & byte(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X andi.b #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0312() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) & byte(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X andi.b #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0313() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) & byte(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X andi.b #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0314() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) & byte(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X andi.b #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0315() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) & byte(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X andi.b #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0316() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) & byte(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X andi.b #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0317() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) & byte(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X andi.b #$%X,(A7)\n", pc, src)
}

func (c *Processor) op0338() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := c.buf[1]
	v := byte(dst) & byte(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X andi.b #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0339() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := c.buf[1]
	v := byte(dst) & byte(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X andi.b #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op033C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	c.SR |= (uint32(src) & 0x1F)
	c.tracef("%04X ?.b #$%X,CCR\n", pc, src)
}

func (c *Processor) op0340() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[0]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.D[0] = uint32(v)
	c.tracef("%04X andi.w #$%X,D0\n", pc, src)
}

func (c *Processor) op0341() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[1]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.D[1] = uint32(v)
	c.tracef("%04X andi.w #$%X,D1\n", pc, src)
}

func (c *Processor) op0342() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[2]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.D[2] = uint32(v)
	c.tracef("%04X andi.w #$%X,D2\n", pc, src)
}

func (c *Processor) op0343() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[3]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.D[3] = uint32(v)
	c.tracef("%04X andi.w #$%X,D3\n", pc, src)
}

func (c *Processor) op0344() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[4]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.D[4] = uint32(v)
	c.tracef("%04X andi.w #$%X,D4\n", pc, src)
}

func (c *Processor) op0345() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[5]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.D[5] = uint32(v)
	c.tracef("%04X andi.w #$%X,D5\n", pc, src)
}

func (c *Processor) op0346() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[6]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.D[6] = uint32(v)
	c.tracef("%04X andi.w #$%X,D6\n", pc, src)
}

func (c *Processor) op0347() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[7]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.D[7] = uint32(v)
	c.tracef("%04X andi.w #$%X,D7\n", pc, src)
}

func (c *Processor) op0348() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[0]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w #$%X,A0\n", pc, src)
}

func (c *Processor) op0349() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[1]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w #$%X,A1\n", pc, src)
}

func (c *Processor) op034A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[2]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w #$%X,A2\n", pc, src)
}

func (c *Processor) op034B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[3]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w #$%X,A3\n", pc, src)
}

func (c *Processor) op034C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[4]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w #$%X,A4\n", pc, src)
}

func (c *Processor) op034D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[5]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w #$%X,A5\n", pc, src)
}

func (c *Processor) op034E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[6]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w #$%X,A6\n", pc, src)
}

func (c *Processor) op034F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[7]
	v := (dst & 0xFFFF0000) | uint32(uint16(dst)&uint16(src))
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w #$%X,A7\n", pc, src)
}

func (c *Processor) op0350() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X andi.w #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0351() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X andi.w #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0352() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X andi.w #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0353() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X andi.w #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0354() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X andi.w #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0355() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X andi.w #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0356() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X andi.w #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0357() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X andi.w #$%X,(A7)\n", pc, src)
}

func (c *Processor) op0378() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X andi.w #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0379() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) & uint16(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X andi.w #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op037C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.SR |= uint32(src) & 0x1F
	c.tracef("%04X ?.w #$%X,SR\n", pc, src)
}

func (c *Processor) op0380() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[0]
	v := uint32(dst) & uint32(src)
	c.D[0] = uint32(v)
	c.tracef("%04X andi.l #$%X,D0\n", pc, src)
}

func (c *Processor) op0381() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[1]
	v := uint32(dst) & uint32(src)
	c.D[1] = uint32(v)
	c.tracef("%04X andi.l #$%X,D1\n", pc, src)
}

func (c *Processor) op0382() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[2]
	v := uint32(dst) & uint32(src)
	c.D[2] = uint32(v)
	c.tracef("%04X andi.l #$%X,D2\n", pc, src)
}

func (c *Processor) op0383() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[3]
	v := uint32(dst) & uint32(src)
	c.D[3] = uint32(v)
	c.tracef("%04X andi.l #$%X,D3\n", pc, src)
}

func (c *Processor) op0384() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[4]
	v := uint32(dst) & uint32(src)
	c.D[4] = uint32(v)
	c.tracef("%04X andi.l #$%X,D4\n", pc, src)
}

func (c *Processor) op0385() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[5]
	v := uint32(dst) & uint32(src)
	c.D[5] = uint32(v)
	c.tracef("%04X andi.l #$%X,D5\n", pc, src)
}

func (c *Processor) op0386() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[6]
	v := uint32(dst) & uint32(src)
	c.D[6] = uint32(v)
	c.tracef("%04X andi.l #$%X,D6\n", pc, src)
}

func (c *Processor) op0387() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[7]
	v := uint32(dst) & uint32(src)
	c.D[7] = uint32(v)
	c.tracef("%04X andi.l #$%X,D7\n", pc, src)
}

func (c *Processor) op0388() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[0]
	v := uint32(dst) & uint32(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l #$%X,A0\n", pc, src)
}

func (c *Processor) op0389() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[1]
	v := uint32(dst) & uint32(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l #$%X,A1\n", pc, src)
}

func (c *Processor) op038A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[2]
	v := uint32(dst) & uint32(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l #$%X,A2\n", pc, src)
}

func (c *Processor) op038B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[3]
	v := uint32(dst) & uint32(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l #$%X,A3\n", pc, src)
}

func (c *Processor) op038C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[4]
	v := uint32(dst) & uint32(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l #$%X,A4\n", pc, src)
}

func (c *Processor) op038D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[5]
	v := uint32(dst) & uint32(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l #$%X,A5\n", pc, src)
}

func (c *Processor) op038E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[6]
	v := uint32(dst) & uint32(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l #$%X,A6\n", pc, src)
}

func (c *Processor) op038F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[7]
	v := uint32(dst) & uint32(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l #$%X,A7\n", pc, src)
}

func (c *Processor) op0390() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) & uint32(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X andi.l #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0391() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) & uint32(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X andi.l #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0392() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) & uint32(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X andi.l #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0393() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) & uint32(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X andi.l #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0394() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) & uint32(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X andi.l #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0395() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) & uint32(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X andi.l #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0396() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) & uint32(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X andi.l #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0397() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) & uint32(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X andi.l #$%X,(A7)\n", pc, src)
}

func (c *Processor) op03B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	dst := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	v := uint32(dst) & uint32(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X andi.l #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op03B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	dst := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	v := uint32(dst) & uint32(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X andi.l #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0400() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[0]
	v := byte(dst) - byte(src)
	c.D[0] = uint32(v)
	c.tracef("%04X subi.b #$%X,D0\n", pc, src)
}

func (c *Processor) op0401() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[1]
	v := byte(dst) - byte(src)
	c.D[1] = uint32(v)
	c.tracef("%04X subi.b #$%X,D1\n", pc, src)
}

func (c *Processor) op0402() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[2]
	v := byte(dst) - byte(src)
	c.D[2] = uint32(v)
	c.tracef("%04X subi.b #$%X,D2\n", pc, src)
}

func (c *Processor) op0403() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[3]
	v := byte(dst) - byte(src)
	c.D[3] = uint32(v)
	c.tracef("%04X subi.b #$%X,D3\n", pc, src)
}

func (c *Processor) op0404() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[4]
	v := byte(dst) - byte(src)
	c.D[4] = uint32(v)
	c.tracef("%04X subi.b #$%X,D4\n", pc, src)
}

func (c *Processor) op0405() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[5]
	v := byte(dst) - byte(src)
	c.D[5] = uint32(v)
	c.tracef("%04X subi.b #$%X,D5\n", pc, src)
}

func (c *Processor) op0406() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[6]
	v := byte(dst) - byte(src)
	c.D[6] = uint32(v)
	c.tracef("%04X subi.b #$%X,D6\n", pc, src)
}

func (c *Processor) op0407() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[7]
	v := byte(dst) - byte(src)
	c.D[7] = uint32(v)
	c.tracef("%04X subi.b #$%X,D7\n", pc, src)
}

func (c *Processor) op0408() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[0]
	v := byte(dst) - byte(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b #$%X,A0\n", pc, src)
}

func (c *Processor) op0409() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[1]
	v := byte(dst) - byte(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b #$%X,A1\n", pc, src)
}

func (c *Processor) op040A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[2]
	v := byte(dst) - byte(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b #$%X,A2\n", pc, src)
}

func (c *Processor) op040B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[3]
	v := byte(dst) - byte(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b #$%X,A3\n", pc, src)
}

func (c *Processor) op040C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[4]
	v := byte(dst) - byte(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b #$%X,A4\n", pc, src)
}

func (c *Processor) op040D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[5]
	v := byte(dst) - byte(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b #$%X,A5\n", pc, src)
}

func (c *Processor) op040E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[6]
	v := byte(dst) - byte(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b #$%X,A6\n", pc, src)
}

func (c *Processor) op040F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[7]
	v := byte(dst) - byte(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b #$%X,A7\n", pc, src)
}

func (c *Processor) op0410() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) - byte(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X subi.b #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0411() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) - byte(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X subi.b #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0412() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) - byte(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X subi.b #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0413() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) - byte(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X subi.b #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0414() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) - byte(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X subi.b #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0415() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) - byte(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X subi.b #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0416() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) - byte(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X subi.b #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0417() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) - byte(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X subi.b #$%X,(A7)\n", pc, src)
}

func (c *Processor) op0438() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := c.buf[1]
	v := byte(dst) - byte(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X subi.b #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0439() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := c.buf[1]
	v := byte(dst) - byte(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X subi.b #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op043C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	c.SR |= (uint32(src) & 0x1F)
	c.tracef("%04X ?.b #$%X,CCR\n", pc, src)
}

func (c *Processor) op0440() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[0]
	v := uint16(dst) - uint16(src)
	c.D[0] = uint32(v)
	c.tracef("%04X subi.w #$%X,D0\n", pc, src)
}

func (c *Processor) op0441() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[1]
	v := uint16(dst) - uint16(src)
	c.D[1] = uint32(v)
	c.tracef("%04X subi.w #$%X,D1\n", pc, src)
}

func (c *Processor) op0442() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[2]
	v := uint16(dst) - uint16(src)
	c.D[2] = uint32(v)
	c.tracef("%04X subi.w #$%X,D2\n", pc, src)
}

func (c *Processor) op0443() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[3]
	v := uint16(dst) - uint16(src)
	c.D[3] = uint32(v)
	c.tracef("%04X subi.w #$%X,D3\n", pc, src)
}

func (c *Processor) op0444() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[4]
	v := uint16(dst) - uint16(src)
	c.D[4] = uint32(v)
	c.tracef("%04X subi.w #$%X,D4\n", pc, src)
}

func (c *Processor) op0445() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[5]
	v := uint16(dst) - uint16(src)
	c.D[5] = uint32(v)
	c.tracef("%04X subi.w #$%X,D5\n", pc, src)
}

func (c *Processor) op0446() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[6]
	v := uint16(dst) - uint16(src)
	c.D[6] = uint32(v)
	c.tracef("%04X subi.w #$%X,D6\n", pc, src)
}

func (c *Processor) op0447() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[7]
	v := uint16(dst) - uint16(src)
	c.D[7] = uint32(v)
	c.tracef("%04X subi.w #$%X,D7\n", pc, src)
}

func (c *Processor) op0448() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[0]
	v := uint16(dst) - uint16(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w #$%X,A0\n", pc, src)
}

func (c *Processor) op0449() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[1]
	v := uint16(dst) - uint16(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w #$%X,A1\n", pc, src)
}

func (c *Processor) op044A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[2]
	v := uint16(dst) - uint16(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w #$%X,A2\n", pc, src)
}

func (c *Processor) op044B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[3]
	v := uint16(dst) - uint16(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w #$%X,A3\n", pc, src)
}

func (c *Processor) op044C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[4]
	v := uint16(dst) - uint16(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w #$%X,A4\n", pc, src)
}

func (c *Processor) op044D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[5]
	v := uint16(dst) - uint16(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w #$%X,A5\n", pc, src)
}

func (c *Processor) op044E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[6]
	v := uint16(dst) - uint16(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w #$%X,A6\n", pc, src)
}

func (c *Processor) op044F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[7]
	v := uint16(dst) - uint16(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w #$%X,A7\n", pc, src)
}

func (c *Processor) op0450() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X subi.w #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0451() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X subi.w #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0452() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X subi.w #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0453() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X subi.w #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0454() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X subi.w #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0455() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X subi.w #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0456() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X subi.w #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0457() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X subi.w #$%X,(A7)\n", pc, src)
}

func (c *Processor) op0478() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X subi.w #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0479() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X subi.w #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op047C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.SR |= uint32(src) & 0x1F
	c.tracef("%04X ?.w #$%X,SR\n", pc, src)
}

func (c *Processor) op0480() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[0]
	v := uint32(dst) - uint32(src)
	c.D[0] = uint32(v)
	c.tracef("%04X subi.l #$%X,D0\n", pc, src)
}

func (c *Processor) op0481() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[1]
	v := uint32(dst) - uint32(src)
	c.D[1] = uint32(v)
	c.tracef("%04X subi.l #$%X,D1\n", pc, src)
}

func (c *Processor) op0482() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[2]
	v := uint32(dst) - uint32(src)
	c.D[2] = uint32(v)
	c.tracef("%04X subi.l #$%X,D2\n", pc, src)
}

func (c *Processor) op0483() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[3]
	v := uint32(dst) - uint32(src)
	c.D[3] = uint32(v)
	c.tracef("%04X subi.l #$%X,D3\n", pc, src)
}

func (c *Processor) op0484() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[4]
	v := uint32(dst) - uint32(src)
	c.D[4] = uint32(v)
	c.tracef("%04X subi.l #$%X,D4\n", pc, src)
}

func (c *Processor) op0485() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[5]
	v := uint32(dst) - uint32(src)
	c.D[5] = uint32(v)
	c.tracef("%04X subi.l #$%X,D5\n", pc, src)
}

func (c *Processor) op0486() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[6]
	v := uint32(dst) - uint32(src)
	c.D[6] = uint32(v)
	c.tracef("%04X subi.l #$%X,D6\n", pc, src)
}

func (c *Processor) op0487() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[7]
	v := uint32(dst) - uint32(src)
	c.D[7] = uint32(v)
	c.tracef("%04X subi.l #$%X,D7\n", pc, src)
}

func (c *Processor) op0488() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[0]
	v := uint32(dst) - uint32(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l #$%X,A0\n", pc, src)
}

func (c *Processor) op0489() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[1]
	v := uint32(dst) - uint32(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l #$%X,A1\n", pc, src)
}

func (c *Processor) op048A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[2]
	v := uint32(dst) - uint32(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l #$%X,A2\n", pc, src)
}

func (c *Processor) op048B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[3]
	v := uint32(dst) - uint32(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l #$%X,A3\n", pc, src)
}

func (c *Processor) op048C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[4]
	v := uint32(dst) - uint32(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l #$%X,A4\n", pc, src)
}

func (c *Processor) op048D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[5]
	v := uint32(dst) - uint32(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l #$%X,A5\n", pc, src)
}

func (c *Processor) op048E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[6]
	v := uint32(dst) - uint32(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l #$%X,A6\n", pc, src)
}

func (c *Processor) op048F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[7]
	v := uint32(dst) - uint32(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l #$%X,A7\n", pc, src)
}

func (c *Processor) op0490() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) - uint32(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X subi.l #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0491() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) - uint32(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X subi.l #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0492() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) - uint32(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X subi.l #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0493() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) - uint32(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X subi.l #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0494() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) - uint32(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X subi.l #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0495() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) - uint32(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X subi.l #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0496() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) - uint32(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X subi.l #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0497() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) - uint32(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X subi.l #$%X,(A7)\n", pc, src)
}

func (c *Processor) op04B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	dst := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	v := uint32(dst) - uint32(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X subi.l #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op04B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	dst := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	v := uint32(dst) - uint32(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X subi.l #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0500() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[0]
	v := byte(dst) - byte(src)
	c.D[0] = uint32(v)
	c.tracef("%04X subi.b #$%X,D0\n", pc, src)
}

func (c *Processor) op0501() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[1]
	v := byte(dst) - byte(src)
	c.D[1] = uint32(v)
	c.tracef("%04X subi.b #$%X,D1\n", pc, src)
}

func (c *Processor) op0502() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[2]
	v := byte(dst) - byte(src)
	c.D[2] = uint32(v)
	c.tracef("%04X subi.b #$%X,D2\n", pc, src)
}

func (c *Processor) op0503() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[3]
	v := byte(dst) - byte(src)
	c.D[3] = uint32(v)
	c.tracef("%04X subi.b #$%X,D3\n", pc, src)
}

func (c *Processor) op0504() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[4]
	v := byte(dst) - byte(src)
	c.D[4] = uint32(v)
	c.tracef("%04X subi.b #$%X,D4\n", pc, src)
}

func (c *Processor) op0505() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[5]
	v := byte(dst) - byte(src)
	c.D[5] = uint32(v)
	c.tracef("%04X subi.b #$%X,D5\n", pc, src)
}

func (c *Processor) op0506() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[6]
	v := byte(dst) - byte(src)
	c.D[6] = uint32(v)
	c.tracef("%04X subi.b #$%X,D6\n", pc, src)
}

func (c *Processor) op0507() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[7]
	v := byte(dst) - byte(src)
	c.D[7] = uint32(v)
	c.tracef("%04X subi.b #$%X,D7\n", pc, src)
}

func (c *Processor) op0508() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[0]
	v := byte(dst) - byte(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b #$%X,A0\n", pc, src)
}

func (c *Processor) op0509() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[1]
	v := byte(dst) - byte(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b #$%X,A1\n", pc, src)
}

func (c *Processor) op050A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[2]
	v := byte(dst) - byte(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b #$%X,A2\n", pc, src)
}

func (c *Processor) op050B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[3]
	v := byte(dst) - byte(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b #$%X,A3\n", pc, src)
}

func (c *Processor) op050C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[4]
	v := byte(dst) - byte(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b #$%X,A4\n", pc, src)
}

func (c *Processor) op050D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[5]
	v := byte(dst) - byte(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b #$%X,A5\n", pc, src)
}

func (c *Processor) op050E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[6]
	v := byte(dst) - byte(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b #$%X,A6\n", pc, src)
}

func (c *Processor) op050F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[7]
	v := byte(dst) - byte(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b #$%X,A7\n", pc, src)
}

func (c *Processor) op0510() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) - byte(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X subi.b #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0511() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) - byte(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X subi.b #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0512() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) - byte(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X subi.b #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0513() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) - byte(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X subi.b #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0514() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) - byte(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X subi.b #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0515() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) - byte(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X subi.b #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0516() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) - byte(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X subi.b #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0517() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) - byte(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X subi.b #$%X,(A7)\n", pc, src)
}

func (c *Processor) op0538() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := c.buf[1]
	v := byte(dst) - byte(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X subi.b #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0539() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := c.buf[1]
	v := byte(dst) - byte(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X subi.b #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op053C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	c.SR |= (uint32(src) & 0x1F)
	c.tracef("%04X ?.b #$%X,CCR\n", pc, src)
}

func (c *Processor) op0540() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[0]
	v := uint16(dst) - uint16(src)
	c.D[0] = uint32(v)
	c.tracef("%04X subi.w #$%X,D0\n", pc, src)
}

func (c *Processor) op0541() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[1]
	v := uint16(dst) - uint16(src)
	c.D[1] = uint32(v)
	c.tracef("%04X subi.w #$%X,D1\n", pc, src)
}

func (c *Processor) op0542() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[2]
	v := uint16(dst) - uint16(src)
	c.D[2] = uint32(v)
	c.tracef("%04X subi.w #$%X,D2\n", pc, src)
}

func (c *Processor) op0543() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[3]
	v := uint16(dst) - uint16(src)
	c.D[3] = uint32(v)
	c.tracef("%04X subi.w #$%X,D3\n", pc, src)
}

func (c *Processor) op0544() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[4]
	v := uint16(dst) - uint16(src)
	c.D[4] = uint32(v)
	c.tracef("%04X subi.w #$%X,D4\n", pc, src)
}

func (c *Processor) op0545() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[5]
	v := uint16(dst) - uint16(src)
	c.D[5] = uint32(v)
	c.tracef("%04X subi.w #$%X,D5\n", pc, src)
}

func (c *Processor) op0546() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[6]
	v := uint16(dst) - uint16(src)
	c.D[6] = uint32(v)
	c.tracef("%04X subi.w #$%X,D6\n", pc, src)
}

func (c *Processor) op0547() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[7]
	v := uint16(dst) - uint16(src)
	c.D[7] = uint32(v)
	c.tracef("%04X subi.w #$%X,D7\n", pc, src)
}

func (c *Processor) op0548() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[0]
	v := uint16(dst) - uint16(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w #$%X,A0\n", pc, src)
}

func (c *Processor) op0549() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[1]
	v := uint16(dst) - uint16(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w #$%X,A1\n", pc, src)
}

func (c *Processor) op054A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[2]
	v := uint16(dst) - uint16(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w #$%X,A2\n", pc, src)
}

func (c *Processor) op054B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[3]
	v := uint16(dst) - uint16(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w #$%X,A3\n", pc, src)
}

func (c *Processor) op054C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[4]
	v := uint16(dst) - uint16(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w #$%X,A4\n", pc, src)
}

func (c *Processor) op054D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[5]
	v := uint16(dst) - uint16(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w #$%X,A5\n", pc, src)
}

func (c *Processor) op054E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[6]
	v := uint16(dst) - uint16(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w #$%X,A6\n", pc, src)
}

func (c *Processor) op054F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[7]
	v := uint16(dst) - uint16(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w #$%X,A7\n", pc, src)
}

func (c *Processor) op0550() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X subi.w #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0551() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X subi.w #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0552() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X subi.w #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0553() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X subi.w #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0554() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X subi.w #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0555() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X subi.w #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0556() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X subi.w #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0557() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X subi.w #$%X,(A7)\n", pc, src)
}

func (c *Processor) op0578() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X subi.w #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0579() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) - uint16(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X subi.w #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op057C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.SR |= uint32(src) & 0x1F
	c.tracef("%04X ?.w #$%X,SR\n", pc, src)
}

func (c *Processor) op0580() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[0]
	v := uint32(dst) - uint32(src)
	c.D[0] = uint32(v)
	c.tracef("%04X subi.l #$%X,D0\n", pc, src)
}

func (c *Processor) op0581() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[1]
	v := uint32(dst) - uint32(src)
	c.D[1] = uint32(v)
	c.tracef("%04X subi.l #$%X,D1\n", pc, src)
}

func (c *Processor) op0582() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[2]
	v := uint32(dst) - uint32(src)
	c.D[2] = uint32(v)
	c.tracef("%04X subi.l #$%X,D2\n", pc, src)
}

func (c *Processor) op0583() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[3]
	v := uint32(dst) - uint32(src)
	c.D[3] = uint32(v)
	c.tracef("%04X subi.l #$%X,D3\n", pc, src)
}

func (c *Processor) op0584() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[4]
	v := uint32(dst) - uint32(src)
	c.D[4] = uint32(v)
	c.tracef("%04X subi.l #$%X,D4\n", pc, src)
}

func (c *Processor) op0585() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[5]
	v := uint32(dst) - uint32(src)
	c.D[5] = uint32(v)
	c.tracef("%04X subi.l #$%X,D5\n", pc, src)
}

func (c *Processor) op0586() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[6]
	v := uint32(dst) - uint32(src)
	c.D[6] = uint32(v)
	c.tracef("%04X subi.l #$%X,D6\n", pc, src)
}

func (c *Processor) op0587() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[7]
	v := uint32(dst) - uint32(src)
	c.D[7] = uint32(v)
	c.tracef("%04X subi.l #$%X,D7\n", pc, src)
}

func (c *Processor) op0588() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[0]
	v := uint32(dst) - uint32(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l #$%X,A0\n", pc, src)
}

func (c *Processor) op0589() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[1]
	v := uint32(dst) - uint32(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l #$%X,A1\n", pc, src)
}

func (c *Processor) op058A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[2]
	v := uint32(dst) - uint32(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l #$%X,A2\n", pc, src)
}

func (c *Processor) op058B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[3]
	v := uint32(dst) - uint32(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l #$%X,A3\n", pc, src)
}

func (c *Processor) op058C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[4]
	v := uint32(dst) - uint32(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l #$%X,A4\n", pc, src)
}

func (c *Processor) op058D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[5]
	v := uint32(dst) - uint32(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l #$%X,A5\n", pc, src)
}

func (c *Processor) op058E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[6]
	v := uint32(dst) - uint32(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l #$%X,A6\n", pc, src)
}

func (c *Processor) op058F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[7]
	v := uint32(dst) - uint32(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l #$%X,A7\n", pc, src)
}

func (c *Processor) op0590() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) - uint32(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X subi.l #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0591() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) - uint32(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X subi.l #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0592() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) - uint32(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X subi.l #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0593() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) - uint32(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X subi.l #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0594() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) - uint32(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X subi.l #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0595() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) - uint32(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X subi.l #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0596() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) - uint32(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X subi.l #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0597() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) - uint32(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X subi.l #$%X,(A7)\n", pc, src)
}

func (c *Processor) op05B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	dst := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	v := uint32(dst) - uint32(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X subi.l #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op05B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	dst := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	v := uint32(dst) - uint32(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X subi.l #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0600() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[0]
	v := byte(dst) + byte(src)
	c.D[0] = uint32(v)
	c.tracef("%04X addi.b #$%X,D0\n", pc, src)
}

func (c *Processor) op0601() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[1]
	v := byte(dst) + byte(src)
	c.D[1] = uint32(v)
	c.tracef("%04X addi.b #$%X,D1\n", pc, src)
}

func (c *Processor) op0602() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[2]
	v := byte(dst) + byte(src)
	c.D[2] = uint32(v)
	c.tracef("%04X addi.b #$%X,D2\n", pc, src)
}

func (c *Processor) op0603() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[3]
	v := byte(dst) + byte(src)
	c.D[3] = uint32(v)
	c.tracef("%04X addi.b #$%X,D3\n", pc, src)
}

func (c *Processor) op0604() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[4]
	v := byte(dst) + byte(src)
	c.D[4] = uint32(v)
	c.tracef("%04X addi.b #$%X,D4\n", pc, src)
}

func (c *Processor) op0605() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[5]
	v := byte(dst) + byte(src)
	c.D[5] = uint32(v)
	c.tracef("%04X addi.b #$%X,D5\n", pc, src)
}

func (c *Processor) op0606() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[6]
	v := byte(dst) + byte(src)
	c.D[6] = uint32(v)
	c.tracef("%04X addi.b #$%X,D6\n", pc, src)
}

func (c *Processor) op0607() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[7]
	v := byte(dst) + byte(src)
	c.D[7] = uint32(v)
	c.tracef("%04X addi.b #$%X,D7\n", pc, src)
}

func (c *Processor) op0608() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[0]
	v := byte(dst) + byte(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b #$%X,A0\n", pc, src)
}

func (c *Processor) op0609() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[1]
	v := byte(dst) + byte(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b #$%X,A1\n", pc, src)
}

func (c *Processor) op060A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[2]
	v := byte(dst) + byte(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b #$%X,A2\n", pc, src)
}

func (c *Processor) op060B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[3]
	v := byte(dst) + byte(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b #$%X,A3\n", pc, src)
}

func (c *Processor) op060C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[4]
	v := byte(dst) + byte(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b #$%X,A4\n", pc, src)
}

func (c *Processor) op060D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[5]
	v := byte(dst) + byte(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b #$%X,A5\n", pc, src)
}

func (c *Processor) op060E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[6]
	v := byte(dst) + byte(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b #$%X,A6\n", pc, src)
}

func (c *Processor) op060F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[7]
	v := byte(dst) + byte(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b #$%X,A7\n", pc, src)
}

func (c *Processor) op0610() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) + byte(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X addi.b #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0611() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) + byte(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X addi.b #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0612() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) + byte(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X addi.b #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0613() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) + byte(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X addi.b #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0614() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) + byte(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X addi.b #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0615() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) + byte(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X addi.b #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0616() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) + byte(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X addi.b #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0617() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) + byte(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X addi.b #$%X,(A7)\n", pc, src)
}

func (c *Processor) op0638() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := c.buf[1]
	v := byte(dst) + byte(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X addi.b #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0639() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := c.buf[1]
	v := byte(dst) + byte(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X addi.b #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op063C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	c.SR |= (uint32(src) & 0x1F)
	c.tracef("%04X ?.b #$%X,CCR\n", pc, src)
}

func (c *Processor) op0640() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[0]
	v := uint16(dst) + uint16(src)
	c.D[0] = uint32(v)
	c.tracef("%04X addi.w #$%X,D0\n", pc, src)
}

func (c *Processor) op0641() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[1]
	v := uint16(dst) + uint16(src)
	c.D[1] = uint32(v)
	c.tracef("%04X addi.w #$%X,D1\n", pc, src)
}

func (c *Processor) op0642() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[2]
	v := uint16(dst) + uint16(src)
	c.D[2] = uint32(v)
	c.tracef("%04X addi.w #$%X,D2\n", pc, src)
}

func (c *Processor) op0643() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[3]
	v := uint16(dst) + uint16(src)
	c.D[3] = uint32(v)
	c.tracef("%04X addi.w #$%X,D3\n", pc, src)
}

func (c *Processor) op0644() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[4]
	v := uint16(dst) + uint16(src)
	c.D[4] = uint32(v)
	c.tracef("%04X addi.w #$%X,D4\n", pc, src)
}

func (c *Processor) op0645() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[5]
	v := uint16(dst) + uint16(src)
	c.D[5] = uint32(v)
	c.tracef("%04X addi.w #$%X,D5\n", pc, src)
}

func (c *Processor) op0646() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[6]
	v := uint16(dst) + uint16(src)
	c.D[6] = uint32(v)
	c.tracef("%04X addi.w #$%X,D6\n", pc, src)
}

func (c *Processor) op0647() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[7]
	v := uint16(dst) + uint16(src)
	c.D[7] = uint32(v)
	c.tracef("%04X addi.w #$%X,D7\n", pc, src)
}

func (c *Processor) op0648() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[0]
	v := uint16(dst) + uint16(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w #$%X,A0\n", pc, src)
}

func (c *Processor) op0649() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[1]
	v := uint16(dst) + uint16(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w #$%X,A1\n", pc, src)
}

func (c *Processor) op064A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[2]
	v := uint16(dst) + uint16(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w #$%X,A2\n", pc, src)
}

func (c *Processor) op064B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[3]
	v := uint16(dst) + uint16(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w #$%X,A3\n", pc, src)
}

func (c *Processor) op064C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[4]
	v := uint16(dst) + uint16(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w #$%X,A4\n", pc, src)
}

func (c *Processor) op064D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[5]
	v := uint16(dst) + uint16(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w #$%X,A5\n", pc, src)
}

func (c *Processor) op064E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[6]
	v := uint16(dst) + uint16(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w #$%X,A6\n", pc, src)
}

func (c *Processor) op064F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[7]
	v := uint16(dst) + uint16(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w #$%X,A7\n", pc, src)
}

func (c *Processor) op0650() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X addi.w #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0651() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X addi.w #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0652() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X addi.w #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0653() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X addi.w #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0654() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X addi.w #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0655() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X addi.w #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0656() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X addi.w #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0657() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X addi.w #$%X,(A7)\n", pc, src)
}

func (c *Processor) op0678() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X addi.w #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0679() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X addi.w #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op067C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.SR |= uint32(src) & 0x1F
	c.tracef("%04X ?.w #$%X,SR\n", pc, src)
}

func (c *Processor) op0680() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[0]
	v := uint32(dst) + uint32(src)
	c.D[0] = uint32(v)
	c.tracef("%04X addi.l #$%X,D0\n", pc, src)
}

func (c *Processor) op0681() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[1]
	v := uint32(dst) + uint32(src)
	c.D[1] = uint32(v)
	c.tracef("%04X addi.l #$%X,D1\n", pc, src)
}

func (c *Processor) op0682() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[2]
	v := uint32(dst) + uint32(src)
	c.D[2] = uint32(v)
	c.tracef("%04X addi.l #$%X,D2\n", pc, src)
}

func (c *Processor) op0683() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[3]
	v := uint32(dst) + uint32(src)
	c.D[3] = uint32(v)
	c.tracef("%04X addi.l #$%X,D3\n", pc, src)
}

func (c *Processor) op0684() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[4]
	v := uint32(dst) + uint32(src)
	c.D[4] = uint32(v)
	c.tracef("%04X addi.l #$%X,D4\n", pc, src)
}

func (c *Processor) op0685() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[5]
	v := uint32(dst) + uint32(src)
	c.D[5] = uint32(v)
	c.tracef("%04X addi.l #$%X,D5\n", pc, src)
}

func (c *Processor) op0686() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[6]
	v := uint32(dst) + uint32(src)
	c.D[6] = uint32(v)
	c.tracef("%04X addi.l #$%X,D6\n", pc, src)
}

func (c *Processor) op0687() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[7]
	v := uint32(dst) + uint32(src)
	c.D[7] = uint32(v)
	c.tracef("%04X addi.l #$%X,D7\n", pc, src)
}

func (c *Processor) op0688() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[0]
	v := uint32(dst) + uint32(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l #$%X,A0\n", pc, src)
}

func (c *Processor) op0689() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[1]
	v := uint32(dst) + uint32(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l #$%X,A1\n", pc, src)
}

func (c *Processor) op068A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[2]
	v := uint32(dst) + uint32(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l #$%X,A2\n", pc, src)
}

func (c *Processor) op068B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[3]
	v := uint32(dst) + uint32(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l #$%X,A3\n", pc, src)
}

func (c *Processor) op068C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[4]
	v := uint32(dst) + uint32(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l #$%X,A4\n", pc, src)
}

func (c *Processor) op068D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[5]
	v := uint32(dst) + uint32(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l #$%X,A5\n", pc, src)
}

func (c *Processor) op068E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[6]
	v := uint32(dst) + uint32(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l #$%X,A6\n", pc, src)
}

func (c *Processor) op068F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[7]
	v := uint32(dst) + uint32(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l #$%X,A7\n", pc, src)
}

func (c *Processor) op0690() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) + uint32(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X addi.l #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0691() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) + uint32(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X addi.l #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0692() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) + uint32(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X addi.l #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0693() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) + uint32(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X addi.l #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0694() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) + uint32(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X addi.l #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0695() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) + uint32(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X addi.l #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0696() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) + uint32(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X addi.l #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0697() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) + uint32(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X addi.l #$%X,(A7)\n", pc, src)
}

func (c *Processor) op06B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	dst := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	v := uint32(dst) + uint32(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X addi.l #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op06B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	dst := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	v := uint32(dst) + uint32(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X addi.l #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0700() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[0]
	v := byte(dst) + byte(src)
	c.D[0] = uint32(v)
	c.tracef("%04X addi.b #$%X,D0\n", pc, src)
}

func (c *Processor) op0701() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[1]
	v := byte(dst) + byte(src)
	c.D[1] = uint32(v)
	c.tracef("%04X addi.b #$%X,D1\n", pc, src)
}

func (c *Processor) op0702() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[2]
	v := byte(dst) + byte(src)
	c.D[2] = uint32(v)
	c.tracef("%04X addi.b #$%X,D2\n", pc, src)
}

func (c *Processor) op0703() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[3]
	v := byte(dst) + byte(src)
	c.D[3] = uint32(v)
	c.tracef("%04X addi.b #$%X,D3\n", pc, src)
}

func (c *Processor) op0704() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[4]
	v := byte(dst) + byte(src)
	c.D[4] = uint32(v)
	c.tracef("%04X addi.b #$%X,D4\n", pc, src)
}

func (c *Processor) op0705() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[5]
	v := byte(dst) + byte(src)
	c.D[5] = uint32(v)
	c.tracef("%04X addi.b #$%X,D5\n", pc, src)
}

func (c *Processor) op0706() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[6]
	v := byte(dst) + byte(src)
	c.D[6] = uint32(v)
	c.tracef("%04X addi.b #$%X,D6\n", pc, src)
}

func (c *Processor) op0707() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.D[7]
	v := byte(dst) + byte(src)
	c.D[7] = uint32(v)
	c.tracef("%04X addi.b #$%X,D7\n", pc, src)
}

func (c *Processor) op0708() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[0]
	v := byte(dst) + byte(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b #$%X,A0\n", pc, src)
}

func (c *Processor) op0709() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[1]
	v := byte(dst) + byte(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b #$%X,A1\n", pc, src)
}

func (c *Processor) op070A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[2]
	v := byte(dst) + byte(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b #$%X,A2\n", pc, src)
}

func (c *Processor) op070B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[3]
	v := byte(dst) + byte(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b #$%X,A3\n", pc, src)
}

func (c *Processor) op070C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[4]
	v := byte(dst) + byte(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b #$%X,A4\n", pc, src)
}

func (c *Processor) op070D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[5]
	v := byte(dst) + byte(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b #$%X,A5\n", pc, src)
}

func (c *Processor) op070E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[6]
	v := byte(dst) + byte(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b #$%X,A6\n", pc, src)
}

func (c *Processor) op070F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	dst := c.A[7]
	v := byte(dst) + byte(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b #$%X,A7\n", pc, src)
}

func (c *Processor) op0710() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) + byte(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X addi.b #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0711() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) + byte(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X addi.b #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0712() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) + byte(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X addi.b #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0713() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) + byte(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X addi.b #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0714() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) + byte(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X addi.b #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0715() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) + byte(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X addi.b #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0716() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) + byte(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X addi.b #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0717() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	dst := c.buf[0]
	v := byte(dst) + byte(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X addi.b #$%X,(A7)\n", pc, src)
}

func (c *Processor) op0738() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := c.buf[1]
	v := byte(dst) + byte(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X addi.b #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0739() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := c.buf[1]
	v := byte(dst) + byte(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X addi.b #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op073C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	c.SR |= (uint32(src) & 0x1F)
	c.tracef("%04X ?.b #$%X,CCR\n", pc, src)
}

func (c *Processor) op0740() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[0]
	v := uint16(dst) + uint16(src)
	c.D[0] = uint32(v)
	c.tracef("%04X addi.w #$%X,D0\n", pc, src)
}

func (c *Processor) op0741() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[1]
	v := uint16(dst) + uint16(src)
	c.D[1] = uint32(v)
	c.tracef("%04X addi.w #$%X,D1\n", pc, src)
}

func (c *Processor) op0742() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[2]
	v := uint16(dst) + uint16(src)
	c.D[2] = uint32(v)
	c.tracef("%04X addi.w #$%X,D2\n", pc, src)
}

func (c *Processor) op0743() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[3]
	v := uint16(dst) + uint16(src)
	c.D[3] = uint32(v)
	c.tracef("%04X addi.w #$%X,D3\n", pc, src)
}

func (c *Processor) op0744() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[4]
	v := uint16(dst) + uint16(src)
	c.D[4] = uint32(v)
	c.tracef("%04X addi.w #$%X,D4\n", pc, src)
}

func (c *Processor) op0745() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[5]
	v := uint16(dst) + uint16(src)
	c.D[5] = uint32(v)
	c.tracef("%04X addi.w #$%X,D5\n", pc, src)
}

func (c *Processor) op0746() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[6]
	v := uint16(dst) + uint16(src)
	c.D[6] = uint32(v)
	c.tracef("%04X addi.w #$%X,D6\n", pc, src)
}

func (c *Processor) op0747() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.D[7]
	v := uint16(dst) + uint16(src)
	c.D[7] = uint32(v)
	c.tracef("%04X addi.w #$%X,D7\n", pc, src)
}

func (c *Processor) op0748() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[0]
	v := uint16(dst) + uint16(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w #$%X,A0\n", pc, src)
}

func (c *Processor) op0749() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[1]
	v := uint16(dst) + uint16(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w #$%X,A1\n", pc, src)
}

func (c *Processor) op074A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[2]
	v := uint16(dst) + uint16(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w #$%X,A2\n", pc, src)
}

func (c *Processor) op074B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[3]
	v := uint16(dst) + uint16(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w #$%X,A3\n", pc, src)
}

func (c *Processor) op074C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[4]
	v := uint16(dst) + uint16(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w #$%X,A4\n", pc, src)
}

func (c *Processor) op074D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[5]
	v := uint16(dst) + uint16(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w #$%X,A5\n", pc, src)
}

func (c *Processor) op074E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[6]
	v := uint16(dst) + uint16(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w #$%X,A6\n", pc, src)
}

func (c *Processor) op074F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	dst := c.A[7]
	v := uint16(dst) + uint16(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w #$%X,A7\n", pc, src)
}

func (c *Processor) op0750() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X addi.w #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0751() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X addi.w #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0752() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X addi.w #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0753() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X addi.w #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0754() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X addi.w #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0755() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X addi.w #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0756() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X addi.w #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0757() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X addi.w #$%X,(A7)\n", pc, src)
}

func (c *Processor) op0778() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X addi.w #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op0779() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	dst := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	v := uint16(dst) + uint16(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X addi.w #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op077C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.SR |= uint32(src) & 0x1F
	c.tracef("%04X ?.w #$%X,SR\n", pc, src)
}

func (c *Processor) op0780() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[0]
	v := uint32(dst) + uint32(src)
	c.D[0] = uint32(v)
	c.tracef("%04X addi.l #$%X,D0\n", pc, src)
}

func (c *Processor) op0781() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[1]
	v := uint32(dst) + uint32(src)
	c.D[1] = uint32(v)
	c.tracef("%04X addi.l #$%X,D1\n", pc, src)
}

func (c *Processor) op0782() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[2]
	v := uint32(dst) + uint32(src)
	c.D[2] = uint32(v)
	c.tracef("%04X addi.l #$%X,D2\n", pc, src)
}

func (c *Processor) op0783() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[3]
	v := uint32(dst) + uint32(src)
	c.D[3] = uint32(v)
	c.tracef("%04X addi.l #$%X,D3\n", pc, src)
}

func (c *Processor) op0784() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[4]
	v := uint32(dst) + uint32(src)
	c.D[4] = uint32(v)
	c.tracef("%04X addi.l #$%X,D4\n", pc, src)
}

func (c *Processor) op0785() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[5]
	v := uint32(dst) + uint32(src)
	c.D[5] = uint32(v)
	c.tracef("%04X addi.l #$%X,D5\n", pc, src)
}

func (c *Processor) op0786() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[6]
	v := uint32(dst) + uint32(src)
	c.D[6] = uint32(v)
	c.tracef("%04X addi.l #$%X,D6\n", pc, src)
}

func (c *Processor) op0787() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.D[7]
	v := uint32(dst) + uint32(src)
	c.D[7] = uint32(v)
	c.tracef("%04X addi.l #$%X,D7\n", pc, src)
}

func (c *Processor) op0788() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[0]
	v := uint32(dst) + uint32(src)
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l #$%X,A0\n", pc, src)
}

func (c *Processor) op0789() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[1]
	v := uint32(dst) + uint32(src)
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l #$%X,A1\n", pc, src)
}

func (c *Processor) op078A() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[2]
	v := uint32(dst) + uint32(src)
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l #$%X,A2\n", pc, src)
}

func (c *Processor) op078B() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[3]
	v := uint32(dst) + uint32(src)
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l #$%X,A3\n", pc, src)
}

func (c *Processor) op078C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[4]
	v := uint32(dst) + uint32(src)
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l #$%X,A4\n", pc, src)
}

func (c *Processor) op078D() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[5]
	v := uint32(dst) + uint32(src)
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l #$%X,A5\n", pc, src)
}

func (c *Processor) op078E() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[6]
	v := uint32(dst) + uint32(src)
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l #$%X,A6\n", pc, src)
}

func (c *Processor) op078F() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	dst := c.A[7]
	v := uint32(dst) + uint32(src)
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l #$%X,A7\n", pc, src)
}

func (c *Processor) op0790() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) + uint32(src)
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X addi.l #$%X,(A0)\n", pc, src)
}

func (c *Processor) op0791() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) + uint32(src)
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X addi.l #$%X,(A1)\n", pc, src)
}

func (c *Processor) op0792() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) + uint32(src)
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X addi.l #$%X,(A2)\n", pc, src)
}

func (c *Processor) op0793() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) + uint32(src)
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X addi.l #$%X,(A3)\n", pc, src)
}

func (c *Processor) op0794() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) + uint32(src)
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X addi.l #$%X,(A4)\n", pc, src)
}

func (c *Processor) op0795() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) + uint32(src)
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X addi.l #$%X,(A5)\n", pc, src)
}

func (c *Processor) op0796() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) + uint32(src)
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X addi.l #$%X,(A6)\n", pc, src)
}

func (c *Processor) op0797() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	dst := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	v := uint32(dst) + uint32(src)
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X addi.l #$%X,(A7)\n", pc, src)
}

func (c *Processor) op07B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	dst := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	v := uint32(dst) + uint32(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X addi.l #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op07B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	src := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	dst := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	v := uint32(dst) + uint32(src)
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X addi.l #$%X,$%X\n", pc, src, dst, addr)
}

func (c *Processor) op083C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	c.SR |= (uint32(src) & 0x1F)
	c.tracef("%04X ?.b #$%X,CCR\n", pc, src)
}

func (c *Processor) op087C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.SR |= uint32(src) & 0x1F
	c.tracef("%04X ?.w #$%X,SR\n", pc, src)
}

func (c *Processor) op093C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	c.SR |= (uint32(src) & 0x1F)
	c.tracef("%04X ?.b #$%X,CCR\n", pc, src)
}

func (c *Processor) op097C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.SR |= uint32(src) & 0x1F
	c.tracef("%04X ?.w #$%X,SR\n", pc, src)
}

func (c *Processor) op0A3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	c.SR |= (uint32(src) & 0x1F)
	c.tracef("%04X ?.b #$%X,CCR\n", pc, src)
}

func (c *Processor) op0A7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.SR |= uint32(src) & 0x1F
	c.tracef("%04X ?.w #$%X,SR\n", pc, src)
}

func (c *Processor) op0B3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	c.SR |= (uint32(src) & 0x1F)
	c.tracef("%04X ?.b #$%X,CCR\n", pc, src)
}

func (c *Processor) op0B7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.SR |= uint32(src) & 0x1F
	c.tracef("%04X ?.w #$%X,SR\n", pc, src)
}

func (c *Processor) op0C3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	c.SR |= (uint32(src) & 0x1F)
	c.tracef("%04X ?.b #$%X,CCR\n", pc, src)
}

func (c *Processor) op0C7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.SR |= uint32(src) & 0x1F
	c.tracef("%04X ?.w #$%X,SR\n", pc, src)
}

func (c *Processor) op0D3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	c.SR |= (uint32(src) & 0x1F)
	c.tracef("%04X ?.b #$%X,CCR\n", pc, src)
}

func (c *Processor) op0D7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.SR |= uint32(src) & 0x1F
	c.tracef("%04X ?.w #$%X,SR\n", pc, src)
}

func (c *Processor) op0E3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	c.SR |= (uint32(src) & 0x1F)
	c.tracef("%04X ?.b #$%X,CCR\n", pc, src)
}

func (c *Processor) op0E7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.SR |= uint32(src) & 0x1F
	c.tracef("%04X ?.w #$%X,SR\n", pc, src)
}

func (c *Processor) op0F3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := c.buf[1]
	c.SR |= (uint32(src) & 0x1F)
	c.tracef("%04X ?.b #$%X,CCR\n", pc, src)
}

func (c *Processor) op0F7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	src := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.SR |= uint32(src) & 0x1F
	c.tracef("%04X ?.w #$%X,SR\n", pc, src)
}

func (c *Processor) op1000() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b D0,D0\n", pc)
}

func (c *Processor) op1001() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b D1,D0\n", pc)
}

func (c *Processor) op1002() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b D2,D0\n", pc)
}

func (c *Processor) op1003() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b D3,D0\n", pc)
}

func (c *Processor) op1004() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b D4,D0\n", pc)
}

func (c *Processor) op1005() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b D5,D0\n", pc)
}

func (c *Processor) op1006() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b D6,D0\n", pc)
}

func (c *Processor) op1007() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b D7,D0\n", pc)
}

func (c *Processor) op1008() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b A0,D0\n", pc)
}

func (c *Processor) op1009() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b A1,D0\n", pc)
}

func (c *Processor) op100A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b A2,D0\n", pc)
}

func (c *Processor) op100B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b A3,D0\n", pc)
}

func (c *Processor) op100C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b A4,D0\n", pc)
}

func (c *Processor) op100D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b A5,D0\n", pc)
}

func (c *Processor) op100E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b A6,D0\n", pc)
}

func (c *Processor) op100F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b A7,D0\n", pc)
}

func (c *Processor) op1010() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b (A0),D0\n", pc)
}

func (c *Processor) op1011() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b (A1),D0\n", pc)
}

func (c *Processor) op1012() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b (A2),D0\n", pc)
}

func (c *Processor) op1013() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b (A3),D0\n", pc)
}

func (c *Processor) op1014() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b (A4),D0\n", pc)
}

func (c *Processor) op1015() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b (A5),D0\n", pc)
}

func (c *Processor) op1016() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b (A6),D0\n", pc)
}

func (c *Processor) op1017() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b (A7),D0\n", pc)
}

func (c *Processor) op1038() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b $%X,D0\n", pc, v)
}

func (c *Processor) op1039() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b $%X,D0\n", pc, v)
}

func (c *Processor) op103C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[0] = uint32(v)
	c.tracef("%04X move.b #$%X,D0\n", pc, v)
}

func (c *Processor) op1040() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b D0,A0\n", pc)
}

func (c *Processor) op1041() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b D1,A0\n", pc)
}

func (c *Processor) op1042() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b D2,A0\n", pc)
}

func (c *Processor) op1043() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b D3,A0\n", pc)
}

func (c *Processor) op1044() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b D4,A0\n", pc)
}

func (c *Processor) op1045() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b D5,A0\n", pc)
}

func (c *Processor) op1046() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b D6,A0\n", pc)
}

func (c *Processor) op1047() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b D7,A0\n", pc)
}

func (c *Processor) op1048() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b A0,A0\n", pc)
}

func (c *Processor) op1049() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b A1,A0\n", pc)
}

func (c *Processor) op104A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b A2,A0\n", pc)
}

func (c *Processor) op104B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b A3,A0\n", pc)
}

func (c *Processor) op104C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b A4,A0\n", pc)
}

func (c *Processor) op104D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b A5,A0\n", pc)
}

func (c *Processor) op104E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b A6,A0\n", pc)
}

func (c *Processor) op104F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b A7,A0\n", pc)
}

func (c *Processor) op1050() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b (A0),A0\n", pc)
}

func (c *Processor) op1051() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b (A1),A0\n", pc)
}

func (c *Processor) op1052() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b (A2),A0\n", pc)
}

func (c *Processor) op1053() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b (A3),A0\n", pc)
}

func (c *Processor) op1054() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b (A4),A0\n", pc)
}

func (c *Processor) op1055() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b (A5),A0\n", pc)
}

func (c *Processor) op1056() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b (A6),A0\n", pc)
}

func (c *Processor) op1057() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b (A7),A0\n", pc)
}

func (c *Processor) op1078() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b $%X,A0\n", pc, v)
}

func (c *Processor) op1079() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b $%X,A0\n", pc, v)
}

func (c *Processor) op107C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.b #$%X,A0\n", pc, v)
}

func (c *Processor) op1080() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b D0,(A0)\n", pc)
}

func (c *Processor) op1081() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b D1,(A0)\n", pc)
}

func (c *Processor) op1082() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b D2,(A0)\n", pc)
}

func (c *Processor) op1083() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b D3,(A0)\n", pc)
}

func (c *Processor) op1084() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b D4,(A0)\n", pc)
}

func (c *Processor) op1085() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b D5,(A0)\n", pc)
}

func (c *Processor) op1086() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b D6,(A0)\n", pc)
}

func (c *Processor) op1087() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b D7,(A0)\n", pc)
}

func (c *Processor) op1088() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b A0,(A0)\n", pc)
}

func (c *Processor) op1089() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b A1,(A0)\n", pc)
}

func (c *Processor) op108A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b A2,(A0)\n", pc)
}

func (c *Processor) op108B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b A3,(A0)\n", pc)
}

func (c *Processor) op108C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b A4,(A0)\n", pc)
}

func (c *Processor) op108D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b A5,(A0)\n", pc)
}

func (c *Processor) op108E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b A6,(A0)\n", pc)
}

func (c *Processor) op108F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b A7,(A0)\n", pc)
}

func (c *Processor) op1090() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b (A0),(A0)\n", pc)
}

func (c *Processor) op1091() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b (A1),(A0)\n", pc)
}

func (c *Processor) op1092() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b (A2),(A0)\n", pc)
}

func (c *Processor) op1093() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b (A3),(A0)\n", pc)
}

func (c *Processor) op1094() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b (A4),(A0)\n", pc)
}

func (c *Processor) op1095() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b (A5),(A0)\n", pc)
}

func (c *Processor) op1096() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b (A6),(A0)\n", pc)
}

func (c *Processor) op1097() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b (A7),(A0)\n", pc)
}

func (c *Processor) op10B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b $%X,(A0)\n", pc, v)
}

func (c *Processor) op10B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b $%X,(A0)\n", pc, v)
}

func (c *Processor) op10BC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b #$%X,(A0)\n", pc, v)
}

func (c *Processor) op10C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b D0,(A0)+\n", pc)
}

func (c *Processor) op10C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b D1,(A0)+\n", pc)
}

func (c *Processor) op10C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b D2,(A0)+\n", pc)
}

func (c *Processor) op10C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b D3,(A0)+\n", pc)
}

func (c *Processor) op10C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b D4,(A0)+\n", pc)
}

func (c *Processor) op10C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b D5,(A0)+\n", pc)
}

func (c *Processor) op10C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b D6,(A0)+\n", pc)
}

func (c *Processor) op10C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b D7,(A0)+\n", pc)
}

func (c *Processor) op10C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b A0,(A0)+\n", pc)
}

func (c *Processor) op10C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b A1,(A0)+\n", pc)
}

func (c *Processor) op10CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b A2,(A0)+\n", pc)
}

func (c *Processor) op10CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b A3,(A0)+\n", pc)
}

func (c *Processor) op10CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b A4,(A0)+\n", pc)
}

func (c *Processor) op10CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b A5,(A0)+\n", pc)
}

func (c *Processor) op10CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b A6,(A0)+\n", pc)
}

func (c *Processor) op10CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b A7,(A0)+\n", pc)
}

func (c *Processor) op10D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b (A0),(A0)+\n", pc)
}

func (c *Processor) op10D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b (A1),(A0)+\n", pc)
}

func (c *Processor) op10D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b (A2),(A0)+\n", pc)
}

func (c *Processor) op10D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b (A3),(A0)+\n", pc)
}

func (c *Processor) op10D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b (A4),(A0)+\n", pc)
}

func (c *Processor) op10D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b (A5),(A0)+\n", pc)
}

func (c *Processor) op10D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b (A6),(A0)+\n", pc)
}

func (c *Processor) op10D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b (A7),(A0)+\n", pc)
}

func (c *Processor) op10F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b $%X,(A0)+\n", pc, v)
}

func (c *Processor) op10F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b $%X,(A0)+\n", pc, v)
}

func (c *Processor) op10FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.b #$%X,(A0)+\n", pc, v)
}

func (c *Processor) op1100() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b D0,-(A0)\n", pc)
}

func (c *Processor) op1101() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b D1,-(A0)\n", pc)
}

func (c *Processor) op1102() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b D2,-(A0)\n", pc)
}

func (c *Processor) op1103() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b D3,-(A0)\n", pc)
}

func (c *Processor) op1104() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b D4,-(A0)\n", pc)
}

func (c *Processor) op1105() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b D5,-(A0)\n", pc)
}

func (c *Processor) op1106() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b D6,-(A0)\n", pc)
}

func (c *Processor) op1107() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b D7,-(A0)\n", pc)
}

func (c *Processor) op1108() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.b A0,-(A0)\n", pc)
}

func (c *Processor) op1109() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.b A1,-(A0)\n", pc)
}

func (c *Processor) op110A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.b A2,-(A0)\n", pc)
}

func (c *Processor) op110B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.b A3,-(A0)\n", pc)
}

func (c *Processor) op110C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.b A4,-(A0)\n", pc)
}

func (c *Processor) op110D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.b A5,-(A0)\n", pc)
}

func (c *Processor) op110E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.b A6,-(A0)\n", pc)
}

func (c *Processor) op110F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.b A7,-(A0)\n", pc)
}

func (c *Processor) op1110() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b (A0),-(A0)\n", pc)
}

func (c *Processor) op1111() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b (A1),-(A0)\n", pc)
}

func (c *Processor) op1112() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b (A2),-(A0)\n", pc)
}

func (c *Processor) op1113() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b (A3),-(A0)\n", pc)
}

func (c *Processor) op1114() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b (A4),-(A0)\n", pc)
}

func (c *Processor) op1115() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b (A5),-(A0)\n", pc)
}

func (c *Processor) op1116() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b (A6),-(A0)\n", pc)
}

func (c *Processor) op1117() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b (A7),-(A0)\n", pc)
}

func (c *Processor) op1138() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b $%X,-(A0)\n", pc, v)
}

func (c *Processor) op1139() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b $%X,-(A0)\n", pc, v)
}

func (c *Processor) op113C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.b #$%X,-(A0)\n", pc, v)
}

func (c *Processor) op1140() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D0,(%d,A0)\n", pc, disp)
}

func (c *Processor) op1141() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D1,(%d,A0)\n", pc, disp)
}

func (c *Processor) op1142() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D2,(%d,A0)\n", pc, disp)
}

func (c *Processor) op1143() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D3,(%d,A0)\n", pc, disp)
}

func (c *Processor) op1144() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D4,(%d,A0)\n", pc, disp)
}

func (c *Processor) op1145() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D5,(%d,A0)\n", pc, disp)
}

func (c *Processor) op1146() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D6,(%d,A0)\n", pc, disp)
}

func (c *Processor) op1147() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D7,(%d,A0)\n", pc, disp)
}

func (c *Processor) op1148() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A0,(%d,A0)\n", pc, disp)
}

func (c *Processor) op1149() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A1,(%d,A0)\n", pc, disp)
}

func (c *Processor) op114A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A2,(%d,A0)\n", pc, disp)
}

func (c *Processor) op114B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A3,(%d,A0)\n", pc, disp)
}

func (c *Processor) op114C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A4,(%d,A0)\n", pc, disp)
}

func (c *Processor) op114D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A5,(%d,A0)\n", pc, disp)
}

func (c *Processor) op114E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A6,(%d,A0)\n", pc, disp)
}

func (c *Processor) op114F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A7,(%d,A0)\n", pc, disp)
}

func (c *Processor) op1150() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A0),(%d,A0)\n", pc, disp)
}

func (c *Processor) op1151() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A1),(%d,A0)\n", pc, disp)
}

func (c *Processor) op1152() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A2),(%d,A0)\n", pc, disp)
}

func (c *Processor) op1153() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A3),(%d,A0)\n", pc, disp)
}

func (c *Processor) op1154() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A4),(%d,A0)\n", pc, disp)
}

func (c *Processor) op1155() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A5),(%d,A0)\n", pc, disp)
}

func (c *Processor) op1156() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A6),(%d,A0)\n", pc, disp)
}

func (c *Processor) op1157() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A7),(%d,A0)\n", pc, disp)
}

func (c *Processor) op1178() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,(%d,A0)\n", pc, v, disp)
}

func (c *Processor) op1179() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,(%d,A0)\n", pc, v, disp)
}

func (c *Processor) op117C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b #$%X,(%d,A0)\n", pc, v, disp)
}

func (c *Processor) op11C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b D0,$%X\n", pc, addr)
}

func (c *Processor) op11C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b D1,$%X\n", pc, addr)
}

func (c *Processor) op11C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b D2,$%X\n", pc, addr)
}

func (c *Processor) op11C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b D3,$%X\n", pc, addr)
}

func (c *Processor) op11C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b D4,$%X\n", pc, addr)
}

func (c *Processor) op11C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b D5,$%X\n", pc, addr)
}

func (c *Processor) op11C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b D6,$%X\n", pc, addr)
}

func (c *Processor) op11C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b D7,$%X\n", pc, addr)
}

func (c *Processor) op11C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.b A0,$%X\n", pc, addr)
}

func (c *Processor) op11C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.b A1,$%X\n", pc, addr)
}

func (c *Processor) op11CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.b A2,$%X\n", pc, addr)
}

func (c *Processor) op11CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.b A3,$%X\n", pc, addr)
}

func (c *Processor) op11CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.b A4,$%X\n", pc, addr)
}

func (c *Processor) op11CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.b A5,$%X\n", pc, addr)
}

func (c *Processor) op11CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.b A6,$%X\n", pc, addr)
}

func (c *Processor) op11CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.b A7,$%X\n", pc, addr)
}

func (c *Processor) op11D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b (A0),$%X\n", pc, addr)
}

func (c *Processor) op11D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b (A1),$%X\n", pc, addr)
}

func (c *Processor) op11D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b (A2),$%X\n", pc, addr)
}

func (c *Processor) op11D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b (A3),$%X\n", pc, addr)
}

func (c *Processor) op11D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b (A4),$%X\n", pc, addr)
}

func (c *Processor) op11D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b (A5),$%X\n", pc, addr)
}

func (c *Processor) op11D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b (A6),$%X\n", pc, addr)
}

func (c *Processor) op11D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b (A7),$%X\n", pc, addr)
}

func (c *Processor) op11F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b $%X,$%X\n", pc, v, addr)
}

func (c *Processor) op11F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b $%X,$%X\n", pc, v, addr)
}

func (c *Processor) op11FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.b #$%X,$%X\n", pc, v, addr)
}

func (c *Processor) op1200() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b D0,D1\n", pc)
}

func (c *Processor) op1201() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b D1,D1\n", pc)
}

func (c *Processor) op1202() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b D2,D1\n", pc)
}

func (c *Processor) op1203() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b D3,D1\n", pc)
}

func (c *Processor) op1204() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b D4,D1\n", pc)
}

func (c *Processor) op1205() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b D5,D1\n", pc)
}

func (c *Processor) op1206() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b D6,D1\n", pc)
}

func (c *Processor) op1207() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b D7,D1\n", pc)
}

func (c *Processor) op1208() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b A0,D1\n", pc)
}

func (c *Processor) op1209() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b A1,D1\n", pc)
}

func (c *Processor) op120A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b A2,D1\n", pc)
}

func (c *Processor) op120B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b A3,D1\n", pc)
}

func (c *Processor) op120C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b A4,D1\n", pc)
}

func (c *Processor) op120D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b A5,D1\n", pc)
}

func (c *Processor) op120E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b A6,D1\n", pc)
}

func (c *Processor) op120F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b A7,D1\n", pc)
}

func (c *Processor) op1210() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b (A0),D1\n", pc)
}

func (c *Processor) op1211() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b (A1),D1\n", pc)
}

func (c *Processor) op1212() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b (A2),D1\n", pc)
}

func (c *Processor) op1213() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b (A3),D1\n", pc)
}

func (c *Processor) op1214() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b (A4),D1\n", pc)
}

func (c *Processor) op1215() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b (A5),D1\n", pc)
}

func (c *Processor) op1216() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b (A6),D1\n", pc)
}

func (c *Processor) op1217() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b (A7),D1\n", pc)
}

func (c *Processor) op1238() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b $%X,D1\n", pc, v)
}

func (c *Processor) op1239() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b $%X,D1\n", pc, v)
}

func (c *Processor) op123C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[1] = uint32(v)
	c.tracef("%04X move.b #$%X,D1\n", pc, v)
}

func (c *Processor) op1240() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b D0,A1\n", pc)
}

func (c *Processor) op1241() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b D1,A1\n", pc)
}

func (c *Processor) op1242() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b D2,A1\n", pc)
}

func (c *Processor) op1243() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b D3,A1\n", pc)
}

func (c *Processor) op1244() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b D4,A1\n", pc)
}

func (c *Processor) op1245() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b D5,A1\n", pc)
}

func (c *Processor) op1246() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b D6,A1\n", pc)
}

func (c *Processor) op1247() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b D7,A1\n", pc)
}

func (c *Processor) op1248() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b A0,A1\n", pc)
}

func (c *Processor) op1249() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b A1,A1\n", pc)
}

func (c *Processor) op124A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b A2,A1\n", pc)
}

func (c *Processor) op124B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b A3,A1\n", pc)
}

func (c *Processor) op124C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b A4,A1\n", pc)
}

func (c *Processor) op124D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b A5,A1\n", pc)
}

func (c *Processor) op124E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b A6,A1\n", pc)
}

func (c *Processor) op124F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b A7,A1\n", pc)
}

func (c *Processor) op1250() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b (A0),A1\n", pc)
}

func (c *Processor) op1251() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b (A1),A1\n", pc)
}

func (c *Processor) op1252() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b (A2),A1\n", pc)
}

func (c *Processor) op1253() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b (A3),A1\n", pc)
}

func (c *Processor) op1254() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b (A4),A1\n", pc)
}

func (c *Processor) op1255() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b (A5),A1\n", pc)
}

func (c *Processor) op1256() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b (A6),A1\n", pc)
}

func (c *Processor) op1257() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b (A7),A1\n", pc)
}

func (c *Processor) op1278() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b $%X,A1\n", pc, v)
}

func (c *Processor) op1279() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b $%X,A1\n", pc, v)
}

func (c *Processor) op127C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.b #$%X,A1\n", pc, v)
}

func (c *Processor) op1280() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b D0,(A1)\n", pc)
}

func (c *Processor) op1281() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b D1,(A1)\n", pc)
}

func (c *Processor) op1282() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b D2,(A1)\n", pc)
}

func (c *Processor) op1283() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b D3,(A1)\n", pc)
}

func (c *Processor) op1284() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b D4,(A1)\n", pc)
}

func (c *Processor) op1285() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b D5,(A1)\n", pc)
}

func (c *Processor) op1286() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b D6,(A1)\n", pc)
}

func (c *Processor) op1287() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b D7,(A1)\n", pc)
}

func (c *Processor) op1288() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b A0,(A1)\n", pc)
}

func (c *Processor) op1289() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b A1,(A1)\n", pc)
}

func (c *Processor) op128A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b A2,(A1)\n", pc)
}

func (c *Processor) op128B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b A3,(A1)\n", pc)
}

func (c *Processor) op128C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b A4,(A1)\n", pc)
}

func (c *Processor) op128D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b A5,(A1)\n", pc)
}

func (c *Processor) op128E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b A6,(A1)\n", pc)
}

func (c *Processor) op128F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b A7,(A1)\n", pc)
}

func (c *Processor) op1290() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b (A0),(A1)\n", pc)
}

func (c *Processor) op1291() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b (A1),(A1)\n", pc)
}

func (c *Processor) op1292() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b (A2),(A1)\n", pc)
}

func (c *Processor) op1293() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b (A3),(A1)\n", pc)
}

func (c *Processor) op1294() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b (A4),(A1)\n", pc)
}

func (c *Processor) op1295() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b (A5),(A1)\n", pc)
}

func (c *Processor) op1296() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b (A6),(A1)\n", pc)
}

func (c *Processor) op1297() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b (A7),(A1)\n", pc)
}

func (c *Processor) op12B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b $%X,(A1)\n", pc, v)
}

func (c *Processor) op12B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b $%X,(A1)\n", pc, v)
}

func (c *Processor) op12BC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b #$%X,(A1)\n", pc, v)
}

func (c *Processor) op12C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b D0,(A1)+\n", pc)
}

func (c *Processor) op12C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b D1,(A1)+\n", pc)
}

func (c *Processor) op12C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b D2,(A1)+\n", pc)
}

func (c *Processor) op12C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b D3,(A1)+\n", pc)
}

func (c *Processor) op12C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b D4,(A1)+\n", pc)
}

func (c *Processor) op12C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b D5,(A1)+\n", pc)
}

func (c *Processor) op12C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b D6,(A1)+\n", pc)
}

func (c *Processor) op12C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b D7,(A1)+\n", pc)
}

func (c *Processor) op12C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b A0,(A1)+\n", pc)
}

func (c *Processor) op12C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b A1,(A1)+\n", pc)
}

func (c *Processor) op12CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b A2,(A1)+\n", pc)
}

func (c *Processor) op12CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b A3,(A1)+\n", pc)
}

func (c *Processor) op12CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b A4,(A1)+\n", pc)
}

func (c *Processor) op12CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b A5,(A1)+\n", pc)
}

func (c *Processor) op12CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b A6,(A1)+\n", pc)
}

func (c *Processor) op12CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b A7,(A1)+\n", pc)
}

func (c *Processor) op12D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b (A0),(A1)+\n", pc)
}

func (c *Processor) op12D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b (A1),(A1)+\n", pc)
}

func (c *Processor) op12D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b (A2),(A1)+\n", pc)
}

func (c *Processor) op12D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b (A3),(A1)+\n", pc)
}

func (c *Processor) op12D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b (A4),(A1)+\n", pc)
}

func (c *Processor) op12D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b (A5),(A1)+\n", pc)
}

func (c *Processor) op12D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b (A6),(A1)+\n", pc)
}

func (c *Processor) op12D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b (A7),(A1)+\n", pc)
}

func (c *Processor) op12F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b $%X,(A1)+\n", pc, v)
}

func (c *Processor) op12F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b $%X,(A1)+\n", pc, v)
}

func (c *Processor) op12FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.b #$%X,(A1)+\n", pc, v)
}

func (c *Processor) op1300() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b D0,-(A1)\n", pc)
}

func (c *Processor) op1301() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b D1,-(A1)\n", pc)
}

func (c *Processor) op1302() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b D2,-(A1)\n", pc)
}

func (c *Processor) op1303() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b D3,-(A1)\n", pc)
}

func (c *Processor) op1304() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b D4,-(A1)\n", pc)
}

func (c *Processor) op1305() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b D5,-(A1)\n", pc)
}

func (c *Processor) op1306() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b D6,-(A1)\n", pc)
}

func (c *Processor) op1307() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b D7,-(A1)\n", pc)
}

func (c *Processor) op1308() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.b A0,-(A1)\n", pc)
}

func (c *Processor) op1309() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.b A1,-(A1)\n", pc)
}

func (c *Processor) op130A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.b A2,-(A1)\n", pc)
}

func (c *Processor) op130B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.b A3,-(A1)\n", pc)
}

func (c *Processor) op130C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.b A4,-(A1)\n", pc)
}

func (c *Processor) op130D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.b A5,-(A1)\n", pc)
}

func (c *Processor) op130E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.b A6,-(A1)\n", pc)
}

func (c *Processor) op130F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.b A7,-(A1)\n", pc)
}

func (c *Processor) op1310() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b (A0),-(A1)\n", pc)
}

func (c *Processor) op1311() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b (A1),-(A1)\n", pc)
}

func (c *Processor) op1312() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b (A2),-(A1)\n", pc)
}

func (c *Processor) op1313() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b (A3),-(A1)\n", pc)
}

func (c *Processor) op1314() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b (A4),-(A1)\n", pc)
}

func (c *Processor) op1315() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b (A5),-(A1)\n", pc)
}

func (c *Processor) op1316() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b (A6),-(A1)\n", pc)
}

func (c *Processor) op1317() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b (A7),-(A1)\n", pc)
}

func (c *Processor) op1338() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b $%X,-(A1)\n", pc, v)
}

func (c *Processor) op1339() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b $%X,-(A1)\n", pc, v)
}

func (c *Processor) op133C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.b #$%X,-(A1)\n", pc, v)
}

func (c *Processor) op1340() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D0,(%d,A1)\n", pc, disp)
}

func (c *Processor) op1341() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D1,(%d,A1)\n", pc, disp)
}

func (c *Processor) op1342() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D2,(%d,A1)\n", pc, disp)
}

func (c *Processor) op1343() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D3,(%d,A1)\n", pc, disp)
}

func (c *Processor) op1344() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D4,(%d,A1)\n", pc, disp)
}

func (c *Processor) op1345() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D5,(%d,A1)\n", pc, disp)
}

func (c *Processor) op1346() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D6,(%d,A1)\n", pc, disp)
}

func (c *Processor) op1347() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D7,(%d,A1)\n", pc, disp)
}

func (c *Processor) op1348() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A0,(%d,A1)\n", pc, disp)
}

func (c *Processor) op1349() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A1,(%d,A1)\n", pc, disp)
}

func (c *Processor) op134A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A2,(%d,A1)\n", pc, disp)
}

func (c *Processor) op134B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A3,(%d,A1)\n", pc, disp)
}

func (c *Processor) op134C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A4,(%d,A1)\n", pc, disp)
}

func (c *Processor) op134D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A5,(%d,A1)\n", pc, disp)
}

func (c *Processor) op134E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A6,(%d,A1)\n", pc, disp)
}

func (c *Processor) op134F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A7,(%d,A1)\n", pc, disp)
}

func (c *Processor) op1350() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A0),(%d,A1)\n", pc, disp)
}

func (c *Processor) op1351() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A1),(%d,A1)\n", pc, disp)
}

func (c *Processor) op1352() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A2),(%d,A1)\n", pc, disp)
}

func (c *Processor) op1353() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A3),(%d,A1)\n", pc, disp)
}

func (c *Processor) op1354() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A4),(%d,A1)\n", pc, disp)
}

func (c *Processor) op1355() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A5),(%d,A1)\n", pc, disp)
}

func (c *Processor) op1356() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A6),(%d,A1)\n", pc, disp)
}

func (c *Processor) op1357() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A7),(%d,A1)\n", pc, disp)
}

func (c *Processor) op1378() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,(%d,A1)\n", pc, v, disp)
}

func (c *Processor) op1379() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,(%d,A1)\n", pc, v, disp)
}

func (c *Processor) op137C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b #$%X,(%d,A1)\n", pc, v, disp)
}

func (c *Processor) op13C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D0,$%X\n", pc, addr)
}

func (c *Processor) op13C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D1,$%X\n", pc, addr)
}

func (c *Processor) op13C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D2,$%X\n", pc, addr)
}

func (c *Processor) op13C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D3,$%X\n", pc, addr)
}

func (c *Processor) op13C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D4,$%X\n", pc, addr)
}

func (c *Processor) op13C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D5,$%X\n", pc, addr)
}

func (c *Processor) op13C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D6,$%X\n", pc, addr)
}

func (c *Processor) op13C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D7,$%X\n", pc, addr)
}

func (c *Processor) op13C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A0,$%X\n", pc, addr)
}

func (c *Processor) op13C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A1,$%X\n", pc, addr)
}

func (c *Processor) op13CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A2,$%X\n", pc, addr)
}

func (c *Processor) op13CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A3,$%X\n", pc, addr)
}

func (c *Processor) op13CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A4,$%X\n", pc, addr)
}

func (c *Processor) op13CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A5,$%X\n", pc, addr)
}

func (c *Processor) op13CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A6,$%X\n", pc, addr)
}

func (c *Processor) op13CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A7,$%X\n", pc, addr)
}

func (c *Processor) op13D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A0),$%X\n", pc, addr)
}

func (c *Processor) op13D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A1),$%X\n", pc, addr)
}

func (c *Processor) op13D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A2),$%X\n", pc, addr)
}

func (c *Processor) op13D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A3),$%X\n", pc, addr)
}

func (c *Processor) op13D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A4),$%X\n", pc, addr)
}

func (c *Processor) op13D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A5),$%X\n", pc, addr)
}

func (c *Processor) op13D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A6),$%X\n", pc, addr)
}

func (c *Processor) op13D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A7),$%X\n", pc, addr)
}

func (c *Processor) op13F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,$%X\n", pc, v, addr)
}

func (c *Processor) op13F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,$%X\n", pc, v, addr)
}

func (c *Processor) op13FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b #$%X,$%X\n", pc, v, addr)
}

func (c *Processor) op1400() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b D0,D2\n", pc)
}

func (c *Processor) op1401() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b D1,D2\n", pc)
}

func (c *Processor) op1402() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b D2,D2\n", pc)
}

func (c *Processor) op1403() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b D3,D2\n", pc)
}

func (c *Processor) op1404() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b D4,D2\n", pc)
}

func (c *Processor) op1405() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b D5,D2\n", pc)
}

func (c *Processor) op1406() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b D6,D2\n", pc)
}

func (c *Processor) op1407() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b D7,D2\n", pc)
}

func (c *Processor) op1408() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b A0,D2\n", pc)
}

func (c *Processor) op1409() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b A1,D2\n", pc)
}

func (c *Processor) op140A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b A2,D2\n", pc)
}

func (c *Processor) op140B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b A3,D2\n", pc)
}

func (c *Processor) op140C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b A4,D2\n", pc)
}

func (c *Processor) op140D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b A5,D2\n", pc)
}

func (c *Processor) op140E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b A6,D2\n", pc)
}

func (c *Processor) op140F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b A7,D2\n", pc)
}

func (c *Processor) op1410() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b (A0),D2\n", pc)
}

func (c *Processor) op1411() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b (A1),D2\n", pc)
}

func (c *Processor) op1412() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b (A2),D2\n", pc)
}

func (c *Processor) op1413() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b (A3),D2\n", pc)
}

func (c *Processor) op1414() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b (A4),D2\n", pc)
}

func (c *Processor) op1415() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b (A5),D2\n", pc)
}

func (c *Processor) op1416() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b (A6),D2\n", pc)
}

func (c *Processor) op1417() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b (A7),D2\n", pc)
}

func (c *Processor) op1438() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b $%X,D2\n", pc, v)
}

func (c *Processor) op1439() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b $%X,D2\n", pc, v)
}

func (c *Processor) op143C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[2] = uint32(v)
	c.tracef("%04X move.b #$%X,D2\n", pc, v)
}

func (c *Processor) op1440() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b D0,A2\n", pc)
}

func (c *Processor) op1441() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b D1,A2\n", pc)
}

func (c *Processor) op1442() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b D2,A2\n", pc)
}

func (c *Processor) op1443() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b D3,A2\n", pc)
}

func (c *Processor) op1444() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b D4,A2\n", pc)
}

func (c *Processor) op1445() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b D5,A2\n", pc)
}

func (c *Processor) op1446() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b D6,A2\n", pc)
}

func (c *Processor) op1447() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b D7,A2\n", pc)
}

func (c *Processor) op1448() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b A0,A2\n", pc)
}

func (c *Processor) op1449() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b A1,A2\n", pc)
}

func (c *Processor) op144A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b A2,A2\n", pc)
}

func (c *Processor) op144B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b A3,A2\n", pc)
}

func (c *Processor) op144C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b A4,A2\n", pc)
}

func (c *Processor) op144D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b A5,A2\n", pc)
}

func (c *Processor) op144E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b A6,A2\n", pc)
}

func (c *Processor) op144F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b A7,A2\n", pc)
}

func (c *Processor) op1450() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b (A0),A2\n", pc)
}

func (c *Processor) op1451() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b (A1),A2\n", pc)
}

func (c *Processor) op1452() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b (A2),A2\n", pc)
}

func (c *Processor) op1453() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b (A3),A2\n", pc)
}

func (c *Processor) op1454() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b (A4),A2\n", pc)
}

func (c *Processor) op1455() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b (A5),A2\n", pc)
}

func (c *Processor) op1456() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b (A6),A2\n", pc)
}

func (c *Processor) op1457() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b (A7),A2\n", pc)
}

func (c *Processor) op1478() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b $%X,A2\n", pc, v)
}

func (c *Processor) op1479() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b $%X,A2\n", pc, v)
}

func (c *Processor) op147C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.b #$%X,A2\n", pc, v)
}

func (c *Processor) op1480() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b D0,(A2)\n", pc)
}

func (c *Processor) op1481() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b D1,(A2)\n", pc)
}

func (c *Processor) op1482() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b D2,(A2)\n", pc)
}

func (c *Processor) op1483() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b D3,(A2)\n", pc)
}

func (c *Processor) op1484() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b D4,(A2)\n", pc)
}

func (c *Processor) op1485() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b D5,(A2)\n", pc)
}

func (c *Processor) op1486() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b D6,(A2)\n", pc)
}

func (c *Processor) op1487() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b D7,(A2)\n", pc)
}

func (c *Processor) op1488() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b A0,(A2)\n", pc)
}

func (c *Processor) op1489() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b A1,(A2)\n", pc)
}

func (c *Processor) op148A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b A2,(A2)\n", pc)
}

func (c *Processor) op148B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b A3,(A2)\n", pc)
}

func (c *Processor) op148C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b A4,(A2)\n", pc)
}

func (c *Processor) op148D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b A5,(A2)\n", pc)
}

func (c *Processor) op148E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b A6,(A2)\n", pc)
}

func (c *Processor) op148F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b A7,(A2)\n", pc)
}

func (c *Processor) op1490() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b (A0),(A2)\n", pc)
}

func (c *Processor) op1491() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b (A1),(A2)\n", pc)
}

func (c *Processor) op1492() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b (A2),(A2)\n", pc)
}

func (c *Processor) op1493() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b (A3),(A2)\n", pc)
}

func (c *Processor) op1494() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b (A4),(A2)\n", pc)
}

func (c *Processor) op1495() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b (A5),(A2)\n", pc)
}

func (c *Processor) op1496() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b (A6),(A2)\n", pc)
}

func (c *Processor) op1497() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b (A7),(A2)\n", pc)
}

func (c *Processor) op14B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b $%X,(A2)\n", pc, v)
}

func (c *Processor) op14B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b $%X,(A2)\n", pc, v)
}

func (c *Processor) op14BC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b #$%X,(A2)\n", pc, v)
}

func (c *Processor) op14C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b D0,(A2)+\n", pc)
}

func (c *Processor) op14C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b D1,(A2)+\n", pc)
}

func (c *Processor) op14C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b D2,(A2)+\n", pc)
}

func (c *Processor) op14C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b D3,(A2)+\n", pc)
}

func (c *Processor) op14C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b D4,(A2)+\n", pc)
}

func (c *Processor) op14C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b D5,(A2)+\n", pc)
}

func (c *Processor) op14C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b D6,(A2)+\n", pc)
}

func (c *Processor) op14C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b D7,(A2)+\n", pc)
}

func (c *Processor) op14C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b A0,(A2)+\n", pc)
}

func (c *Processor) op14C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b A1,(A2)+\n", pc)
}

func (c *Processor) op14CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b A2,(A2)+\n", pc)
}

func (c *Processor) op14CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b A3,(A2)+\n", pc)
}

func (c *Processor) op14CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b A4,(A2)+\n", pc)
}

func (c *Processor) op14CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b A5,(A2)+\n", pc)
}

func (c *Processor) op14CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b A6,(A2)+\n", pc)
}

func (c *Processor) op14CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b A7,(A2)+\n", pc)
}

func (c *Processor) op14D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b (A0),(A2)+\n", pc)
}

func (c *Processor) op14D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b (A1),(A2)+\n", pc)
}

func (c *Processor) op14D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b (A2),(A2)+\n", pc)
}

func (c *Processor) op14D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b (A3),(A2)+\n", pc)
}

func (c *Processor) op14D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b (A4),(A2)+\n", pc)
}

func (c *Processor) op14D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b (A5),(A2)+\n", pc)
}

func (c *Processor) op14D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b (A6),(A2)+\n", pc)
}

func (c *Processor) op14D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b (A7),(A2)+\n", pc)
}

func (c *Processor) op14F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b $%X,(A2)+\n", pc, v)
}

func (c *Processor) op14F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b $%X,(A2)+\n", pc, v)
}

func (c *Processor) op14FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.b #$%X,(A2)+\n", pc, v)
}

func (c *Processor) op1500() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b D0,-(A2)\n", pc)
}

func (c *Processor) op1501() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b D1,-(A2)\n", pc)
}

func (c *Processor) op1502() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b D2,-(A2)\n", pc)
}

func (c *Processor) op1503() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b D3,-(A2)\n", pc)
}

func (c *Processor) op1504() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b D4,-(A2)\n", pc)
}

func (c *Processor) op1505() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b D5,-(A2)\n", pc)
}

func (c *Processor) op1506() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b D6,-(A2)\n", pc)
}

func (c *Processor) op1507() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b D7,-(A2)\n", pc)
}

func (c *Processor) op1508() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.b A0,-(A2)\n", pc)
}

func (c *Processor) op1509() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.b A1,-(A2)\n", pc)
}

func (c *Processor) op150A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.b A2,-(A2)\n", pc)
}

func (c *Processor) op150B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.b A3,-(A2)\n", pc)
}

func (c *Processor) op150C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.b A4,-(A2)\n", pc)
}

func (c *Processor) op150D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.b A5,-(A2)\n", pc)
}

func (c *Processor) op150E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.b A6,-(A2)\n", pc)
}

func (c *Processor) op150F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.b A7,-(A2)\n", pc)
}

func (c *Processor) op1510() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b (A0),-(A2)\n", pc)
}

func (c *Processor) op1511() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b (A1),-(A2)\n", pc)
}

func (c *Processor) op1512() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b (A2),-(A2)\n", pc)
}

func (c *Processor) op1513() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b (A3),-(A2)\n", pc)
}

func (c *Processor) op1514() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b (A4),-(A2)\n", pc)
}

func (c *Processor) op1515() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b (A5),-(A2)\n", pc)
}

func (c *Processor) op1516() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b (A6),-(A2)\n", pc)
}

func (c *Processor) op1517() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b (A7),-(A2)\n", pc)
}

func (c *Processor) op1538() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b $%X,-(A2)\n", pc, v)
}

func (c *Processor) op1539() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b $%X,-(A2)\n", pc, v)
}

func (c *Processor) op153C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.b #$%X,-(A2)\n", pc, v)
}

func (c *Processor) op1540() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D0,(%d,A2)\n", pc, disp)
}

func (c *Processor) op1541() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D1,(%d,A2)\n", pc, disp)
}

func (c *Processor) op1542() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D2,(%d,A2)\n", pc, disp)
}

func (c *Processor) op1543() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D3,(%d,A2)\n", pc, disp)
}

func (c *Processor) op1544() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D4,(%d,A2)\n", pc, disp)
}

func (c *Processor) op1545() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D5,(%d,A2)\n", pc, disp)
}

func (c *Processor) op1546() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D6,(%d,A2)\n", pc, disp)
}

func (c *Processor) op1547() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D7,(%d,A2)\n", pc, disp)
}

func (c *Processor) op1548() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A0,(%d,A2)\n", pc, disp)
}

func (c *Processor) op1549() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A1,(%d,A2)\n", pc, disp)
}

func (c *Processor) op154A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A2,(%d,A2)\n", pc, disp)
}

func (c *Processor) op154B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A3,(%d,A2)\n", pc, disp)
}

func (c *Processor) op154C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A4,(%d,A2)\n", pc, disp)
}

func (c *Processor) op154D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A5,(%d,A2)\n", pc, disp)
}

func (c *Processor) op154E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A6,(%d,A2)\n", pc, disp)
}

func (c *Processor) op154F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A7,(%d,A2)\n", pc, disp)
}

func (c *Processor) op1550() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A0),(%d,A2)\n", pc, disp)
}

func (c *Processor) op1551() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A1),(%d,A2)\n", pc, disp)
}

func (c *Processor) op1552() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A2),(%d,A2)\n", pc, disp)
}

func (c *Processor) op1553() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A3),(%d,A2)\n", pc, disp)
}

func (c *Processor) op1554() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A4),(%d,A2)\n", pc, disp)
}

func (c *Processor) op1555() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A5),(%d,A2)\n", pc, disp)
}

func (c *Processor) op1556() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A6),(%d,A2)\n", pc, disp)
}

func (c *Processor) op1557() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A7),(%d,A2)\n", pc, disp)
}

func (c *Processor) op1578() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,(%d,A2)\n", pc, v, disp)
}

func (c *Processor) op1579() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,(%d,A2)\n", pc, v, disp)
}

func (c *Processor) op157C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b #$%X,(%d,A2)\n", pc, v, disp)
}

func (c *Processor) op1600() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b D0,D3\n", pc)
}

func (c *Processor) op1601() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b D1,D3\n", pc)
}

func (c *Processor) op1602() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b D2,D3\n", pc)
}

func (c *Processor) op1603() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b D3,D3\n", pc)
}

func (c *Processor) op1604() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b D4,D3\n", pc)
}

func (c *Processor) op1605() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b D5,D3\n", pc)
}

func (c *Processor) op1606() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b D6,D3\n", pc)
}

func (c *Processor) op1607() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b D7,D3\n", pc)
}

func (c *Processor) op1608() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b A0,D3\n", pc)
}

func (c *Processor) op1609() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b A1,D3\n", pc)
}

func (c *Processor) op160A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b A2,D3\n", pc)
}

func (c *Processor) op160B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b A3,D3\n", pc)
}

func (c *Processor) op160C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b A4,D3\n", pc)
}

func (c *Processor) op160D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b A5,D3\n", pc)
}

func (c *Processor) op160E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b A6,D3\n", pc)
}

func (c *Processor) op160F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b A7,D3\n", pc)
}

func (c *Processor) op1610() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b (A0),D3\n", pc)
}

func (c *Processor) op1611() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b (A1),D3\n", pc)
}

func (c *Processor) op1612() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b (A2),D3\n", pc)
}

func (c *Processor) op1613() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b (A3),D3\n", pc)
}

func (c *Processor) op1614() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b (A4),D3\n", pc)
}

func (c *Processor) op1615() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b (A5),D3\n", pc)
}

func (c *Processor) op1616() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b (A6),D3\n", pc)
}

func (c *Processor) op1617() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b (A7),D3\n", pc)
}

func (c *Processor) op1638() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b $%X,D3\n", pc, v)
}

func (c *Processor) op1639() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b $%X,D3\n", pc, v)
}

func (c *Processor) op163C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[3] = uint32(v)
	c.tracef("%04X move.b #$%X,D3\n", pc, v)
}

func (c *Processor) op1640() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b D0,A3\n", pc)
}

func (c *Processor) op1641() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b D1,A3\n", pc)
}

func (c *Processor) op1642() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b D2,A3\n", pc)
}

func (c *Processor) op1643() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b D3,A3\n", pc)
}

func (c *Processor) op1644() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b D4,A3\n", pc)
}

func (c *Processor) op1645() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b D5,A3\n", pc)
}

func (c *Processor) op1646() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b D6,A3\n", pc)
}

func (c *Processor) op1647() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b D7,A3\n", pc)
}

func (c *Processor) op1648() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b A0,A3\n", pc)
}

func (c *Processor) op1649() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b A1,A3\n", pc)
}

func (c *Processor) op164A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b A2,A3\n", pc)
}

func (c *Processor) op164B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b A3,A3\n", pc)
}

func (c *Processor) op164C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b A4,A3\n", pc)
}

func (c *Processor) op164D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b A5,A3\n", pc)
}

func (c *Processor) op164E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b A6,A3\n", pc)
}

func (c *Processor) op164F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b A7,A3\n", pc)
}

func (c *Processor) op1650() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b (A0),A3\n", pc)
}

func (c *Processor) op1651() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b (A1),A3\n", pc)
}

func (c *Processor) op1652() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b (A2),A3\n", pc)
}

func (c *Processor) op1653() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b (A3),A3\n", pc)
}

func (c *Processor) op1654() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b (A4),A3\n", pc)
}

func (c *Processor) op1655() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b (A5),A3\n", pc)
}

func (c *Processor) op1656() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b (A6),A3\n", pc)
}

func (c *Processor) op1657() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b (A7),A3\n", pc)
}

func (c *Processor) op1678() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b $%X,A3\n", pc, v)
}

func (c *Processor) op1679() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b $%X,A3\n", pc, v)
}

func (c *Processor) op167C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.b #$%X,A3\n", pc, v)
}

func (c *Processor) op1680() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b D0,(A3)\n", pc)
}

func (c *Processor) op1681() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b D1,(A3)\n", pc)
}

func (c *Processor) op1682() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b D2,(A3)\n", pc)
}

func (c *Processor) op1683() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b D3,(A3)\n", pc)
}

func (c *Processor) op1684() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b D4,(A3)\n", pc)
}

func (c *Processor) op1685() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b D5,(A3)\n", pc)
}

func (c *Processor) op1686() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b D6,(A3)\n", pc)
}

func (c *Processor) op1687() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b D7,(A3)\n", pc)
}

func (c *Processor) op1688() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b A0,(A3)\n", pc)
}

func (c *Processor) op1689() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b A1,(A3)\n", pc)
}

func (c *Processor) op168A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b A2,(A3)\n", pc)
}

func (c *Processor) op168B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b A3,(A3)\n", pc)
}

func (c *Processor) op168C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b A4,(A3)\n", pc)
}

func (c *Processor) op168D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b A5,(A3)\n", pc)
}

func (c *Processor) op168E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b A6,(A3)\n", pc)
}

func (c *Processor) op168F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b A7,(A3)\n", pc)
}

func (c *Processor) op1690() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b (A0),(A3)\n", pc)
}

func (c *Processor) op1691() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b (A1),(A3)\n", pc)
}

func (c *Processor) op1692() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b (A2),(A3)\n", pc)
}

func (c *Processor) op1693() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b (A3),(A3)\n", pc)
}

func (c *Processor) op1694() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b (A4),(A3)\n", pc)
}

func (c *Processor) op1695() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b (A5),(A3)\n", pc)
}

func (c *Processor) op1696() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b (A6),(A3)\n", pc)
}

func (c *Processor) op1697() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b (A7),(A3)\n", pc)
}

func (c *Processor) op16B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b $%X,(A3)\n", pc, v)
}

func (c *Processor) op16B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b $%X,(A3)\n", pc, v)
}

func (c *Processor) op16BC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b #$%X,(A3)\n", pc, v)
}

func (c *Processor) op16C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b D0,(A3)+\n", pc)
}

func (c *Processor) op16C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b D1,(A3)+\n", pc)
}

func (c *Processor) op16C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b D2,(A3)+\n", pc)
}

func (c *Processor) op16C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b D3,(A3)+\n", pc)
}

func (c *Processor) op16C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b D4,(A3)+\n", pc)
}

func (c *Processor) op16C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b D5,(A3)+\n", pc)
}

func (c *Processor) op16C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b D6,(A3)+\n", pc)
}

func (c *Processor) op16C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b D7,(A3)+\n", pc)
}

func (c *Processor) op16C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b A0,(A3)+\n", pc)
}

func (c *Processor) op16C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b A1,(A3)+\n", pc)
}

func (c *Processor) op16CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b A2,(A3)+\n", pc)
}

func (c *Processor) op16CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b A3,(A3)+\n", pc)
}

func (c *Processor) op16CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b A4,(A3)+\n", pc)
}

func (c *Processor) op16CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b A5,(A3)+\n", pc)
}

func (c *Processor) op16CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b A6,(A3)+\n", pc)
}

func (c *Processor) op16CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b A7,(A3)+\n", pc)
}

func (c *Processor) op16D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b (A0),(A3)+\n", pc)
}

func (c *Processor) op16D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b (A1),(A3)+\n", pc)
}

func (c *Processor) op16D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b (A2),(A3)+\n", pc)
}

func (c *Processor) op16D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b (A3),(A3)+\n", pc)
}

func (c *Processor) op16D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b (A4),(A3)+\n", pc)
}

func (c *Processor) op16D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b (A5),(A3)+\n", pc)
}

func (c *Processor) op16D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b (A6),(A3)+\n", pc)
}

func (c *Processor) op16D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b (A7),(A3)+\n", pc)
}

func (c *Processor) op16F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b $%X,(A3)+\n", pc, v)
}

func (c *Processor) op16F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b $%X,(A3)+\n", pc, v)
}

func (c *Processor) op16FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.b #$%X,(A3)+\n", pc, v)
}

func (c *Processor) op1700() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b D0,-(A3)\n", pc)
}

func (c *Processor) op1701() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b D1,-(A3)\n", pc)
}

func (c *Processor) op1702() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b D2,-(A3)\n", pc)
}

func (c *Processor) op1703() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b D3,-(A3)\n", pc)
}

func (c *Processor) op1704() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b D4,-(A3)\n", pc)
}

func (c *Processor) op1705() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b D5,-(A3)\n", pc)
}

func (c *Processor) op1706() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b D6,-(A3)\n", pc)
}

func (c *Processor) op1707() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b D7,-(A3)\n", pc)
}

func (c *Processor) op1708() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.b A0,-(A3)\n", pc)
}

func (c *Processor) op1709() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.b A1,-(A3)\n", pc)
}

func (c *Processor) op170A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.b A2,-(A3)\n", pc)
}

func (c *Processor) op170B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.b A3,-(A3)\n", pc)
}

func (c *Processor) op170C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.b A4,-(A3)\n", pc)
}

func (c *Processor) op170D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.b A5,-(A3)\n", pc)
}

func (c *Processor) op170E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.b A6,-(A3)\n", pc)
}

func (c *Processor) op170F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.b A7,-(A3)\n", pc)
}

func (c *Processor) op1710() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b (A0),-(A3)\n", pc)
}

func (c *Processor) op1711() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b (A1),-(A3)\n", pc)
}

func (c *Processor) op1712() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b (A2),-(A3)\n", pc)
}

func (c *Processor) op1713() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b (A3),-(A3)\n", pc)
}

func (c *Processor) op1714() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b (A4),-(A3)\n", pc)
}

func (c *Processor) op1715() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b (A5),-(A3)\n", pc)
}

func (c *Processor) op1716() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b (A6),-(A3)\n", pc)
}

func (c *Processor) op1717() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b (A7),-(A3)\n", pc)
}

func (c *Processor) op1738() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b $%X,-(A3)\n", pc, v)
}

func (c *Processor) op1739() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b $%X,-(A3)\n", pc, v)
}

func (c *Processor) op173C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.b #$%X,-(A3)\n", pc, v)
}

func (c *Processor) op1740() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D0,(%d,A3)\n", pc, disp)
}

func (c *Processor) op1741() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D1,(%d,A3)\n", pc, disp)
}

func (c *Processor) op1742() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D2,(%d,A3)\n", pc, disp)
}

func (c *Processor) op1743() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D3,(%d,A3)\n", pc, disp)
}

func (c *Processor) op1744() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D4,(%d,A3)\n", pc, disp)
}

func (c *Processor) op1745() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D5,(%d,A3)\n", pc, disp)
}

func (c *Processor) op1746() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D6,(%d,A3)\n", pc, disp)
}

func (c *Processor) op1747() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D7,(%d,A3)\n", pc, disp)
}

func (c *Processor) op1748() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A0,(%d,A3)\n", pc, disp)
}

func (c *Processor) op1749() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A1,(%d,A3)\n", pc, disp)
}

func (c *Processor) op174A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A2,(%d,A3)\n", pc, disp)
}

func (c *Processor) op174B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A3,(%d,A3)\n", pc, disp)
}

func (c *Processor) op174C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A4,(%d,A3)\n", pc, disp)
}

func (c *Processor) op174D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A5,(%d,A3)\n", pc, disp)
}

func (c *Processor) op174E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A6,(%d,A3)\n", pc, disp)
}

func (c *Processor) op174F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A7,(%d,A3)\n", pc, disp)
}

func (c *Processor) op1750() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A0),(%d,A3)\n", pc, disp)
}

func (c *Processor) op1751() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A1),(%d,A3)\n", pc, disp)
}

func (c *Processor) op1752() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A2),(%d,A3)\n", pc, disp)
}

func (c *Processor) op1753() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A3),(%d,A3)\n", pc, disp)
}

func (c *Processor) op1754() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A4),(%d,A3)\n", pc, disp)
}

func (c *Processor) op1755() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A5),(%d,A3)\n", pc, disp)
}

func (c *Processor) op1756() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A6),(%d,A3)\n", pc, disp)
}

func (c *Processor) op1757() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A7),(%d,A3)\n", pc, disp)
}

func (c *Processor) op1778() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,(%d,A3)\n", pc, v, disp)
}

func (c *Processor) op1779() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,(%d,A3)\n", pc, v, disp)
}

func (c *Processor) op177C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b #$%X,(%d,A3)\n", pc, v, disp)
}

func (c *Processor) op1800() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b D0,D4\n", pc)
}

func (c *Processor) op1801() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b D1,D4\n", pc)
}

func (c *Processor) op1802() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b D2,D4\n", pc)
}

func (c *Processor) op1803() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b D3,D4\n", pc)
}

func (c *Processor) op1804() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b D4,D4\n", pc)
}

func (c *Processor) op1805() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b D5,D4\n", pc)
}

func (c *Processor) op1806() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b D6,D4\n", pc)
}

func (c *Processor) op1807() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b D7,D4\n", pc)
}

func (c *Processor) op1808() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b A0,D4\n", pc)
}

func (c *Processor) op1809() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b A1,D4\n", pc)
}

func (c *Processor) op180A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b A2,D4\n", pc)
}

func (c *Processor) op180B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b A3,D4\n", pc)
}

func (c *Processor) op180C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b A4,D4\n", pc)
}

func (c *Processor) op180D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b A5,D4\n", pc)
}

func (c *Processor) op180E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b A6,D4\n", pc)
}

func (c *Processor) op180F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b A7,D4\n", pc)
}

func (c *Processor) op1810() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b (A0),D4\n", pc)
}

func (c *Processor) op1811() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b (A1),D4\n", pc)
}

func (c *Processor) op1812() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b (A2),D4\n", pc)
}

func (c *Processor) op1813() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b (A3),D4\n", pc)
}

func (c *Processor) op1814() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b (A4),D4\n", pc)
}

func (c *Processor) op1815() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b (A5),D4\n", pc)
}

func (c *Processor) op1816() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b (A6),D4\n", pc)
}

func (c *Processor) op1817() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b (A7),D4\n", pc)
}

func (c *Processor) op1838() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b $%X,D4\n", pc, v)
}

func (c *Processor) op1839() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b $%X,D4\n", pc, v)
}

func (c *Processor) op183C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[4] = uint32(v)
	c.tracef("%04X move.b #$%X,D4\n", pc, v)
}

func (c *Processor) op1840() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b D0,A4\n", pc)
}

func (c *Processor) op1841() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b D1,A4\n", pc)
}

func (c *Processor) op1842() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b D2,A4\n", pc)
}

func (c *Processor) op1843() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b D3,A4\n", pc)
}

func (c *Processor) op1844() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b D4,A4\n", pc)
}

func (c *Processor) op1845() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b D5,A4\n", pc)
}

func (c *Processor) op1846() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b D6,A4\n", pc)
}

func (c *Processor) op1847() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b D7,A4\n", pc)
}

func (c *Processor) op1848() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b A0,A4\n", pc)
}

func (c *Processor) op1849() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b A1,A4\n", pc)
}

func (c *Processor) op184A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b A2,A4\n", pc)
}

func (c *Processor) op184B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b A3,A4\n", pc)
}

func (c *Processor) op184C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b A4,A4\n", pc)
}

func (c *Processor) op184D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b A5,A4\n", pc)
}

func (c *Processor) op184E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b A6,A4\n", pc)
}

func (c *Processor) op184F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b A7,A4\n", pc)
}

func (c *Processor) op1850() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b (A0),A4\n", pc)
}

func (c *Processor) op1851() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b (A1),A4\n", pc)
}

func (c *Processor) op1852() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b (A2),A4\n", pc)
}

func (c *Processor) op1853() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b (A3),A4\n", pc)
}

func (c *Processor) op1854() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b (A4),A4\n", pc)
}

func (c *Processor) op1855() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b (A5),A4\n", pc)
}

func (c *Processor) op1856() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b (A6),A4\n", pc)
}

func (c *Processor) op1857() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b (A7),A4\n", pc)
}

func (c *Processor) op1878() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b $%X,A4\n", pc, v)
}

func (c *Processor) op1879() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b $%X,A4\n", pc, v)
}

func (c *Processor) op187C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.b #$%X,A4\n", pc, v)
}

func (c *Processor) op1880() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b D0,(A4)\n", pc)
}

func (c *Processor) op1881() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b D1,(A4)\n", pc)
}

func (c *Processor) op1882() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b D2,(A4)\n", pc)
}

func (c *Processor) op1883() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b D3,(A4)\n", pc)
}

func (c *Processor) op1884() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b D4,(A4)\n", pc)
}

func (c *Processor) op1885() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b D5,(A4)\n", pc)
}

func (c *Processor) op1886() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b D6,(A4)\n", pc)
}

func (c *Processor) op1887() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b D7,(A4)\n", pc)
}

func (c *Processor) op1888() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b A0,(A4)\n", pc)
}

func (c *Processor) op1889() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b A1,(A4)\n", pc)
}

func (c *Processor) op188A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b A2,(A4)\n", pc)
}

func (c *Processor) op188B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b A3,(A4)\n", pc)
}

func (c *Processor) op188C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b A4,(A4)\n", pc)
}

func (c *Processor) op188D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b A5,(A4)\n", pc)
}

func (c *Processor) op188E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b A6,(A4)\n", pc)
}

func (c *Processor) op188F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b A7,(A4)\n", pc)
}

func (c *Processor) op1890() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b (A0),(A4)\n", pc)
}

func (c *Processor) op1891() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b (A1),(A4)\n", pc)
}

func (c *Processor) op1892() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b (A2),(A4)\n", pc)
}

func (c *Processor) op1893() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b (A3),(A4)\n", pc)
}

func (c *Processor) op1894() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b (A4),(A4)\n", pc)
}

func (c *Processor) op1895() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b (A5),(A4)\n", pc)
}

func (c *Processor) op1896() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b (A6),(A4)\n", pc)
}

func (c *Processor) op1897() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b (A7),(A4)\n", pc)
}

func (c *Processor) op18B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b $%X,(A4)\n", pc, v)
}

func (c *Processor) op18B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b $%X,(A4)\n", pc, v)
}

func (c *Processor) op18BC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b #$%X,(A4)\n", pc, v)
}

func (c *Processor) op18C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b D0,(A4)+\n", pc)
}

func (c *Processor) op18C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b D1,(A4)+\n", pc)
}

func (c *Processor) op18C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b D2,(A4)+\n", pc)
}

func (c *Processor) op18C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b D3,(A4)+\n", pc)
}

func (c *Processor) op18C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b D4,(A4)+\n", pc)
}

func (c *Processor) op18C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b D5,(A4)+\n", pc)
}

func (c *Processor) op18C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b D6,(A4)+\n", pc)
}

func (c *Processor) op18C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b D7,(A4)+\n", pc)
}

func (c *Processor) op18C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b A0,(A4)+\n", pc)
}

func (c *Processor) op18C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b A1,(A4)+\n", pc)
}

func (c *Processor) op18CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b A2,(A4)+\n", pc)
}

func (c *Processor) op18CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b A3,(A4)+\n", pc)
}

func (c *Processor) op18CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b A4,(A4)+\n", pc)
}

func (c *Processor) op18CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b A5,(A4)+\n", pc)
}

func (c *Processor) op18CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b A6,(A4)+\n", pc)
}

func (c *Processor) op18CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b A7,(A4)+\n", pc)
}

func (c *Processor) op18D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b (A0),(A4)+\n", pc)
}

func (c *Processor) op18D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b (A1),(A4)+\n", pc)
}

func (c *Processor) op18D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b (A2),(A4)+\n", pc)
}

func (c *Processor) op18D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b (A3),(A4)+\n", pc)
}

func (c *Processor) op18D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b (A4),(A4)+\n", pc)
}

func (c *Processor) op18D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b (A5),(A4)+\n", pc)
}

func (c *Processor) op18D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b (A6),(A4)+\n", pc)
}

func (c *Processor) op18D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b (A7),(A4)+\n", pc)
}

func (c *Processor) op18F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b $%X,(A4)+\n", pc, v)
}

func (c *Processor) op18F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b $%X,(A4)+\n", pc, v)
}

func (c *Processor) op18FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.b #$%X,(A4)+\n", pc, v)
}

func (c *Processor) op1900() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b D0,-(A4)\n", pc)
}

func (c *Processor) op1901() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b D1,-(A4)\n", pc)
}

func (c *Processor) op1902() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b D2,-(A4)\n", pc)
}

func (c *Processor) op1903() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b D3,-(A4)\n", pc)
}

func (c *Processor) op1904() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b D4,-(A4)\n", pc)
}

func (c *Processor) op1905() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b D5,-(A4)\n", pc)
}

func (c *Processor) op1906() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b D6,-(A4)\n", pc)
}

func (c *Processor) op1907() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b D7,-(A4)\n", pc)
}

func (c *Processor) op1908() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.b A0,-(A4)\n", pc)
}

func (c *Processor) op1909() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.b A1,-(A4)\n", pc)
}

func (c *Processor) op190A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.b A2,-(A4)\n", pc)
}

func (c *Processor) op190B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.b A3,-(A4)\n", pc)
}

func (c *Processor) op190C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.b A4,-(A4)\n", pc)
}

func (c *Processor) op190D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.b A5,-(A4)\n", pc)
}

func (c *Processor) op190E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.b A6,-(A4)\n", pc)
}

func (c *Processor) op190F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.b A7,-(A4)\n", pc)
}

func (c *Processor) op1910() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b (A0),-(A4)\n", pc)
}

func (c *Processor) op1911() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b (A1),-(A4)\n", pc)
}

func (c *Processor) op1912() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b (A2),-(A4)\n", pc)
}

func (c *Processor) op1913() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b (A3),-(A4)\n", pc)
}

func (c *Processor) op1914() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b (A4),-(A4)\n", pc)
}

func (c *Processor) op1915() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b (A5),-(A4)\n", pc)
}

func (c *Processor) op1916() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b (A6),-(A4)\n", pc)
}

func (c *Processor) op1917() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b (A7),-(A4)\n", pc)
}

func (c *Processor) op1938() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b $%X,-(A4)\n", pc, v)
}

func (c *Processor) op1939() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b $%X,-(A4)\n", pc, v)
}

func (c *Processor) op193C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.b #$%X,-(A4)\n", pc, v)
}

func (c *Processor) op1940() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D0,(%d,A4)\n", pc, disp)
}

func (c *Processor) op1941() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D1,(%d,A4)\n", pc, disp)
}

func (c *Processor) op1942() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D2,(%d,A4)\n", pc, disp)
}

func (c *Processor) op1943() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D3,(%d,A4)\n", pc, disp)
}

func (c *Processor) op1944() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D4,(%d,A4)\n", pc, disp)
}

func (c *Processor) op1945() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D5,(%d,A4)\n", pc, disp)
}

func (c *Processor) op1946() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D6,(%d,A4)\n", pc, disp)
}

func (c *Processor) op1947() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D7,(%d,A4)\n", pc, disp)
}

func (c *Processor) op1948() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A0,(%d,A4)\n", pc, disp)
}

func (c *Processor) op1949() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A1,(%d,A4)\n", pc, disp)
}

func (c *Processor) op194A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A2,(%d,A4)\n", pc, disp)
}

func (c *Processor) op194B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A3,(%d,A4)\n", pc, disp)
}

func (c *Processor) op194C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A4,(%d,A4)\n", pc, disp)
}

func (c *Processor) op194D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A5,(%d,A4)\n", pc, disp)
}

func (c *Processor) op194E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A6,(%d,A4)\n", pc, disp)
}

func (c *Processor) op194F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A7,(%d,A4)\n", pc, disp)
}

func (c *Processor) op1950() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A0),(%d,A4)\n", pc, disp)
}

func (c *Processor) op1951() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A1),(%d,A4)\n", pc, disp)
}

func (c *Processor) op1952() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A2),(%d,A4)\n", pc, disp)
}

func (c *Processor) op1953() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A3),(%d,A4)\n", pc, disp)
}

func (c *Processor) op1954() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A4),(%d,A4)\n", pc, disp)
}

func (c *Processor) op1955() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A5),(%d,A4)\n", pc, disp)
}

func (c *Processor) op1956() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A6),(%d,A4)\n", pc, disp)
}

func (c *Processor) op1957() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A7),(%d,A4)\n", pc, disp)
}

func (c *Processor) op1978() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,(%d,A4)\n", pc, v, disp)
}

func (c *Processor) op1979() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,(%d,A4)\n", pc, v, disp)
}

func (c *Processor) op197C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b #$%X,(%d,A4)\n", pc, v, disp)
}

func (c *Processor) op1A00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b D0,D5\n", pc)
}

func (c *Processor) op1A01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b D1,D5\n", pc)
}

func (c *Processor) op1A02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b D2,D5\n", pc)
}

func (c *Processor) op1A03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b D3,D5\n", pc)
}

func (c *Processor) op1A04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b D4,D5\n", pc)
}

func (c *Processor) op1A05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b D5,D5\n", pc)
}

func (c *Processor) op1A06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b D6,D5\n", pc)
}

func (c *Processor) op1A07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b D7,D5\n", pc)
}

func (c *Processor) op1A08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b A0,D5\n", pc)
}

func (c *Processor) op1A09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b A1,D5\n", pc)
}

func (c *Processor) op1A0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b A2,D5\n", pc)
}

func (c *Processor) op1A0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b A3,D5\n", pc)
}

func (c *Processor) op1A0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b A4,D5\n", pc)
}

func (c *Processor) op1A0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b A5,D5\n", pc)
}

func (c *Processor) op1A0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b A6,D5\n", pc)
}

func (c *Processor) op1A0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b A7,D5\n", pc)
}

func (c *Processor) op1A10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b (A0),D5\n", pc)
}

func (c *Processor) op1A11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b (A1),D5\n", pc)
}

func (c *Processor) op1A12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b (A2),D5\n", pc)
}

func (c *Processor) op1A13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b (A3),D5\n", pc)
}

func (c *Processor) op1A14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b (A4),D5\n", pc)
}

func (c *Processor) op1A15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b (A5),D5\n", pc)
}

func (c *Processor) op1A16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b (A6),D5\n", pc)
}

func (c *Processor) op1A17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b (A7),D5\n", pc)
}

func (c *Processor) op1A38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b $%X,D5\n", pc, v)
}

func (c *Processor) op1A39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b $%X,D5\n", pc, v)
}

func (c *Processor) op1A3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[5] = uint32(v)
	c.tracef("%04X move.b #$%X,D5\n", pc, v)
}

func (c *Processor) op1A40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b D0,A5\n", pc)
}

func (c *Processor) op1A41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b D1,A5\n", pc)
}

func (c *Processor) op1A42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b D2,A5\n", pc)
}

func (c *Processor) op1A43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b D3,A5\n", pc)
}

func (c *Processor) op1A44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b D4,A5\n", pc)
}

func (c *Processor) op1A45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b D5,A5\n", pc)
}

func (c *Processor) op1A46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b D6,A5\n", pc)
}

func (c *Processor) op1A47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b D7,A5\n", pc)
}

func (c *Processor) op1A48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b A0,A5\n", pc)
}

func (c *Processor) op1A49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b A1,A5\n", pc)
}

func (c *Processor) op1A4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b A2,A5\n", pc)
}

func (c *Processor) op1A4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b A3,A5\n", pc)
}

func (c *Processor) op1A4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b A4,A5\n", pc)
}

func (c *Processor) op1A4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b A5,A5\n", pc)
}

func (c *Processor) op1A4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b A6,A5\n", pc)
}

func (c *Processor) op1A4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b A7,A5\n", pc)
}

func (c *Processor) op1A50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b (A0),A5\n", pc)
}

func (c *Processor) op1A51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b (A1),A5\n", pc)
}

func (c *Processor) op1A52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b (A2),A5\n", pc)
}

func (c *Processor) op1A53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b (A3),A5\n", pc)
}

func (c *Processor) op1A54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b (A4),A5\n", pc)
}

func (c *Processor) op1A55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b (A5),A5\n", pc)
}

func (c *Processor) op1A56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b (A6),A5\n", pc)
}

func (c *Processor) op1A57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b (A7),A5\n", pc)
}

func (c *Processor) op1A78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b $%X,A5\n", pc, v)
}

func (c *Processor) op1A79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b $%X,A5\n", pc, v)
}

func (c *Processor) op1A7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.b #$%X,A5\n", pc, v)
}

func (c *Processor) op1A80() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b D0,(A5)\n", pc)
}

func (c *Processor) op1A81() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b D1,(A5)\n", pc)
}

func (c *Processor) op1A82() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b D2,(A5)\n", pc)
}

func (c *Processor) op1A83() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b D3,(A5)\n", pc)
}

func (c *Processor) op1A84() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b D4,(A5)\n", pc)
}

func (c *Processor) op1A85() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b D5,(A5)\n", pc)
}

func (c *Processor) op1A86() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b D6,(A5)\n", pc)
}

func (c *Processor) op1A87() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b D7,(A5)\n", pc)
}

func (c *Processor) op1A88() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b A0,(A5)\n", pc)
}

func (c *Processor) op1A89() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b A1,(A5)\n", pc)
}

func (c *Processor) op1A8A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b A2,(A5)\n", pc)
}

func (c *Processor) op1A8B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b A3,(A5)\n", pc)
}

func (c *Processor) op1A8C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b A4,(A5)\n", pc)
}

func (c *Processor) op1A8D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b A5,(A5)\n", pc)
}

func (c *Processor) op1A8E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b A6,(A5)\n", pc)
}

func (c *Processor) op1A8F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b A7,(A5)\n", pc)
}

func (c *Processor) op1A90() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b (A0),(A5)\n", pc)
}

func (c *Processor) op1A91() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b (A1),(A5)\n", pc)
}

func (c *Processor) op1A92() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b (A2),(A5)\n", pc)
}

func (c *Processor) op1A93() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b (A3),(A5)\n", pc)
}

func (c *Processor) op1A94() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b (A4),(A5)\n", pc)
}

func (c *Processor) op1A95() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b (A5),(A5)\n", pc)
}

func (c *Processor) op1A96() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b (A6),(A5)\n", pc)
}

func (c *Processor) op1A97() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b (A7),(A5)\n", pc)
}

func (c *Processor) op1AB8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b $%X,(A5)\n", pc, v)
}

func (c *Processor) op1AB9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b $%X,(A5)\n", pc, v)
}

func (c *Processor) op1ABC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b #$%X,(A5)\n", pc, v)
}

func (c *Processor) op1AC0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b D0,(A5)+\n", pc)
}

func (c *Processor) op1AC1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b D1,(A5)+\n", pc)
}

func (c *Processor) op1AC2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b D2,(A5)+\n", pc)
}

func (c *Processor) op1AC3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b D3,(A5)+\n", pc)
}

func (c *Processor) op1AC4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b D4,(A5)+\n", pc)
}

func (c *Processor) op1AC5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b D5,(A5)+\n", pc)
}

func (c *Processor) op1AC6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b D6,(A5)+\n", pc)
}

func (c *Processor) op1AC7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b D7,(A5)+\n", pc)
}

func (c *Processor) op1AC8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b A0,(A5)+\n", pc)
}

func (c *Processor) op1AC9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b A1,(A5)+\n", pc)
}

func (c *Processor) op1ACA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b A2,(A5)+\n", pc)
}

func (c *Processor) op1ACB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b A3,(A5)+\n", pc)
}

func (c *Processor) op1ACC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b A4,(A5)+\n", pc)
}

func (c *Processor) op1ACD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b A5,(A5)+\n", pc)
}

func (c *Processor) op1ACE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b A6,(A5)+\n", pc)
}

func (c *Processor) op1ACF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b A7,(A5)+\n", pc)
}

func (c *Processor) op1AD0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b (A0),(A5)+\n", pc)
}

func (c *Processor) op1AD1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b (A1),(A5)+\n", pc)
}

func (c *Processor) op1AD2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b (A2),(A5)+\n", pc)
}

func (c *Processor) op1AD3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b (A3),(A5)+\n", pc)
}

func (c *Processor) op1AD4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b (A4),(A5)+\n", pc)
}

func (c *Processor) op1AD5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b (A5),(A5)+\n", pc)
}

func (c *Processor) op1AD6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b (A6),(A5)+\n", pc)
}

func (c *Processor) op1AD7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b (A7),(A5)+\n", pc)
}

func (c *Processor) op1AF8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b $%X,(A5)+\n", pc, v)
}

func (c *Processor) op1AF9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b $%X,(A5)+\n", pc, v)
}

func (c *Processor) op1AFC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.b #$%X,(A5)+\n", pc, v)
}

func (c *Processor) op1B00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b D0,-(A5)\n", pc)
}

func (c *Processor) op1B01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b D1,-(A5)\n", pc)
}

func (c *Processor) op1B02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b D2,-(A5)\n", pc)
}

func (c *Processor) op1B03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b D3,-(A5)\n", pc)
}

func (c *Processor) op1B04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b D4,-(A5)\n", pc)
}

func (c *Processor) op1B05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b D5,-(A5)\n", pc)
}

func (c *Processor) op1B06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b D6,-(A5)\n", pc)
}

func (c *Processor) op1B07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b D7,-(A5)\n", pc)
}

func (c *Processor) op1B08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.b A0,-(A5)\n", pc)
}

func (c *Processor) op1B09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.b A1,-(A5)\n", pc)
}

func (c *Processor) op1B0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.b A2,-(A5)\n", pc)
}

func (c *Processor) op1B0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.b A3,-(A5)\n", pc)
}

func (c *Processor) op1B0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.b A4,-(A5)\n", pc)
}

func (c *Processor) op1B0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.b A5,-(A5)\n", pc)
}

func (c *Processor) op1B0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.b A6,-(A5)\n", pc)
}

func (c *Processor) op1B0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.b A7,-(A5)\n", pc)
}

func (c *Processor) op1B10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b (A0),-(A5)\n", pc)
}

func (c *Processor) op1B11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b (A1),-(A5)\n", pc)
}

func (c *Processor) op1B12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b (A2),-(A5)\n", pc)
}

func (c *Processor) op1B13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b (A3),-(A5)\n", pc)
}

func (c *Processor) op1B14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b (A4),-(A5)\n", pc)
}

func (c *Processor) op1B15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b (A5),-(A5)\n", pc)
}

func (c *Processor) op1B16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b (A6),-(A5)\n", pc)
}

func (c *Processor) op1B17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b (A7),-(A5)\n", pc)
}

func (c *Processor) op1B38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b $%X,-(A5)\n", pc, v)
}

func (c *Processor) op1B39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b $%X,-(A5)\n", pc, v)
}

func (c *Processor) op1B3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.b #$%X,-(A5)\n", pc, v)
}

func (c *Processor) op1B40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D0,(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D1,(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D2,(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D3,(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D4,(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D5,(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D6,(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D7,(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A0,(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A1,(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A2,(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A3,(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A4,(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A5,(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A6,(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A7,(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A0),(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A1),(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A2),(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A3),(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A4),(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A5),(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A6),(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A7),(%d,A5)\n", pc, disp)
}

func (c *Processor) op1B78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,(%d,A5)\n", pc, v, disp)
}

func (c *Processor) op1B79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,(%d,A5)\n", pc, v, disp)
}

func (c *Processor) op1B7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b #$%X,(%d,A5)\n", pc, v, disp)
}

func (c *Processor) op1C00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b D0,D6\n", pc)
}

func (c *Processor) op1C01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b D1,D6\n", pc)
}

func (c *Processor) op1C02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b D2,D6\n", pc)
}

func (c *Processor) op1C03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b D3,D6\n", pc)
}

func (c *Processor) op1C04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b D4,D6\n", pc)
}

func (c *Processor) op1C05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b D5,D6\n", pc)
}

func (c *Processor) op1C06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b D6,D6\n", pc)
}

func (c *Processor) op1C07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b D7,D6\n", pc)
}

func (c *Processor) op1C08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b A0,D6\n", pc)
}

func (c *Processor) op1C09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b A1,D6\n", pc)
}

func (c *Processor) op1C0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b A2,D6\n", pc)
}

func (c *Processor) op1C0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b A3,D6\n", pc)
}

func (c *Processor) op1C0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b A4,D6\n", pc)
}

func (c *Processor) op1C0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b A5,D6\n", pc)
}

func (c *Processor) op1C0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b A6,D6\n", pc)
}

func (c *Processor) op1C0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b A7,D6\n", pc)
}

func (c *Processor) op1C10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b (A0),D6\n", pc)
}

func (c *Processor) op1C11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b (A1),D6\n", pc)
}

func (c *Processor) op1C12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b (A2),D6\n", pc)
}

func (c *Processor) op1C13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b (A3),D6\n", pc)
}

func (c *Processor) op1C14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b (A4),D6\n", pc)
}

func (c *Processor) op1C15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b (A5),D6\n", pc)
}

func (c *Processor) op1C16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b (A6),D6\n", pc)
}

func (c *Processor) op1C17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b (A7),D6\n", pc)
}

func (c *Processor) op1C38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b $%X,D6\n", pc, v)
}

func (c *Processor) op1C39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b $%X,D6\n", pc, v)
}

func (c *Processor) op1C3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[6] = uint32(v)
	c.tracef("%04X move.b #$%X,D6\n", pc, v)
}

func (c *Processor) op1C40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b D0,A6\n", pc)
}

func (c *Processor) op1C41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b D1,A6\n", pc)
}

func (c *Processor) op1C42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b D2,A6\n", pc)
}

func (c *Processor) op1C43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b D3,A6\n", pc)
}

func (c *Processor) op1C44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b D4,A6\n", pc)
}

func (c *Processor) op1C45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b D5,A6\n", pc)
}

func (c *Processor) op1C46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b D6,A6\n", pc)
}

func (c *Processor) op1C47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b D7,A6\n", pc)
}

func (c *Processor) op1C48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b A0,A6\n", pc)
}

func (c *Processor) op1C49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b A1,A6\n", pc)
}

func (c *Processor) op1C4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b A2,A6\n", pc)
}

func (c *Processor) op1C4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b A3,A6\n", pc)
}

func (c *Processor) op1C4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b A4,A6\n", pc)
}

func (c *Processor) op1C4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b A5,A6\n", pc)
}

func (c *Processor) op1C4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b A6,A6\n", pc)
}

func (c *Processor) op1C4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b A7,A6\n", pc)
}

func (c *Processor) op1C50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b (A0),A6\n", pc)
}

func (c *Processor) op1C51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b (A1),A6\n", pc)
}

func (c *Processor) op1C52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b (A2),A6\n", pc)
}

func (c *Processor) op1C53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b (A3),A6\n", pc)
}

func (c *Processor) op1C54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b (A4),A6\n", pc)
}

func (c *Processor) op1C55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b (A5),A6\n", pc)
}

func (c *Processor) op1C56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b (A6),A6\n", pc)
}

func (c *Processor) op1C57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b (A7),A6\n", pc)
}

func (c *Processor) op1C78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b $%X,A6\n", pc, v)
}

func (c *Processor) op1C79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b $%X,A6\n", pc, v)
}

func (c *Processor) op1C7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.b #$%X,A6\n", pc, v)
}

func (c *Processor) op1C80() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b D0,(A6)\n", pc)
}

func (c *Processor) op1C81() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b D1,(A6)\n", pc)
}

func (c *Processor) op1C82() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b D2,(A6)\n", pc)
}

func (c *Processor) op1C83() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b D3,(A6)\n", pc)
}

func (c *Processor) op1C84() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b D4,(A6)\n", pc)
}

func (c *Processor) op1C85() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b D5,(A6)\n", pc)
}

func (c *Processor) op1C86() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b D6,(A6)\n", pc)
}

func (c *Processor) op1C87() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b D7,(A6)\n", pc)
}

func (c *Processor) op1C88() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b A0,(A6)\n", pc)
}

func (c *Processor) op1C89() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b A1,(A6)\n", pc)
}

func (c *Processor) op1C8A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b A2,(A6)\n", pc)
}

func (c *Processor) op1C8B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b A3,(A6)\n", pc)
}

func (c *Processor) op1C8C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b A4,(A6)\n", pc)
}

func (c *Processor) op1C8D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b A5,(A6)\n", pc)
}

func (c *Processor) op1C8E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b A6,(A6)\n", pc)
}

func (c *Processor) op1C8F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b A7,(A6)\n", pc)
}

func (c *Processor) op1C90() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b (A0),(A6)\n", pc)
}

func (c *Processor) op1C91() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b (A1),(A6)\n", pc)
}

func (c *Processor) op1C92() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b (A2),(A6)\n", pc)
}

func (c *Processor) op1C93() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b (A3),(A6)\n", pc)
}

func (c *Processor) op1C94() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b (A4),(A6)\n", pc)
}

func (c *Processor) op1C95() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b (A5),(A6)\n", pc)
}

func (c *Processor) op1C96() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b (A6),(A6)\n", pc)
}

func (c *Processor) op1C97() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b (A7),(A6)\n", pc)
}

func (c *Processor) op1CB8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b $%X,(A6)\n", pc, v)
}

func (c *Processor) op1CB9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b $%X,(A6)\n", pc, v)
}

func (c *Processor) op1CBC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b #$%X,(A6)\n", pc, v)
}

func (c *Processor) op1CC0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b D0,(A6)+\n", pc)
}

func (c *Processor) op1CC1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b D1,(A6)+\n", pc)
}

func (c *Processor) op1CC2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b D2,(A6)+\n", pc)
}

func (c *Processor) op1CC3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b D3,(A6)+\n", pc)
}

func (c *Processor) op1CC4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b D4,(A6)+\n", pc)
}

func (c *Processor) op1CC5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b D5,(A6)+\n", pc)
}

func (c *Processor) op1CC6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b D6,(A6)+\n", pc)
}

func (c *Processor) op1CC7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b D7,(A6)+\n", pc)
}

func (c *Processor) op1CC8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b A0,(A6)+\n", pc)
}

func (c *Processor) op1CC9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b A1,(A6)+\n", pc)
}

func (c *Processor) op1CCA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b A2,(A6)+\n", pc)
}

func (c *Processor) op1CCB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b A3,(A6)+\n", pc)
}

func (c *Processor) op1CCC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b A4,(A6)+\n", pc)
}

func (c *Processor) op1CCD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b A5,(A6)+\n", pc)
}

func (c *Processor) op1CCE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b A6,(A6)+\n", pc)
}

func (c *Processor) op1CCF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b A7,(A6)+\n", pc)
}

func (c *Processor) op1CD0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b (A0),(A6)+\n", pc)
}

func (c *Processor) op1CD1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b (A1),(A6)+\n", pc)
}

func (c *Processor) op1CD2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b (A2),(A6)+\n", pc)
}

func (c *Processor) op1CD3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b (A3),(A6)+\n", pc)
}

func (c *Processor) op1CD4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b (A4),(A6)+\n", pc)
}

func (c *Processor) op1CD5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b (A5),(A6)+\n", pc)
}

func (c *Processor) op1CD6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b (A6),(A6)+\n", pc)
}

func (c *Processor) op1CD7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b (A7),(A6)+\n", pc)
}

func (c *Processor) op1CF8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b $%X,(A6)+\n", pc, v)
}

func (c *Processor) op1CF9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b $%X,(A6)+\n", pc, v)
}

func (c *Processor) op1CFC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.b #$%X,(A6)+\n", pc, v)
}

func (c *Processor) op1D00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b D0,-(A6)\n", pc)
}

func (c *Processor) op1D01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b D1,-(A6)\n", pc)
}

func (c *Processor) op1D02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b D2,-(A6)\n", pc)
}

func (c *Processor) op1D03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b D3,-(A6)\n", pc)
}

func (c *Processor) op1D04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b D4,-(A6)\n", pc)
}

func (c *Processor) op1D05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b D5,-(A6)\n", pc)
}

func (c *Processor) op1D06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b D6,-(A6)\n", pc)
}

func (c *Processor) op1D07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b D7,-(A6)\n", pc)
}

func (c *Processor) op1D08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.b A0,-(A6)\n", pc)
}

func (c *Processor) op1D09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.b A1,-(A6)\n", pc)
}

func (c *Processor) op1D0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.b A2,-(A6)\n", pc)
}

func (c *Processor) op1D0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.b A3,-(A6)\n", pc)
}

func (c *Processor) op1D0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.b A4,-(A6)\n", pc)
}

func (c *Processor) op1D0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.b A5,-(A6)\n", pc)
}

func (c *Processor) op1D0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.b A6,-(A6)\n", pc)
}

func (c *Processor) op1D0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.b A7,-(A6)\n", pc)
}

func (c *Processor) op1D10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b (A0),-(A6)\n", pc)
}

func (c *Processor) op1D11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b (A1),-(A6)\n", pc)
}

func (c *Processor) op1D12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b (A2),-(A6)\n", pc)
}

func (c *Processor) op1D13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b (A3),-(A6)\n", pc)
}

func (c *Processor) op1D14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b (A4),-(A6)\n", pc)
}

func (c *Processor) op1D15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b (A5),-(A6)\n", pc)
}

func (c *Processor) op1D16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b (A6),-(A6)\n", pc)
}

func (c *Processor) op1D17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b (A7),-(A6)\n", pc)
}

func (c *Processor) op1D38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b $%X,-(A6)\n", pc, v)
}

func (c *Processor) op1D39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b $%X,-(A6)\n", pc, v)
}

func (c *Processor) op1D3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.b #$%X,-(A6)\n", pc, v)
}

func (c *Processor) op1D40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D0,(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D1,(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D2,(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D3,(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D4,(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D5,(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D6,(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D7,(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A0,(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A1,(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A2,(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A3,(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A4,(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A5,(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A6,(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A7,(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A0),(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A1),(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A2),(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A3),(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A4),(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A5),(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A6),(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A7),(%d,A6)\n", pc, disp)
}

func (c *Processor) op1D78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,(%d,A6)\n", pc, v, disp)
}

func (c *Processor) op1D79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,(%d,A6)\n", pc, v, disp)
}

func (c *Processor) op1D7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b #$%X,(%d,A6)\n", pc, v, disp)
}

func (c *Processor) op1E00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b D0,D7\n", pc)
}

func (c *Processor) op1E01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b D1,D7\n", pc)
}

func (c *Processor) op1E02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b D2,D7\n", pc)
}

func (c *Processor) op1E03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b D3,D7\n", pc)
}

func (c *Processor) op1E04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b D4,D7\n", pc)
}

func (c *Processor) op1E05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b D5,D7\n", pc)
}

func (c *Processor) op1E06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b D6,D7\n", pc)
}

func (c *Processor) op1E07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b D7,D7\n", pc)
}

func (c *Processor) op1E08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b A0,D7\n", pc)
}

func (c *Processor) op1E09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b A1,D7\n", pc)
}

func (c *Processor) op1E0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b A2,D7\n", pc)
}

func (c *Processor) op1E0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b A3,D7\n", pc)
}

func (c *Processor) op1E0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b A4,D7\n", pc)
}

func (c *Processor) op1E0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b A5,D7\n", pc)
}

func (c *Processor) op1E0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b A6,D7\n", pc)
}

func (c *Processor) op1E0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b A7,D7\n", pc)
}

func (c *Processor) op1E10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b (A0),D7\n", pc)
}

func (c *Processor) op1E11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b (A1),D7\n", pc)
}

func (c *Processor) op1E12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b (A2),D7\n", pc)
}

func (c *Processor) op1E13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b (A3),D7\n", pc)
}

func (c *Processor) op1E14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b (A4),D7\n", pc)
}

func (c *Processor) op1E15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b (A5),D7\n", pc)
}

func (c *Processor) op1E16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b (A6),D7\n", pc)
}

func (c *Processor) op1E17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b (A7),D7\n", pc)
}

func (c *Processor) op1E38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b $%X,D7\n", pc, v)
}

func (c *Processor) op1E39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b $%X,D7\n", pc, v)
}

func (c *Processor) op1E3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.D[7] = uint32(v)
	c.tracef("%04X move.b #$%X,D7\n", pc, v)
}

func (c *Processor) op1E40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b D0,A7\n", pc)
}

func (c *Processor) op1E41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b D1,A7\n", pc)
}

func (c *Processor) op1E42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b D2,A7\n", pc)
}

func (c *Processor) op1E43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b D3,A7\n", pc)
}

func (c *Processor) op1E44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b D4,A7\n", pc)
}

func (c *Processor) op1E45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b D5,A7\n", pc)
}

func (c *Processor) op1E46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b D6,A7\n", pc)
}

func (c *Processor) op1E47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b D7,A7\n", pc)
}

func (c *Processor) op1E48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b A0,A7\n", pc)
}

func (c *Processor) op1E49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b A1,A7\n", pc)
}

func (c *Processor) op1E4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b A2,A7\n", pc)
}

func (c *Processor) op1E4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b A3,A7\n", pc)
}

func (c *Processor) op1E4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b A4,A7\n", pc)
}

func (c *Processor) op1E4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b A5,A7\n", pc)
}

func (c *Processor) op1E4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b A6,A7\n", pc)
}

func (c *Processor) op1E4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b A7,A7\n", pc)
}

func (c *Processor) op1E50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b (A0),A7\n", pc)
}

func (c *Processor) op1E51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b (A1),A7\n", pc)
}

func (c *Processor) op1E52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b (A2),A7\n", pc)
}

func (c *Processor) op1E53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b (A3),A7\n", pc)
}

func (c *Processor) op1E54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b (A4),A7\n", pc)
}

func (c *Processor) op1E55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b (A5),A7\n", pc)
}

func (c *Processor) op1E56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b (A6),A7\n", pc)
}

func (c *Processor) op1E57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b (A7),A7\n", pc)
}

func (c *Processor) op1E78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b $%X,A7\n", pc, v)
}

func (c *Processor) op1E79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b $%X,A7\n", pc, v)
}

func (c *Processor) op1E7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.b #$%X,A7\n", pc, v)
}

func (c *Processor) op1E80() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b D0,(A7)\n", pc)
}

func (c *Processor) op1E81() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b D1,(A7)\n", pc)
}

func (c *Processor) op1E82() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b D2,(A7)\n", pc)
}

func (c *Processor) op1E83() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b D3,(A7)\n", pc)
}

func (c *Processor) op1E84() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b D4,(A7)\n", pc)
}

func (c *Processor) op1E85() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b D5,(A7)\n", pc)
}

func (c *Processor) op1E86() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b D6,(A7)\n", pc)
}

func (c *Processor) op1E87() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b D7,(A7)\n", pc)
}

func (c *Processor) op1E88() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b A0,(A7)\n", pc)
}

func (c *Processor) op1E89() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b A1,(A7)\n", pc)
}

func (c *Processor) op1E8A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b A2,(A7)\n", pc)
}

func (c *Processor) op1E8B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b A3,(A7)\n", pc)
}

func (c *Processor) op1E8C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b A4,(A7)\n", pc)
}

func (c *Processor) op1E8D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b A5,(A7)\n", pc)
}

func (c *Processor) op1E8E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b A6,(A7)\n", pc)
}

func (c *Processor) op1E8F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b A7,(A7)\n", pc)
}

func (c *Processor) op1E90() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b (A0),(A7)\n", pc)
}

func (c *Processor) op1E91() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b (A1),(A7)\n", pc)
}

func (c *Processor) op1E92() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b (A2),(A7)\n", pc)
}

func (c *Processor) op1E93() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b (A3),(A7)\n", pc)
}

func (c *Processor) op1E94() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b (A4),(A7)\n", pc)
}

func (c *Processor) op1E95() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b (A5),(A7)\n", pc)
}

func (c *Processor) op1E96() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b (A6),(A7)\n", pc)
}

func (c *Processor) op1E97() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b (A7),(A7)\n", pc)
}

func (c *Processor) op1EB8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b $%X,(A7)\n", pc, v)
}

func (c *Processor) op1EB9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b $%X,(A7)\n", pc, v)
}

func (c *Processor) op1EBC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b #$%X,(A7)\n", pc, v)
}

func (c *Processor) op1EC0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b D0,(A7)+\n", pc)
}

func (c *Processor) op1EC1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b D1,(A7)+\n", pc)
}

func (c *Processor) op1EC2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b D2,(A7)+\n", pc)
}

func (c *Processor) op1EC3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b D3,(A7)+\n", pc)
}

func (c *Processor) op1EC4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b D4,(A7)+\n", pc)
}

func (c *Processor) op1EC5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b D5,(A7)+\n", pc)
}

func (c *Processor) op1EC6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b D6,(A7)+\n", pc)
}

func (c *Processor) op1EC7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b D7,(A7)+\n", pc)
}

func (c *Processor) op1EC8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b A0,(A7)+\n", pc)
}

func (c *Processor) op1EC9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b A1,(A7)+\n", pc)
}

func (c *Processor) op1ECA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b A2,(A7)+\n", pc)
}

func (c *Processor) op1ECB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b A3,(A7)+\n", pc)
}

func (c *Processor) op1ECC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b A4,(A7)+\n", pc)
}

func (c *Processor) op1ECD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b A5,(A7)+\n", pc)
}

func (c *Processor) op1ECE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b A6,(A7)+\n", pc)
}

func (c *Processor) op1ECF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b A7,(A7)+\n", pc)
}

func (c *Processor) op1ED0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b (A0),(A7)+\n", pc)
}

func (c *Processor) op1ED1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b (A1),(A7)+\n", pc)
}

func (c *Processor) op1ED2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b (A2),(A7)+\n", pc)
}

func (c *Processor) op1ED3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b (A3),(A7)+\n", pc)
}

func (c *Processor) op1ED4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b (A4),(A7)+\n", pc)
}

func (c *Processor) op1ED5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b (A5),(A7)+\n", pc)
}

func (c *Processor) op1ED6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b (A6),(A7)+\n", pc)
}

func (c *Processor) op1ED7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b (A7),(A7)+\n", pc)
}

func (c *Processor) op1EF8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b $%X,(A7)+\n", pc, v)
}

func (c *Processor) op1EF9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b $%X,(A7)+\n", pc, v)
}

func (c *Processor) op1EFC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.b #$%X,(A7)+\n", pc, v)
}

func (c *Processor) op1F00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b D0,-(A7)\n", pc)
}

func (c *Processor) op1F01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b D1,-(A7)\n", pc)
}

func (c *Processor) op1F02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b D2,-(A7)\n", pc)
}

func (c *Processor) op1F03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b D3,-(A7)\n", pc)
}

func (c *Processor) op1F04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b D4,-(A7)\n", pc)
}

func (c *Processor) op1F05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b D5,-(A7)\n", pc)
}

func (c *Processor) op1F06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b D6,-(A7)\n", pc)
}

func (c *Processor) op1F07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b D7,-(A7)\n", pc)
}

func (c *Processor) op1F08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.b A0,-(A7)\n", pc)
}

func (c *Processor) op1F09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.b A1,-(A7)\n", pc)
}

func (c *Processor) op1F0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.b A2,-(A7)\n", pc)
}

func (c *Processor) op1F0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.b A3,-(A7)\n", pc)
}

func (c *Processor) op1F0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.b A4,-(A7)\n", pc)
}

func (c *Processor) op1F0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.b A5,-(A7)\n", pc)
}

func (c *Processor) op1F0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.b A6,-(A7)\n", pc)
}

func (c *Processor) op1F0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.b A7,-(A7)\n", pc)
}

func (c *Processor) op1F10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b (A0),-(A7)\n", pc)
}

func (c *Processor) op1F11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b (A1),-(A7)\n", pc)
}

func (c *Processor) op1F12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b (A2),-(A7)\n", pc)
}

func (c *Processor) op1F13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b (A3),-(A7)\n", pc)
}

func (c *Processor) op1F14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b (A4),-(A7)\n", pc)
}

func (c *Processor) op1F15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b (A5),-(A7)\n", pc)
}

func (c *Processor) op1F16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b (A6),-(A7)\n", pc)
}

func (c *Processor) op1F17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b (A7),-(A7)\n", pc)
}

func (c *Processor) op1F38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b $%X,-(A7)\n", pc, v)
}

func (c *Processor) op1F39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b $%X,-(A7)\n", pc, v)
}

func (c *Processor) op1F3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.b #$%X,-(A7)\n", pc, v)
}

func (c *Processor) op1F40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D0,(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D1,(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D2,(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D3,(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D4,(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D5,(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D6,(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b D7,(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A0,(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A1,(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A2,(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A3,(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A4,(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A5,(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A6,(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.b A7,(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A0),(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A1),(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A2),(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A3),(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A4),(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A5),(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A6),(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:1])
	if c.err != nil {
		return
	}
	v := c.buf[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b (A7),(%d,A7)\n", pc, disp)
}

func (c *Processor) op1F78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,(%d,A7)\n", pc, v, disp)
}

func (c *Processor) op1F79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b $%X,(%d,A7)\n", pc, v, disp)
}

func (c *Processor) op1F7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := c.buf[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.b #$%X,(%d,A7)\n", pc, v, disp)
}

func (c *Processor) op2000() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[0] = uint32(v)
	c.tracef("%04X move.l D0,D0\n", pc)
}

func (c *Processor) op2001() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[0] = uint32(v)
	c.tracef("%04X move.l D1,D0\n", pc)
}

func (c *Processor) op2002() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[0] = uint32(v)
	c.tracef("%04X move.l D2,D0\n", pc)
}

func (c *Processor) op2003() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[0] = uint32(v)
	c.tracef("%04X move.l D3,D0\n", pc)
}

func (c *Processor) op2004() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[0] = uint32(v)
	c.tracef("%04X move.l D4,D0\n", pc)
}

func (c *Processor) op2005() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[0] = uint32(v)
	c.tracef("%04X move.l D5,D0\n", pc)
}

func (c *Processor) op2006() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[0] = uint32(v)
	c.tracef("%04X move.l D6,D0\n", pc)
}

func (c *Processor) op2007() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[0] = uint32(v)
	c.tracef("%04X move.l D7,D0\n", pc)
}

func (c *Processor) op2008() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[0] = uint32(v)
	c.tracef("%04X move.l A0,D0\n", pc)
}

func (c *Processor) op2009() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[0] = uint32(v)
	c.tracef("%04X move.l A1,D0\n", pc)
}

func (c *Processor) op200A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[0] = uint32(v)
	c.tracef("%04X move.l A2,D0\n", pc)
}

func (c *Processor) op200B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[0] = uint32(v)
	c.tracef("%04X move.l A3,D0\n", pc)
}

func (c *Processor) op200C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[0] = uint32(v)
	c.tracef("%04X move.l A4,D0\n", pc)
}

func (c *Processor) op200D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[0] = uint32(v)
	c.tracef("%04X move.l A5,D0\n", pc)
}

func (c *Processor) op200E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[0] = uint32(v)
	c.tracef("%04X move.l A6,D0\n", pc)
}

func (c *Processor) op200F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[0] = uint32(v)
	c.tracef("%04X move.l A7,D0\n", pc)
}

func (c *Processor) op2010() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[0] = uint32(v)
	c.tracef("%04X move.l (A0),D0\n", pc)
}

func (c *Processor) op2011() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[0] = uint32(v)
	c.tracef("%04X move.l (A1),D0\n", pc)
}

func (c *Processor) op2012() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[0] = uint32(v)
	c.tracef("%04X move.l (A2),D0\n", pc)
}

func (c *Processor) op2013() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[0] = uint32(v)
	c.tracef("%04X move.l (A3),D0\n", pc)
}

func (c *Processor) op2014() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[0] = uint32(v)
	c.tracef("%04X move.l (A4),D0\n", pc)
}

func (c *Processor) op2015() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[0] = uint32(v)
	c.tracef("%04X move.l (A5),D0\n", pc)
}

func (c *Processor) op2016() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[0] = uint32(v)
	c.tracef("%04X move.l (A6),D0\n", pc)
}

func (c *Processor) op2017() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[0] = uint32(v)
	c.tracef("%04X move.l (A7),D0\n", pc)
}

func (c *Processor) op2038() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[0] = uint32(v)
	c.tracef("%04X move.l $%X,D0\n", pc, v)
}

func (c *Processor) op2039() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[0] = uint32(v)
	c.tracef("%04X move.l $%X,D0\n", pc, v)
}

func (c *Processor) op203C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[0] = uint32(v)
	c.tracef("%04X move.l #$%X,D0\n", pc, v)
}

func (c *Processor) op2040() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l D0,A0\n", pc)
}

func (c *Processor) op2041() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l D1,A0\n", pc)
}

func (c *Processor) op2042() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l D2,A0\n", pc)
}

func (c *Processor) op2043() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l D3,A0\n", pc)
}

func (c *Processor) op2044() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l D4,A0\n", pc)
}

func (c *Processor) op2045() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l D5,A0\n", pc)
}

func (c *Processor) op2046() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l D6,A0\n", pc)
}

func (c *Processor) op2047() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l D7,A0\n", pc)
}

func (c *Processor) op2048() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l A0,A0\n", pc)
}

func (c *Processor) op2049() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l A1,A0\n", pc)
}

func (c *Processor) op204A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l A2,A0\n", pc)
}

func (c *Processor) op204B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l A3,A0\n", pc)
}

func (c *Processor) op204C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l A4,A0\n", pc)
}

func (c *Processor) op204D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l A5,A0\n", pc)
}

func (c *Processor) op204E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l A6,A0\n", pc)
}

func (c *Processor) op204F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l A7,A0\n", pc)
}

func (c *Processor) op2050() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l (A0),A0\n", pc)
}

func (c *Processor) op2051() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l (A1),A0\n", pc)
}

func (c *Processor) op2052() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l (A2),A0\n", pc)
}

func (c *Processor) op2053() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l (A3),A0\n", pc)
}

func (c *Processor) op2054() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l (A4),A0\n", pc)
}

func (c *Processor) op2055() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l (A5),A0\n", pc)
}

func (c *Processor) op2056() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l (A6),A0\n", pc)
}

func (c *Processor) op2057() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l (A7),A0\n", pc)
}

func (c *Processor) op2078() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l $%X,A0\n", pc, v)
}

func (c *Processor) op2079() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l $%X,A0\n", pc, v)
}

func (c *Processor) op207C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[0] = uint32(v)
	c.tracef("%04X movea.l #$%X,A0\n", pc, v)
}

func (c *Processor) op2080() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l D0,(A0)\n", pc)
}

func (c *Processor) op2081() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l D1,(A0)\n", pc)
}

func (c *Processor) op2082() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l D2,(A0)\n", pc)
}

func (c *Processor) op2083() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l D3,(A0)\n", pc)
}

func (c *Processor) op2084() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l D4,(A0)\n", pc)
}

func (c *Processor) op2085() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l D5,(A0)\n", pc)
}

func (c *Processor) op2086() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l D6,(A0)\n", pc)
}

func (c *Processor) op2087() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l D7,(A0)\n", pc)
}

func (c *Processor) op2088() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l A0,(A0)\n", pc)
}

func (c *Processor) op2089() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l A1,(A0)\n", pc)
}

func (c *Processor) op208A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l A2,(A0)\n", pc)
}

func (c *Processor) op208B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l A3,(A0)\n", pc)
}

func (c *Processor) op208C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l A4,(A0)\n", pc)
}

func (c *Processor) op208D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l A5,(A0)\n", pc)
}

func (c *Processor) op208E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l A6,(A0)\n", pc)
}

func (c *Processor) op208F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l A7,(A0)\n", pc)
}

func (c *Processor) op2090() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l (A0),(A0)\n", pc)
}

func (c *Processor) op2091() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l (A1),(A0)\n", pc)
}

func (c *Processor) op2092() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l (A2),(A0)\n", pc)
}

func (c *Processor) op2093() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l (A3),(A0)\n", pc)
}

func (c *Processor) op2094() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l (A4),(A0)\n", pc)
}

func (c *Processor) op2095() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l (A5),(A0)\n", pc)
}

func (c *Processor) op2096() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l (A6),(A0)\n", pc)
}

func (c *Processor) op2097() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l (A7),(A0)\n", pc)
}

func (c *Processor) op20B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l $%X,(A0)\n", pc, v)
}

func (c *Processor) op20B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l $%X,(A0)\n", pc, v)
}

func (c *Processor) op20BC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l #$%X,(A0)\n", pc, v)
}

func (c *Processor) op20C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l D0,(A0)+\n", pc)
}

func (c *Processor) op20C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l D1,(A0)+\n", pc)
}

func (c *Processor) op20C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l D2,(A0)+\n", pc)
}

func (c *Processor) op20C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l D3,(A0)+\n", pc)
}

func (c *Processor) op20C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l D4,(A0)+\n", pc)
}

func (c *Processor) op20C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l D5,(A0)+\n", pc)
}

func (c *Processor) op20C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l D6,(A0)+\n", pc)
}

func (c *Processor) op20C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l D7,(A0)+\n", pc)
}

func (c *Processor) op20C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l A0,(A0)+\n", pc)
}

func (c *Processor) op20C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l A1,(A0)+\n", pc)
}

func (c *Processor) op20CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l A2,(A0)+\n", pc)
}

func (c *Processor) op20CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l A3,(A0)+\n", pc)
}

func (c *Processor) op20CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l A4,(A0)+\n", pc)
}

func (c *Processor) op20CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l A5,(A0)+\n", pc)
}

func (c *Processor) op20CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l A6,(A0)+\n", pc)
}

func (c *Processor) op20CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l A7,(A0)+\n", pc)
}

func (c *Processor) op20D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l (A0),(A0)+\n", pc)
}

func (c *Processor) op20D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l (A1),(A0)+\n", pc)
}

func (c *Processor) op20D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l (A2),(A0)+\n", pc)
}

func (c *Processor) op20D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l (A3),(A0)+\n", pc)
}

func (c *Processor) op20D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l (A4),(A0)+\n", pc)
}

func (c *Processor) op20D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l (A5),(A0)+\n", pc)
}

func (c *Processor) op20D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l (A6),(A0)+\n", pc)
}

func (c *Processor) op20D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l (A7),(A0)+\n", pc)
}

func (c *Processor) op20F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l $%X,(A0)+\n", pc, v)
}

func (c *Processor) op20F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l $%X,(A0)+\n", pc, v)
}

func (c *Processor) op20FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.l #$%X,(A0)+\n", pc, v)
}

func (c *Processor) op2100() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l D0,-(A0)\n", pc)
}

func (c *Processor) op2101() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l D1,-(A0)\n", pc)
}

func (c *Processor) op2102() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l D2,-(A0)\n", pc)
}

func (c *Processor) op2103() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l D3,-(A0)\n", pc)
}

func (c *Processor) op2104() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l D4,-(A0)\n", pc)
}

func (c *Processor) op2105() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l D5,-(A0)\n", pc)
}

func (c *Processor) op2106() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l D6,-(A0)\n", pc)
}

func (c *Processor) op2107() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l D7,-(A0)\n", pc)
}

func (c *Processor) op2108() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.l A0,-(A0)\n", pc)
}

func (c *Processor) op2109() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.l A1,-(A0)\n", pc)
}

func (c *Processor) op210A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.l A2,-(A0)\n", pc)
}

func (c *Processor) op210B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.l A3,-(A0)\n", pc)
}

func (c *Processor) op210C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.l A4,-(A0)\n", pc)
}

func (c *Processor) op210D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.l A5,-(A0)\n", pc)
}

func (c *Processor) op210E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.l A6,-(A0)\n", pc)
}

func (c *Processor) op210F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.l A7,-(A0)\n", pc)
}

func (c *Processor) op2110() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l (A0),-(A0)\n", pc)
}

func (c *Processor) op2111() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l (A1),-(A0)\n", pc)
}

func (c *Processor) op2112() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l (A2),-(A0)\n", pc)
}

func (c *Processor) op2113() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l (A3),-(A0)\n", pc)
}

func (c *Processor) op2114() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l (A4),-(A0)\n", pc)
}

func (c *Processor) op2115() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l (A5),-(A0)\n", pc)
}

func (c *Processor) op2116() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l (A6),-(A0)\n", pc)
}

func (c *Processor) op2117() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l (A7),-(A0)\n", pc)
}

func (c *Processor) op2138() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l $%X,-(A0)\n", pc, v)
}

func (c *Processor) op2139() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l $%X,-(A0)\n", pc, v)
}

func (c *Processor) op213C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.l #$%X,-(A0)\n", pc, v)
}

func (c *Processor) op2140() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D0,(%d,A0)\n", pc, disp)
}

func (c *Processor) op2141() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D1,(%d,A0)\n", pc, disp)
}

func (c *Processor) op2142() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D2,(%d,A0)\n", pc, disp)
}

func (c *Processor) op2143() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D3,(%d,A0)\n", pc, disp)
}

func (c *Processor) op2144() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D4,(%d,A0)\n", pc, disp)
}

func (c *Processor) op2145() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D5,(%d,A0)\n", pc, disp)
}

func (c *Processor) op2146() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D6,(%d,A0)\n", pc, disp)
}

func (c *Processor) op2147() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D7,(%d,A0)\n", pc, disp)
}

func (c *Processor) op2148() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A0,(%d,A0)\n", pc, disp)
}

func (c *Processor) op2149() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A1,(%d,A0)\n", pc, disp)
}

func (c *Processor) op214A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A2,(%d,A0)\n", pc, disp)
}

func (c *Processor) op214B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A3,(%d,A0)\n", pc, disp)
}

func (c *Processor) op214C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A4,(%d,A0)\n", pc, disp)
}

func (c *Processor) op214D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A5,(%d,A0)\n", pc, disp)
}

func (c *Processor) op214E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A6,(%d,A0)\n", pc, disp)
}

func (c *Processor) op214F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A7,(%d,A0)\n", pc, disp)
}

func (c *Processor) op2150() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A0),(%d,A0)\n", pc, disp)
}

func (c *Processor) op2151() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A1),(%d,A0)\n", pc, disp)
}

func (c *Processor) op2152() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A2),(%d,A0)\n", pc, disp)
}

func (c *Processor) op2153() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A3),(%d,A0)\n", pc, disp)
}

func (c *Processor) op2154() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A4),(%d,A0)\n", pc, disp)
}

func (c *Processor) op2155() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A5),(%d,A0)\n", pc, disp)
}

func (c *Processor) op2156() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A6),(%d,A0)\n", pc, disp)
}

func (c *Processor) op2157() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A7),(%d,A0)\n", pc, disp)
}

func (c *Processor) op2178() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,(%d,A0)\n", pc, v, disp)
}

func (c *Processor) op2179() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,(%d,A0)\n", pc, v, disp)
}

func (c *Processor) op217C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l #$%X,(%d,A0)\n", pc, v, disp)
}

func (c *Processor) op21C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l D0,$%X\n", pc, addr)
}

func (c *Processor) op21C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l D1,$%X\n", pc, addr)
}

func (c *Processor) op21C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l D2,$%X\n", pc, addr)
}

func (c *Processor) op21C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l D3,$%X\n", pc, addr)
}

func (c *Processor) op21C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l D4,$%X\n", pc, addr)
}

func (c *Processor) op21C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l D5,$%X\n", pc, addr)
}

func (c *Processor) op21C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l D6,$%X\n", pc, addr)
}

func (c *Processor) op21C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l D7,$%X\n", pc, addr)
}

func (c *Processor) op21C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.l A0,$%X\n", pc, addr)
}

func (c *Processor) op21C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.l A1,$%X\n", pc, addr)
}

func (c *Processor) op21CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.l A2,$%X\n", pc, addr)
}

func (c *Processor) op21CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.l A3,$%X\n", pc, addr)
}

func (c *Processor) op21CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.l A4,$%X\n", pc, addr)
}

func (c *Processor) op21CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.l A5,$%X\n", pc, addr)
}

func (c *Processor) op21CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.l A6,$%X\n", pc, addr)
}

func (c *Processor) op21CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.l A7,$%X\n", pc, addr)
}

func (c *Processor) op21D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l (A0),$%X\n", pc, addr)
}

func (c *Processor) op21D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l (A1),$%X\n", pc, addr)
}

func (c *Processor) op21D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l (A2),$%X\n", pc, addr)
}

func (c *Processor) op21D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l (A3),$%X\n", pc, addr)
}

func (c *Processor) op21D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l (A4),$%X\n", pc, addr)
}

func (c *Processor) op21D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l (A5),$%X\n", pc, addr)
}

func (c *Processor) op21D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l (A6),$%X\n", pc, addr)
}

func (c *Processor) op21D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l (A7),$%X\n", pc, addr)
}

func (c *Processor) op21F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l $%X,$%X\n", pc, v, addr)
}

func (c *Processor) op21F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l $%X,$%X\n", pc, v, addr)
}

func (c *Processor) op21FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.l #$%X,$%X\n", pc, v, addr)
}

func (c *Processor) op2200() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[1] = uint32(v)
	c.tracef("%04X move.l D0,D1\n", pc)
}

func (c *Processor) op2201() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[1] = uint32(v)
	c.tracef("%04X move.l D1,D1\n", pc)
}

func (c *Processor) op2202() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[1] = uint32(v)
	c.tracef("%04X move.l D2,D1\n", pc)
}

func (c *Processor) op2203() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[1] = uint32(v)
	c.tracef("%04X move.l D3,D1\n", pc)
}

func (c *Processor) op2204() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[1] = uint32(v)
	c.tracef("%04X move.l D4,D1\n", pc)
}

func (c *Processor) op2205() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[1] = uint32(v)
	c.tracef("%04X move.l D5,D1\n", pc)
}

func (c *Processor) op2206() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[1] = uint32(v)
	c.tracef("%04X move.l D6,D1\n", pc)
}

func (c *Processor) op2207() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[1] = uint32(v)
	c.tracef("%04X move.l D7,D1\n", pc)
}

func (c *Processor) op2208() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[1] = uint32(v)
	c.tracef("%04X move.l A0,D1\n", pc)
}

func (c *Processor) op2209() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[1] = uint32(v)
	c.tracef("%04X move.l A1,D1\n", pc)
}

func (c *Processor) op220A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[1] = uint32(v)
	c.tracef("%04X move.l A2,D1\n", pc)
}

func (c *Processor) op220B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[1] = uint32(v)
	c.tracef("%04X move.l A3,D1\n", pc)
}

func (c *Processor) op220C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[1] = uint32(v)
	c.tracef("%04X move.l A4,D1\n", pc)
}

func (c *Processor) op220D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[1] = uint32(v)
	c.tracef("%04X move.l A5,D1\n", pc)
}

func (c *Processor) op220E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[1] = uint32(v)
	c.tracef("%04X move.l A6,D1\n", pc)
}

func (c *Processor) op220F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[1] = uint32(v)
	c.tracef("%04X move.l A7,D1\n", pc)
}

func (c *Processor) op2210() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[1] = uint32(v)
	c.tracef("%04X move.l (A0),D1\n", pc)
}

func (c *Processor) op2211() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[1] = uint32(v)
	c.tracef("%04X move.l (A1),D1\n", pc)
}

func (c *Processor) op2212() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[1] = uint32(v)
	c.tracef("%04X move.l (A2),D1\n", pc)
}

func (c *Processor) op2213() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[1] = uint32(v)
	c.tracef("%04X move.l (A3),D1\n", pc)
}

func (c *Processor) op2214() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[1] = uint32(v)
	c.tracef("%04X move.l (A4),D1\n", pc)
}

func (c *Processor) op2215() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[1] = uint32(v)
	c.tracef("%04X move.l (A5),D1\n", pc)
}

func (c *Processor) op2216() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[1] = uint32(v)
	c.tracef("%04X move.l (A6),D1\n", pc)
}

func (c *Processor) op2217() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[1] = uint32(v)
	c.tracef("%04X move.l (A7),D1\n", pc)
}

func (c *Processor) op2238() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[1] = uint32(v)
	c.tracef("%04X move.l $%X,D1\n", pc, v)
}

func (c *Processor) op2239() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[1] = uint32(v)
	c.tracef("%04X move.l $%X,D1\n", pc, v)
}

func (c *Processor) op223C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[1] = uint32(v)
	c.tracef("%04X move.l #$%X,D1\n", pc, v)
}

func (c *Processor) op2240() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l D0,A1\n", pc)
}

func (c *Processor) op2241() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l D1,A1\n", pc)
}

func (c *Processor) op2242() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l D2,A1\n", pc)
}

func (c *Processor) op2243() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l D3,A1\n", pc)
}

func (c *Processor) op2244() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l D4,A1\n", pc)
}

func (c *Processor) op2245() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l D5,A1\n", pc)
}

func (c *Processor) op2246() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l D6,A1\n", pc)
}

func (c *Processor) op2247() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l D7,A1\n", pc)
}

func (c *Processor) op2248() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l A0,A1\n", pc)
}

func (c *Processor) op2249() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l A1,A1\n", pc)
}

func (c *Processor) op224A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l A2,A1\n", pc)
}

func (c *Processor) op224B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l A3,A1\n", pc)
}

func (c *Processor) op224C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l A4,A1\n", pc)
}

func (c *Processor) op224D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l A5,A1\n", pc)
}

func (c *Processor) op224E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l A6,A1\n", pc)
}

func (c *Processor) op224F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l A7,A1\n", pc)
}

func (c *Processor) op2250() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l (A0),A1\n", pc)
}

func (c *Processor) op2251() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l (A1),A1\n", pc)
}

func (c *Processor) op2252() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l (A2),A1\n", pc)
}

func (c *Processor) op2253() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l (A3),A1\n", pc)
}

func (c *Processor) op2254() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l (A4),A1\n", pc)
}

func (c *Processor) op2255() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l (A5),A1\n", pc)
}

func (c *Processor) op2256() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l (A6),A1\n", pc)
}

func (c *Processor) op2257() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l (A7),A1\n", pc)
}

func (c *Processor) op2278() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l $%X,A1\n", pc, v)
}

func (c *Processor) op2279() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l $%X,A1\n", pc, v)
}

func (c *Processor) op227C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[1] = uint32(v)
	c.tracef("%04X movea.l #$%X,A1\n", pc, v)
}

func (c *Processor) op2280() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l D0,(A1)\n", pc)
}

func (c *Processor) op2281() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l D1,(A1)\n", pc)
}

func (c *Processor) op2282() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l D2,(A1)\n", pc)
}

func (c *Processor) op2283() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l D3,(A1)\n", pc)
}

func (c *Processor) op2284() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l D4,(A1)\n", pc)
}

func (c *Processor) op2285() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l D5,(A1)\n", pc)
}

func (c *Processor) op2286() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l D6,(A1)\n", pc)
}

func (c *Processor) op2287() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l D7,(A1)\n", pc)
}

func (c *Processor) op2288() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l A0,(A1)\n", pc)
}

func (c *Processor) op2289() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l A1,(A1)\n", pc)
}

func (c *Processor) op228A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l A2,(A1)\n", pc)
}

func (c *Processor) op228B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l A3,(A1)\n", pc)
}

func (c *Processor) op228C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l A4,(A1)\n", pc)
}

func (c *Processor) op228D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l A5,(A1)\n", pc)
}

func (c *Processor) op228E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l A6,(A1)\n", pc)
}

func (c *Processor) op228F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l A7,(A1)\n", pc)
}

func (c *Processor) op2290() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l (A0),(A1)\n", pc)
}

func (c *Processor) op2291() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l (A1),(A1)\n", pc)
}

func (c *Processor) op2292() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l (A2),(A1)\n", pc)
}

func (c *Processor) op2293() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l (A3),(A1)\n", pc)
}

func (c *Processor) op2294() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l (A4),(A1)\n", pc)
}

func (c *Processor) op2295() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l (A5),(A1)\n", pc)
}

func (c *Processor) op2296() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l (A6),(A1)\n", pc)
}

func (c *Processor) op2297() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l (A7),(A1)\n", pc)
}

func (c *Processor) op22B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l $%X,(A1)\n", pc, v)
}

func (c *Processor) op22B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l $%X,(A1)\n", pc, v)
}

func (c *Processor) op22BC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l #$%X,(A1)\n", pc, v)
}

func (c *Processor) op22C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l D0,(A1)+\n", pc)
}

func (c *Processor) op22C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l D1,(A1)+\n", pc)
}

func (c *Processor) op22C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l D2,(A1)+\n", pc)
}

func (c *Processor) op22C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l D3,(A1)+\n", pc)
}

func (c *Processor) op22C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l D4,(A1)+\n", pc)
}

func (c *Processor) op22C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l D5,(A1)+\n", pc)
}

func (c *Processor) op22C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l D6,(A1)+\n", pc)
}

func (c *Processor) op22C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l D7,(A1)+\n", pc)
}

func (c *Processor) op22C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l A0,(A1)+\n", pc)
}

func (c *Processor) op22C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l A1,(A1)+\n", pc)
}

func (c *Processor) op22CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l A2,(A1)+\n", pc)
}

func (c *Processor) op22CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l A3,(A1)+\n", pc)
}

func (c *Processor) op22CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l A4,(A1)+\n", pc)
}

func (c *Processor) op22CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l A5,(A1)+\n", pc)
}

func (c *Processor) op22CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l A6,(A1)+\n", pc)
}

func (c *Processor) op22CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l A7,(A1)+\n", pc)
}

func (c *Processor) op22D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l (A0),(A1)+\n", pc)
}

func (c *Processor) op22D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l (A1),(A1)+\n", pc)
}

func (c *Processor) op22D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l (A2),(A1)+\n", pc)
}

func (c *Processor) op22D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l (A3),(A1)+\n", pc)
}

func (c *Processor) op22D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l (A4),(A1)+\n", pc)
}

func (c *Processor) op22D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l (A5),(A1)+\n", pc)
}

func (c *Processor) op22D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l (A6),(A1)+\n", pc)
}

func (c *Processor) op22D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l (A7),(A1)+\n", pc)
}

func (c *Processor) op22F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l $%X,(A1)+\n", pc, v)
}

func (c *Processor) op22F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l $%X,(A1)+\n", pc, v)
}

func (c *Processor) op22FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.l #$%X,(A1)+\n", pc, v)
}

func (c *Processor) op2300() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l D0,-(A1)\n", pc)
}

func (c *Processor) op2301() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l D1,-(A1)\n", pc)
}

func (c *Processor) op2302() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l D2,-(A1)\n", pc)
}

func (c *Processor) op2303() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l D3,-(A1)\n", pc)
}

func (c *Processor) op2304() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l D4,-(A1)\n", pc)
}

func (c *Processor) op2305() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l D5,-(A1)\n", pc)
}

func (c *Processor) op2306() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l D6,-(A1)\n", pc)
}

func (c *Processor) op2307() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l D7,-(A1)\n", pc)
}

func (c *Processor) op2308() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.l A0,-(A1)\n", pc)
}

func (c *Processor) op2309() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.l A1,-(A1)\n", pc)
}

func (c *Processor) op230A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.l A2,-(A1)\n", pc)
}

func (c *Processor) op230B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.l A3,-(A1)\n", pc)
}

func (c *Processor) op230C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.l A4,-(A1)\n", pc)
}

func (c *Processor) op230D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.l A5,-(A1)\n", pc)
}

func (c *Processor) op230E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.l A6,-(A1)\n", pc)
}

func (c *Processor) op230F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.l A7,-(A1)\n", pc)
}

func (c *Processor) op2310() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l (A0),-(A1)\n", pc)
}

func (c *Processor) op2311() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l (A1),-(A1)\n", pc)
}

func (c *Processor) op2312() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l (A2),-(A1)\n", pc)
}

func (c *Processor) op2313() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l (A3),-(A1)\n", pc)
}

func (c *Processor) op2314() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l (A4),-(A1)\n", pc)
}

func (c *Processor) op2315() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l (A5),-(A1)\n", pc)
}

func (c *Processor) op2316() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l (A6),-(A1)\n", pc)
}

func (c *Processor) op2317() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l (A7),-(A1)\n", pc)
}

func (c *Processor) op2338() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l $%X,-(A1)\n", pc, v)
}

func (c *Processor) op2339() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l $%X,-(A1)\n", pc, v)
}

func (c *Processor) op233C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.l #$%X,-(A1)\n", pc, v)
}

func (c *Processor) op2340() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D0,(%d,A1)\n", pc, disp)
}

func (c *Processor) op2341() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D1,(%d,A1)\n", pc, disp)
}

func (c *Processor) op2342() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D2,(%d,A1)\n", pc, disp)
}

func (c *Processor) op2343() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D3,(%d,A1)\n", pc, disp)
}

func (c *Processor) op2344() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D4,(%d,A1)\n", pc, disp)
}

func (c *Processor) op2345() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D5,(%d,A1)\n", pc, disp)
}

func (c *Processor) op2346() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D6,(%d,A1)\n", pc, disp)
}

func (c *Processor) op2347() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D7,(%d,A1)\n", pc, disp)
}

func (c *Processor) op2348() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A0,(%d,A1)\n", pc, disp)
}

func (c *Processor) op2349() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A1,(%d,A1)\n", pc, disp)
}

func (c *Processor) op234A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A2,(%d,A1)\n", pc, disp)
}

func (c *Processor) op234B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A3,(%d,A1)\n", pc, disp)
}

func (c *Processor) op234C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A4,(%d,A1)\n", pc, disp)
}

func (c *Processor) op234D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A5,(%d,A1)\n", pc, disp)
}

func (c *Processor) op234E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A6,(%d,A1)\n", pc, disp)
}

func (c *Processor) op234F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A7,(%d,A1)\n", pc, disp)
}

func (c *Processor) op2350() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A0),(%d,A1)\n", pc, disp)
}

func (c *Processor) op2351() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A1),(%d,A1)\n", pc, disp)
}

func (c *Processor) op2352() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A2),(%d,A1)\n", pc, disp)
}

func (c *Processor) op2353() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A3),(%d,A1)\n", pc, disp)
}

func (c *Processor) op2354() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A4),(%d,A1)\n", pc, disp)
}

func (c *Processor) op2355() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A5),(%d,A1)\n", pc, disp)
}

func (c *Processor) op2356() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A6),(%d,A1)\n", pc, disp)
}

func (c *Processor) op2357() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A7),(%d,A1)\n", pc, disp)
}

func (c *Processor) op2378() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,(%d,A1)\n", pc, v, disp)
}

func (c *Processor) op2379() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,(%d,A1)\n", pc, v, disp)
}

func (c *Processor) op237C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l #$%X,(%d,A1)\n", pc, v, disp)
}

func (c *Processor) op23C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D0,$%X\n", pc, addr)
}

func (c *Processor) op23C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D1,$%X\n", pc, addr)
}

func (c *Processor) op23C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D2,$%X\n", pc, addr)
}

func (c *Processor) op23C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D3,$%X\n", pc, addr)
}

func (c *Processor) op23C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D4,$%X\n", pc, addr)
}

func (c *Processor) op23C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D5,$%X\n", pc, addr)
}

func (c *Processor) op23C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D6,$%X\n", pc, addr)
}

func (c *Processor) op23C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D7,$%X\n", pc, addr)
}

func (c *Processor) op23C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A0,$%X\n", pc, addr)
}

func (c *Processor) op23C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A1,$%X\n", pc, addr)
}

func (c *Processor) op23CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A2,$%X\n", pc, addr)
}

func (c *Processor) op23CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A3,$%X\n", pc, addr)
}

func (c *Processor) op23CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A4,$%X\n", pc, addr)
}

func (c *Processor) op23CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A5,$%X\n", pc, addr)
}

func (c *Processor) op23CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A6,$%X\n", pc, addr)
}

func (c *Processor) op23CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A7,$%X\n", pc, addr)
}

func (c *Processor) op23D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A0),$%X\n", pc, addr)
}

func (c *Processor) op23D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A1),$%X\n", pc, addr)
}

func (c *Processor) op23D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A2),$%X\n", pc, addr)
}

func (c *Processor) op23D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A3),$%X\n", pc, addr)
}

func (c *Processor) op23D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A4),$%X\n", pc, addr)
}

func (c *Processor) op23D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A5),$%X\n", pc, addr)
}

func (c *Processor) op23D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A6),$%X\n", pc, addr)
}

func (c *Processor) op23D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A7),$%X\n", pc, addr)
}

func (c *Processor) op23F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,$%X\n", pc, v, addr)
}

func (c *Processor) op23F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,$%X\n", pc, v, addr)
}

func (c *Processor) op23FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l #$%X,$%X\n", pc, v, addr)
}

func (c *Processor) op2400() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[2] = uint32(v)
	c.tracef("%04X move.l D0,D2\n", pc)
}

func (c *Processor) op2401() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[2] = uint32(v)
	c.tracef("%04X move.l D1,D2\n", pc)
}

func (c *Processor) op2402() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[2] = uint32(v)
	c.tracef("%04X move.l D2,D2\n", pc)
}

func (c *Processor) op2403() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[2] = uint32(v)
	c.tracef("%04X move.l D3,D2\n", pc)
}

func (c *Processor) op2404() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[2] = uint32(v)
	c.tracef("%04X move.l D4,D2\n", pc)
}

func (c *Processor) op2405() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[2] = uint32(v)
	c.tracef("%04X move.l D5,D2\n", pc)
}

func (c *Processor) op2406() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[2] = uint32(v)
	c.tracef("%04X move.l D6,D2\n", pc)
}

func (c *Processor) op2407() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[2] = uint32(v)
	c.tracef("%04X move.l D7,D2\n", pc)
}

func (c *Processor) op2408() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[2] = uint32(v)
	c.tracef("%04X move.l A0,D2\n", pc)
}

func (c *Processor) op2409() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[2] = uint32(v)
	c.tracef("%04X move.l A1,D2\n", pc)
}

func (c *Processor) op240A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[2] = uint32(v)
	c.tracef("%04X move.l A2,D2\n", pc)
}

func (c *Processor) op240B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[2] = uint32(v)
	c.tracef("%04X move.l A3,D2\n", pc)
}

func (c *Processor) op240C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[2] = uint32(v)
	c.tracef("%04X move.l A4,D2\n", pc)
}

func (c *Processor) op240D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[2] = uint32(v)
	c.tracef("%04X move.l A5,D2\n", pc)
}

func (c *Processor) op240E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[2] = uint32(v)
	c.tracef("%04X move.l A6,D2\n", pc)
}

func (c *Processor) op240F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[2] = uint32(v)
	c.tracef("%04X move.l A7,D2\n", pc)
}

func (c *Processor) op2410() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[2] = uint32(v)
	c.tracef("%04X move.l (A0),D2\n", pc)
}

func (c *Processor) op2411() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[2] = uint32(v)
	c.tracef("%04X move.l (A1),D2\n", pc)
}

func (c *Processor) op2412() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[2] = uint32(v)
	c.tracef("%04X move.l (A2),D2\n", pc)
}

func (c *Processor) op2413() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[2] = uint32(v)
	c.tracef("%04X move.l (A3),D2\n", pc)
}

func (c *Processor) op2414() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[2] = uint32(v)
	c.tracef("%04X move.l (A4),D2\n", pc)
}

func (c *Processor) op2415() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[2] = uint32(v)
	c.tracef("%04X move.l (A5),D2\n", pc)
}

func (c *Processor) op2416() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[2] = uint32(v)
	c.tracef("%04X move.l (A6),D2\n", pc)
}

func (c *Processor) op2417() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[2] = uint32(v)
	c.tracef("%04X move.l (A7),D2\n", pc)
}

func (c *Processor) op2438() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[2] = uint32(v)
	c.tracef("%04X move.l $%X,D2\n", pc, v)
}

func (c *Processor) op2439() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[2] = uint32(v)
	c.tracef("%04X move.l $%X,D2\n", pc, v)
}

func (c *Processor) op243C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[2] = uint32(v)
	c.tracef("%04X move.l #$%X,D2\n", pc, v)
}

func (c *Processor) op2440() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l D0,A2\n", pc)
}

func (c *Processor) op2441() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l D1,A2\n", pc)
}

func (c *Processor) op2442() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l D2,A2\n", pc)
}

func (c *Processor) op2443() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l D3,A2\n", pc)
}

func (c *Processor) op2444() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l D4,A2\n", pc)
}

func (c *Processor) op2445() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l D5,A2\n", pc)
}

func (c *Processor) op2446() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l D6,A2\n", pc)
}

func (c *Processor) op2447() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l D7,A2\n", pc)
}

func (c *Processor) op2448() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l A0,A2\n", pc)
}

func (c *Processor) op2449() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l A1,A2\n", pc)
}

func (c *Processor) op244A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l A2,A2\n", pc)
}

func (c *Processor) op244B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l A3,A2\n", pc)
}

func (c *Processor) op244C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l A4,A2\n", pc)
}

func (c *Processor) op244D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l A5,A2\n", pc)
}

func (c *Processor) op244E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l A6,A2\n", pc)
}

func (c *Processor) op244F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l A7,A2\n", pc)
}

func (c *Processor) op2450() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l (A0),A2\n", pc)
}

func (c *Processor) op2451() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l (A1),A2\n", pc)
}

func (c *Processor) op2452() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l (A2),A2\n", pc)
}

func (c *Processor) op2453() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l (A3),A2\n", pc)
}

func (c *Processor) op2454() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l (A4),A2\n", pc)
}

func (c *Processor) op2455() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l (A5),A2\n", pc)
}

func (c *Processor) op2456() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l (A6),A2\n", pc)
}

func (c *Processor) op2457() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l (A7),A2\n", pc)
}

func (c *Processor) op2478() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l $%X,A2\n", pc, v)
}

func (c *Processor) op2479() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l $%X,A2\n", pc, v)
}

func (c *Processor) op247C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[2] = uint32(v)
	c.tracef("%04X movea.l #$%X,A2\n", pc, v)
}

func (c *Processor) op2480() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l D0,(A2)\n", pc)
}

func (c *Processor) op2481() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l D1,(A2)\n", pc)
}

func (c *Processor) op2482() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l D2,(A2)\n", pc)
}

func (c *Processor) op2483() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l D3,(A2)\n", pc)
}

func (c *Processor) op2484() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l D4,(A2)\n", pc)
}

func (c *Processor) op2485() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l D5,(A2)\n", pc)
}

func (c *Processor) op2486() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l D6,(A2)\n", pc)
}

func (c *Processor) op2487() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l D7,(A2)\n", pc)
}

func (c *Processor) op2488() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l A0,(A2)\n", pc)
}

func (c *Processor) op2489() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l A1,(A2)\n", pc)
}

func (c *Processor) op248A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l A2,(A2)\n", pc)
}

func (c *Processor) op248B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l A3,(A2)\n", pc)
}

func (c *Processor) op248C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l A4,(A2)\n", pc)
}

func (c *Processor) op248D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l A5,(A2)\n", pc)
}

func (c *Processor) op248E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l A6,(A2)\n", pc)
}

func (c *Processor) op248F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l A7,(A2)\n", pc)
}

func (c *Processor) op2490() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l (A0),(A2)\n", pc)
}

func (c *Processor) op2491() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l (A1),(A2)\n", pc)
}

func (c *Processor) op2492() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l (A2),(A2)\n", pc)
}

func (c *Processor) op2493() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l (A3),(A2)\n", pc)
}

func (c *Processor) op2494() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l (A4),(A2)\n", pc)
}

func (c *Processor) op2495() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l (A5),(A2)\n", pc)
}

func (c *Processor) op2496() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l (A6),(A2)\n", pc)
}

func (c *Processor) op2497() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l (A7),(A2)\n", pc)
}

func (c *Processor) op24B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l $%X,(A2)\n", pc, v)
}

func (c *Processor) op24B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l $%X,(A2)\n", pc, v)
}

func (c *Processor) op24BC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l #$%X,(A2)\n", pc, v)
}

func (c *Processor) op24C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l D0,(A2)+\n", pc)
}

func (c *Processor) op24C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l D1,(A2)+\n", pc)
}

func (c *Processor) op24C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l D2,(A2)+\n", pc)
}

func (c *Processor) op24C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l D3,(A2)+\n", pc)
}

func (c *Processor) op24C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l D4,(A2)+\n", pc)
}

func (c *Processor) op24C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l D5,(A2)+\n", pc)
}

func (c *Processor) op24C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l D6,(A2)+\n", pc)
}

func (c *Processor) op24C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l D7,(A2)+\n", pc)
}

func (c *Processor) op24C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l A0,(A2)+\n", pc)
}

func (c *Processor) op24C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l A1,(A2)+\n", pc)
}

func (c *Processor) op24CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l A2,(A2)+\n", pc)
}

func (c *Processor) op24CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l A3,(A2)+\n", pc)
}

func (c *Processor) op24CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l A4,(A2)+\n", pc)
}

func (c *Processor) op24CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l A5,(A2)+\n", pc)
}

func (c *Processor) op24CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l A6,(A2)+\n", pc)
}

func (c *Processor) op24CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l A7,(A2)+\n", pc)
}

func (c *Processor) op24D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l (A0),(A2)+\n", pc)
}

func (c *Processor) op24D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l (A1),(A2)+\n", pc)
}

func (c *Processor) op24D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l (A2),(A2)+\n", pc)
}

func (c *Processor) op24D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l (A3),(A2)+\n", pc)
}

func (c *Processor) op24D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l (A4),(A2)+\n", pc)
}

func (c *Processor) op24D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l (A5),(A2)+\n", pc)
}

func (c *Processor) op24D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l (A6),(A2)+\n", pc)
}

func (c *Processor) op24D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l (A7),(A2)+\n", pc)
}

func (c *Processor) op24F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l $%X,(A2)+\n", pc, v)
}

func (c *Processor) op24F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l $%X,(A2)+\n", pc, v)
}

func (c *Processor) op24FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.l #$%X,(A2)+\n", pc, v)
}

func (c *Processor) op2500() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l D0,-(A2)\n", pc)
}

func (c *Processor) op2501() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l D1,-(A2)\n", pc)
}

func (c *Processor) op2502() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l D2,-(A2)\n", pc)
}

func (c *Processor) op2503() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l D3,-(A2)\n", pc)
}

func (c *Processor) op2504() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l D4,-(A2)\n", pc)
}

func (c *Processor) op2505() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l D5,-(A2)\n", pc)
}

func (c *Processor) op2506() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l D6,-(A2)\n", pc)
}

func (c *Processor) op2507() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l D7,-(A2)\n", pc)
}

func (c *Processor) op2508() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.l A0,-(A2)\n", pc)
}

func (c *Processor) op2509() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.l A1,-(A2)\n", pc)
}

func (c *Processor) op250A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.l A2,-(A2)\n", pc)
}

func (c *Processor) op250B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.l A3,-(A2)\n", pc)
}

func (c *Processor) op250C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.l A4,-(A2)\n", pc)
}

func (c *Processor) op250D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.l A5,-(A2)\n", pc)
}

func (c *Processor) op250E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.l A6,-(A2)\n", pc)
}

func (c *Processor) op250F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.l A7,-(A2)\n", pc)
}

func (c *Processor) op2510() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l (A0),-(A2)\n", pc)
}

func (c *Processor) op2511() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l (A1),-(A2)\n", pc)
}

func (c *Processor) op2512() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l (A2),-(A2)\n", pc)
}

func (c *Processor) op2513() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l (A3),-(A2)\n", pc)
}

func (c *Processor) op2514() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l (A4),-(A2)\n", pc)
}

func (c *Processor) op2515() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l (A5),-(A2)\n", pc)
}

func (c *Processor) op2516() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l (A6),-(A2)\n", pc)
}

func (c *Processor) op2517() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l (A7),-(A2)\n", pc)
}

func (c *Processor) op2538() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l $%X,-(A2)\n", pc, v)
}

func (c *Processor) op2539() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l $%X,-(A2)\n", pc, v)
}

func (c *Processor) op253C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.l #$%X,-(A2)\n", pc, v)
}

func (c *Processor) op2540() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D0,(%d,A2)\n", pc, disp)
}

func (c *Processor) op2541() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D1,(%d,A2)\n", pc, disp)
}

func (c *Processor) op2542() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D2,(%d,A2)\n", pc, disp)
}

func (c *Processor) op2543() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D3,(%d,A2)\n", pc, disp)
}

func (c *Processor) op2544() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D4,(%d,A2)\n", pc, disp)
}

func (c *Processor) op2545() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D5,(%d,A2)\n", pc, disp)
}

func (c *Processor) op2546() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D6,(%d,A2)\n", pc, disp)
}

func (c *Processor) op2547() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D7,(%d,A2)\n", pc, disp)
}

func (c *Processor) op2548() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A0,(%d,A2)\n", pc, disp)
}

func (c *Processor) op2549() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A1,(%d,A2)\n", pc, disp)
}

func (c *Processor) op254A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A2,(%d,A2)\n", pc, disp)
}

func (c *Processor) op254B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A3,(%d,A2)\n", pc, disp)
}

func (c *Processor) op254C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A4,(%d,A2)\n", pc, disp)
}

func (c *Processor) op254D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A5,(%d,A2)\n", pc, disp)
}

func (c *Processor) op254E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A6,(%d,A2)\n", pc, disp)
}

func (c *Processor) op254F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A7,(%d,A2)\n", pc, disp)
}

func (c *Processor) op2550() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A0),(%d,A2)\n", pc, disp)
}

func (c *Processor) op2551() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A1),(%d,A2)\n", pc, disp)
}

func (c *Processor) op2552() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A2),(%d,A2)\n", pc, disp)
}

func (c *Processor) op2553() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A3),(%d,A2)\n", pc, disp)
}

func (c *Processor) op2554() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A4),(%d,A2)\n", pc, disp)
}

func (c *Processor) op2555() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A5),(%d,A2)\n", pc, disp)
}

func (c *Processor) op2556() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A6),(%d,A2)\n", pc, disp)
}

func (c *Processor) op2557() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A7),(%d,A2)\n", pc, disp)
}

func (c *Processor) op2578() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,(%d,A2)\n", pc, v, disp)
}

func (c *Processor) op2579() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,(%d,A2)\n", pc, v, disp)
}

func (c *Processor) op257C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l #$%X,(%d,A2)\n", pc, v, disp)
}

func (c *Processor) op2600() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[3] = uint32(v)
	c.tracef("%04X move.l D0,D3\n", pc)
}

func (c *Processor) op2601() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[3] = uint32(v)
	c.tracef("%04X move.l D1,D3\n", pc)
}

func (c *Processor) op2602() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[3] = uint32(v)
	c.tracef("%04X move.l D2,D3\n", pc)
}

func (c *Processor) op2603() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[3] = uint32(v)
	c.tracef("%04X move.l D3,D3\n", pc)
}

func (c *Processor) op2604() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[3] = uint32(v)
	c.tracef("%04X move.l D4,D3\n", pc)
}

func (c *Processor) op2605() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[3] = uint32(v)
	c.tracef("%04X move.l D5,D3\n", pc)
}

func (c *Processor) op2606() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[3] = uint32(v)
	c.tracef("%04X move.l D6,D3\n", pc)
}

func (c *Processor) op2607() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[3] = uint32(v)
	c.tracef("%04X move.l D7,D3\n", pc)
}

func (c *Processor) op2608() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[3] = uint32(v)
	c.tracef("%04X move.l A0,D3\n", pc)
}

func (c *Processor) op2609() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[3] = uint32(v)
	c.tracef("%04X move.l A1,D3\n", pc)
}

func (c *Processor) op260A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[3] = uint32(v)
	c.tracef("%04X move.l A2,D3\n", pc)
}

func (c *Processor) op260B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[3] = uint32(v)
	c.tracef("%04X move.l A3,D3\n", pc)
}

func (c *Processor) op260C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[3] = uint32(v)
	c.tracef("%04X move.l A4,D3\n", pc)
}

func (c *Processor) op260D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[3] = uint32(v)
	c.tracef("%04X move.l A5,D3\n", pc)
}

func (c *Processor) op260E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[3] = uint32(v)
	c.tracef("%04X move.l A6,D3\n", pc)
}

func (c *Processor) op260F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[3] = uint32(v)
	c.tracef("%04X move.l A7,D3\n", pc)
}

func (c *Processor) op2610() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[3] = uint32(v)
	c.tracef("%04X move.l (A0),D3\n", pc)
}

func (c *Processor) op2611() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[3] = uint32(v)
	c.tracef("%04X move.l (A1),D3\n", pc)
}

func (c *Processor) op2612() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[3] = uint32(v)
	c.tracef("%04X move.l (A2),D3\n", pc)
}

func (c *Processor) op2613() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[3] = uint32(v)
	c.tracef("%04X move.l (A3),D3\n", pc)
}

func (c *Processor) op2614() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[3] = uint32(v)
	c.tracef("%04X move.l (A4),D3\n", pc)
}

func (c *Processor) op2615() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[3] = uint32(v)
	c.tracef("%04X move.l (A5),D3\n", pc)
}

func (c *Processor) op2616() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[3] = uint32(v)
	c.tracef("%04X move.l (A6),D3\n", pc)
}

func (c *Processor) op2617() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[3] = uint32(v)
	c.tracef("%04X move.l (A7),D3\n", pc)
}

func (c *Processor) op2638() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[3] = uint32(v)
	c.tracef("%04X move.l $%X,D3\n", pc, v)
}

func (c *Processor) op2639() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[3] = uint32(v)
	c.tracef("%04X move.l $%X,D3\n", pc, v)
}

func (c *Processor) op263C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[3] = uint32(v)
	c.tracef("%04X move.l #$%X,D3\n", pc, v)
}

func (c *Processor) op2640() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l D0,A3\n", pc)
}

func (c *Processor) op2641() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l D1,A3\n", pc)
}

func (c *Processor) op2642() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l D2,A3\n", pc)
}

func (c *Processor) op2643() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l D3,A3\n", pc)
}

func (c *Processor) op2644() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l D4,A3\n", pc)
}

func (c *Processor) op2645() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l D5,A3\n", pc)
}

func (c *Processor) op2646() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l D6,A3\n", pc)
}

func (c *Processor) op2647() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l D7,A3\n", pc)
}

func (c *Processor) op2648() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l A0,A3\n", pc)
}

func (c *Processor) op2649() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l A1,A3\n", pc)
}

func (c *Processor) op264A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l A2,A3\n", pc)
}

func (c *Processor) op264B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l A3,A3\n", pc)
}

func (c *Processor) op264C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l A4,A3\n", pc)
}

func (c *Processor) op264D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l A5,A3\n", pc)
}

func (c *Processor) op264E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l A6,A3\n", pc)
}

func (c *Processor) op264F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l A7,A3\n", pc)
}

func (c *Processor) op2650() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l (A0),A3\n", pc)
}

func (c *Processor) op2651() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l (A1),A3\n", pc)
}

func (c *Processor) op2652() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l (A2),A3\n", pc)
}

func (c *Processor) op2653() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l (A3),A3\n", pc)
}

func (c *Processor) op2654() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l (A4),A3\n", pc)
}

func (c *Processor) op2655() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l (A5),A3\n", pc)
}

func (c *Processor) op2656() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l (A6),A3\n", pc)
}

func (c *Processor) op2657() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l (A7),A3\n", pc)
}

func (c *Processor) op2678() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l $%X,A3\n", pc, v)
}

func (c *Processor) op2679() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l $%X,A3\n", pc, v)
}

func (c *Processor) op267C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[3] = uint32(v)
	c.tracef("%04X movea.l #$%X,A3\n", pc, v)
}

func (c *Processor) op2680() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l D0,(A3)\n", pc)
}

func (c *Processor) op2681() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l D1,(A3)\n", pc)
}

func (c *Processor) op2682() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l D2,(A3)\n", pc)
}

func (c *Processor) op2683() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l D3,(A3)\n", pc)
}

func (c *Processor) op2684() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l D4,(A3)\n", pc)
}

func (c *Processor) op2685() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l D5,(A3)\n", pc)
}

func (c *Processor) op2686() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l D6,(A3)\n", pc)
}

func (c *Processor) op2687() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l D7,(A3)\n", pc)
}

func (c *Processor) op2688() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l A0,(A3)\n", pc)
}

func (c *Processor) op2689() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l A1,(A3)\n", pc)
}

func (c *Processor) op268A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l A2,(A3)\n", pc)
}

func (c *Processor) op268B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l A3,(A3)\n", pc)
}

func (c *Processor) op268C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l A4,(A3)\n", pc)
}

func (c *Processor) op268D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l A5,(A3)\n", pc)
}

func (c *Processor) op268E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l A6,(A3)\n", pc)
}

func (c *Processor) op268F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l A7,(A3)\n", pc)
}

func (c *Processor) op2690() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l (A0),(A3)\n", pc)
}

func (c *Processor) op2691() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l (A1),(A3)\n", pc)
}

func (c *Processor) op2692() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l (A2),(A3)\n", pc)
}

func (c *Processor) op2693() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l (A3),(A3)\n", pc)
}

func (c *Processor) op2694() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l (A4),(A3)\n", pc)
}

func (c *Processor) op2695() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l (A5),(A3)\n", pc)
}

func (c *Processor) op2696() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l (A6),(A3)\n", pc)
}

func (c *Processor) op2697() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l (A7),(A3)\n", pc)
}

func (c *Processor) op26B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l $%X,(A3)\n", pc, v)
}

func (c *Processor) op26B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l $%X,(A3)\n", pc, v)
}

func (c *Processor) op26BC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l #$%X,(A3)\n", pc, v)
}

func (c *Processor) op26C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l D0,(A3)+\n", pc)
}

func (c *Processor) op26C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l D1,(A3)+\n", pc)
}

func (c *Processor) op26C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l D2,(A3)+\n", pc)
}

func (c *Processor) op26C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l D3,(A3)+\n", pc)
}

func (c *Processor) op26C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l D4,(A3)+\n", pc)
}

func (c *Processor) op26C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l D5,(A3)+\n", pc)
}

func (c *Processor) op26C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l D6,(A3)+\n", pc)
}

func (c *Processor) op26C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l D7,(A3)+\n", pc)
}

func (c *Processor) op26C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l A0,(A3)+\n", pc)
}

func (c *Processor) op26C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l A1,(A3)+\n", pc)
}

func (c *Processor) op26CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l A2,(A3)+\n", pc)
}

func (c *Processor) op26CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l A3,(A3)+\n", pc)
}

func (c *Processor) op26CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l A4,(A3)+\n", pc)
}

func (c *Processor) op26CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l A5,(A3)+\n", pc)
}

func (c *Processor) op26CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l A6,(A3)+\n", pc)
}

func (c *Processor) op26CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l A7,(A3)+\n", pc)
}

func (c *Processor) op26D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l (A0),(A3)+\n", pc)
}

func (c *Processor) op26D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l (A1),(A3)+\n", pc)
}

func (c *Processor) op26D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l (A2),(A3)+\n", pc)
}

func (c *Processor) op26D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l (A3),(A3)+\n", pc)
}

func (c *Processor) op26D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l (A4),(A3)+\n", pc)
}

func (c *Processor) op26D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l (A5),(A3)+\n", pc)
}

func (c *Processor) op26D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l (A6),(A3)+\n", pc)
}

func (c *Processor) op26D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l (A7),(A3)+\n", pc)
}

func (c *Processor) op26F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l $%X,(A3)+\n", pc, v)
}

func (c *Processor) op26F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l $%X,(A3)+\n", pc, v)
}

func (c *Processor) op26FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.l #$%X,(A3)+\n", pc, v)
}

func (c *Processor) op2700() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l D0,-(A3)\n", pc)
}

func (c *Processor) op2701() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l D1,-(A3)\n", pc)
}

func (c *Processor) op2702() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l D2,-(A3)\n", pc)
}

func (c *Processor) op2703() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l D3,-(A3)\n", pc)
}

func (c *Processor) op2704() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l D4,-(A3)\n", pc)
}

func (c *Processor) op2705() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l D5,-(A3)\n", pc)
}

func (c *Processor) op2706() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l D6,-(A3)\n", pc)
}

func (c *Processor) op2707() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l D7,-(A3)\n", pc)
}

func (c *Processor) op2708() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.l A0,-(A3)\n", pc)
}

func (c *Processor) op2709() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.l A1,-(A3)\n", pc)
}

func (c *Processor) op270A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.l A2,-(A3)\n", pc)
}

func (c *Processor) op270B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.l A3,-(A3)\n", pc)
}

func (c *Processor) op270C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.l A4,-(A3)\n", pc)
}

func (c *Processor) op270D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.l A5,-(A3)\n", pc)
}

func (c *Processor) op270E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.l A6,-(A3)\n", pc)
}

func (c *Processor) op270F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.l A7,-(A3)\n", pc)
}

func (c *Processor) op2710() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l (A0),-(A3)\n", pc)
}

func (c *Processor) op2711() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l (A1),-(A3)\n", pc)
}

func (c *Processor) op2712() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l (A2),-(A3)\n", pc)
}

func (c *Processor) op2713() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l (A3),-(A3)\n", pc)
}

func (c *Processor) op2714() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l (A4),-(A3)\n", pc)
}

func (c *Processor) op2715() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l (A5),-(A3)\n", pc)
}

func (c *Processor) op2716() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l (A6),-(A3)\n", pc)
}

func (c *Processor) op2717() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l (A7),-(A3)\n", pc)
}

func (c *Processor) op2738() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l $%X,-(A3)\n", pc, v)
}

func (c *Processor) op2739() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l $%X,-(A3)\n", pc, v)
}

func (c *Processor) op273C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.l #$%X,-(A3)\n", pc, v)
}

func (c *Processor) op2740() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D0,(%d,A3)\n", pc, disp)
}

func (c *Processor) op2741() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D1,(%d,A3)\n", pc, disp)
}

func (c *Processor) op2742() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D2,(%d,A3)\n", pc, disp)
}

func (c *Processor) op2743() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D3,(%d,A3)\n", pc, disp)
}

func (c *Processor) op2744() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D4,(%d,A3)\n", pc, disp)
}

func (c *Processor) op2745() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D5,(%d,A3)\n", pc, disp)
}

func (c *Processor) op2746() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D6,(%d,A3)\n", pc, disp)
}

func (c *Processor) op2747() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D7,(%d,A3)\n", pc, disp)
}

func (c *Processor) op2748() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A0,(%d,A3)\n", pc, disp)
}

func (c *Processor) op2749() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A1,(%d,A3)\n", pc, disp)
}

func (c *Processor) op274A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A2,(%d,A3)\n", pc, disp)
}

func (c *Processor) op274B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A3,(%d,A3)\n", pc, disp)
}

func (c *Processor) op274C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A4,(%d,A3)\n", pc, disp)
}

func (c *Processor) op274D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A5,(%d,A3)\n", pc, disp)
}

func (c *Processor) op274E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A6,(%d,A3)\n", pc, disp)
}

func (c *Processor) op274F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A7,(%d,A3)\n", pc, disp)
}

func (c *Processor) op2750() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A0),(%d,A3)\n", pc, disp)
}

func (c *Processor) op2751() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A1),(%d,A3)\n", pc, disp)
}

func (c *Processor) op2752() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A2),(%d,A3)\n", pc, disp)
}

func (c *Processor) op2753() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A3),(%d,A3)\n", pc, disp)
}

func (c *Processor) op2754() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A4),(%d,A3)\n", pc, disp)
}

func (c *Processor) op2755() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A5),(%d,A3)\n", pc, disp)
}

func (c *Processor) op2756() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A6),(%d,A3)\n", pc, disp)
}

func (c *Processor) op2757() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A7),(%d,A3)\n", pc, disp)
}

func (c *Processor) op2778() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,(%d,A3)\n", pc, v, disp)
}

func (c *Processor) op2779() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,(%d,A3)\n", pc, v, disp)
}

func (c *Processor) op277C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l #$%X,(%d,A3)\n", pc, v, disp)
}

func (c *Processor) op2800() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[4] = uint32(v)
	c.tracef("%04X move.l D0,D4\n", pc)
}

func (c *Processor) op2801() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[4] = uint32(v)
	c.tracef("%04X move.l D1,D4\n", pc)
}

func (c *Processor) op2802() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[4] = uint32(v)
	c.tracef("%04X move.l D2,D4\n", pc)
}

func (c *Processor) op2803() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[4] = uint32(v)
	c.tracef("%04X move.l D3,D4\n", pc)
}

func (c *Processor) op2804() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[4] = uint32(v)
	c.tracef("%04X move.l D4,D4\n", pc)
}

func (c *Processor) op2805() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[4] = uint32(v)
	c.tracef("%04X move.l D5,D4\n", pc)
}

func (c *Processor) op2806() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[4] = uint32(v)
	c.tracef("%04X move.l D6,D4\n", pc)
}

func (c *Processor) op2807() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[4] = uint32(v)
	c.tracef("%04X move.l D7,D4\n", pc)
}

func (c *Processor) op2808() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[4] = uint32(v)
	c.tracef("%04X move.l A0,D4\n", pc)
}

func (c *Processor) op2809() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[4] = uint32(v)
	c.tracef("%04X move.l A1,D4\n", pc)
}

func (c *Processor) op280A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[4] = uint32(v)
	c.tracef("%04X move.l A2,D4\n", pc)
}

func (c *Processor) op280B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[4] = uint32(v)
	c.tracef("%04X move.l A3,D4\n", pc)
}

func (c *Processor) op280C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[4] = uint32(v)
	c.tracef("%04X move.l A4,D4\n", pc)
}

func (c *Processor) op280D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[4] = uint32(v)
	c.tracef("%04X move.l A5,D4\n", pc)
}

func (c *Processor) op280E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[4] = uint32(v)
	c.tracef("%04X move.l A6,D4\n", pc)
}

func (c *Processor) op280F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[4] = uint32(v)
	c.tracef("%04X move.l A7,D4\n", pc)
}

func (c *Processor) op2810() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[4] = uint32(v)
	c.tracef("%04X move.l (A0),D4\n", pc)
}

func (c *Processor) op2811() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[4] = uint32(v)
	c.tracef("%04X move.l (A1),D4\n", pc)
}

func (c *Processor) op2812() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[4] = uint32(v)
	c.tracef("%04X move.l (A2),D4\n", pc)
}

func (c *Processor) op2813() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[4] = uint32(v)
	c.tracef("%04X move.l (A3),D4\n", pc)
}

func (c *Processor) op2814() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[4] = uint32(v)
	c.tracef("%04X move.l (A4),D4\n", pc)
}

func (c *Processor) op2815() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[4] = uint32(v)
	c.tracef("%04X move.l (A5),D4\n", pc)
}

func (c *Processor) op2816() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[4] = uint32(v)
	c.tracef("%04X move.l (A6),D4\n", pc)
}

func (c *Processor) op2817() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[4] = uint32(v)
	c.tracef("%04X move.l (A7),D4\n", pc)
}

func (c *Processor) op2838() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[4] = uint32(v)
	c.tracef("%04X move.l $%X,D4\n", pc, v)
}

func (c *Processor) op2839() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[4] = uint32(v)
	c.tracef("%04X move.l $%X,D4\n", pc, v)
}

func (c *Processor) op283C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[4] = uint32(v)
	c.tracef("%04X move.l #$%X,D4\n", pc, v)
}

func (c *Processor) op2840() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l D0,A4\n", pc)
}

func (c *Processor) op2841() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l D1,A4\n", pc)
}

func (c *Processor) op2842() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l D2,A4\n", pc)
}

func (c *Processor) op2843() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l D3,A4\n", pc)
}

func (c *Processor) op2844() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l D4,A4\n", pc)
}

func (c *Processor) op2845() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l D5,A4\n", pc)
}

func (c *Processor) op2846() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l D6,A4\n", pc)
}

func (c *Processor) op2847() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l D7,A4\n", pc)
}

func (c *Processor) op2848() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l A0,A4\n", pc)
}

func (c *Processor) op2849() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l A1,A4\n", pc)
}

func (c *Processor) op284A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l A2,A4\n", pc)
}

func (c *Processor) op284B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l A3,A4\n", pc)
}

func (c *Processor) op284C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l A4,A4\n", pc)
}

func (c *Processor) op284D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l A5,A4\n", pc)
}

func (c *Processor) op284E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l A6,A4\n", pc)
}

func (c *Processor) op284F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l A7,A4\n", pc)
}

func (c *Processor) op2850() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l (A0),A4\n", pc)
}

func (c *Processor) op2851() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l (A1),A4\n", pc)
}

func (c *Processor) op2852() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l (A2),A4\n", pc)
}

func (c *Processor) op2853() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l (A3),A4\n", pc)
}

func (c *Processor) op2854() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l (A4),A4\n", pc)
}

func (c *Processor) op2855() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l (A5),A4\n", pc)
}

func (c *Processor) op2856() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l (A6),A4\n", pc)
}

func (c *Processor) op2857() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l (A7),A4\n", pc)
}

func (c *Processor) op2878() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l $%X,A4\n", pc, v)
}

func (c *Processor) op2879() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l $%X,A4\n", pc, v)
}

func (c *Processor) op287C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[4] = uint32(v)
	c.tracef("%04X movea.l #$%X,A4\n", pc, v)
}

func (c *Processor) op2880() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l D0,(A4)\n", pc)
}

func (c *Processor) op2881() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l D1,(A4)\n", pc)
}

func (c *Processor) op2882() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l D2,(A4)\n", pc)
}

func (c *Processor) op2883() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l D3,(A4)\n", pc)
}

func (c *Processor) op2884() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l D4,(A4)\n", pc)
}

func (c *Processor) op2885() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l D5,(A4)\n", pc)
}

func (c *Processor) op2886() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l D6,(A4)\n", pc)
}

func (c *Processor) op2887() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l D7,(A4)\n", pc)
}

func (c *Processor) op2888() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l A0,(A4)\n", pc)
}

func (c *Processor) op2889() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l A1,(A4)\n", pc)
}

func (c *Processor) op288A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l A2,(A4)\n", pc)
}

func (c *Processor) op288B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l A3,(A4)\n", pc)
}

func (c *Processor) op288C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l A4,(A4)\n", pc)
}

func (c *Processor) op288D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l A5,(A4)\n", pc)
}

func (c *Processor) op288E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l A6,(A4)\n", pc)
}

func (c *Processor) op288F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l A7,(A4)\n", pc)
}

func (c *Processor) op2890() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l (A0),(A4)\n", pc)
}

func (c *Processor) op2891() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l (A1),(A4)\n", pc)
}

func (c *Processor) op2892() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l (A2),(A4)\n", pc)
}

func (c *Processor) op2893() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l (A3),(A4)\n", pc)
}

func (c *Processor) op2894() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l (A4),(A4)\n", pc)
}

func (c *Processor) op2895() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l (A5),(A4)\n", pc)
}

func (c *Processor) op2896() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l (A6),(A4)\n", pc)
}

func (c *Processor) op2897() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l (A7),(A4)\n", pc)
}

func (c *Processor) op28B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l $%X,(A4)\n", pc, v)
}

func (c *Processor) op28B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l $%X,(A4)\n", pc, v)
}

func (c *Processor) op28BC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l #$%X,(A4)\n", pc, v)
}

func (c *Processor) op28C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l D0,(A4)+\n", pc)
}

func (c *Processor) op28C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l D1,(A4)+\n", pc)
}

func (c *Processor) op28C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l D2,(A4)+\n", pc)
}

func (c *Processor) op28C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l D3,(A4)+\n", pc)
}

func (c *Processor) op28C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l D4,(A4)+\n", pc)
}

func (c *Processor) op28C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l D5,(A4)+\n", pc)
}

func (c *Processor) op28C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l D6,(A4)+\n", pc)
}

func (c *Processor) op28C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l D7,(A4)+\n", pc)
}

func (c *Processor) op28C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l A0,(A4)+\n", pc)
}

func (c *Processor) op28C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l A1,(A4)+\n", pc)
}

func (c *Processor) op28CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l A2,(A4)+\n", pc)
}

func (c *Processor) op28CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l A3,(A4)+\n", pc)
}

func (c *Processor) op28CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l A4,(A4)+\n", pc)
}

func (c *Processor) op28CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l A5,(A4)+\n", pc)
}

func (c *Processor) op28CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l A6,(A4)+\n", pc)
}

func (c *Processor) op28CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l A7,(A4)+\n", pc)
}

func (c *Processor) op28D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l (A0),(A4)+\n", pc)
}

func (c *Processor) op28D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l (A1),(A4)+\n", pc)
}

func (c *Processor) op28D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l (A2),(A4)+\n", pc)
}

func (c *Processor) op28D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l (A3),(A4)+\n", pc)
}

func (c *Processor) op28D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l (A4),(A4)+\n", pc)
}

func (c *Processor) op28D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l (A5),(A4)+\n", pc)
}

func (c *Processor) op28D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l (A6),(A4)+\n", pc)
}

func (c *Processor) op28D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l (A7),(A4)+\n", pc)
}

func (c *Processor) op28F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l $%X,(A4)+\n", pc, v)
}

func (c *Processor) op28F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l $%X,(A4)+\n", pc, v)
}

func (c *Processor) op28FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.l #$%X,(A4)+\n", pc, v)
}

func (c *Processor) op2900() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l D0,-(A4)\n", pc)
}

func (c *Processor) op2901() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l D1,-(A4)\n", pc)
}

func (c *Processor) op2902() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l D2,-(A4)\n", pc)
}

func (c *Processor) op2903() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l D3,-(A4)\n", pc)
}

func (c *Processor) op2904() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l D4,-(A4)\n", pc)
}

func (c *Processor) op2905() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l D5,-(A4)\n", pc)
}

func (c *Processor) op2906() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l D6,-(A4)\n", pc)
}

func (c *Processor) op2907() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l D7,-(A4)\n", pc)
}

func (c *Processor) op2908() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.l A0,-(A4)\n", pc)
}

func (c *Processor) op2909() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.l A1,-(A4)\n", pc)
}

func (c *Processor) op290A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.l A2,-(A4)\n", pc)
}

func (c *Processor) op290B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.l A3,-(A4)\n", pc)
}

func (c *Processor) op290C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.l A4,-(A4)\n", pc)
}

func (c *Processor) op290D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.l A5,-(A4)\n", pc)
}

func (c *Processor) op290E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.l A6,-(A4)\n", pc)
}

func (c *Processor) op290F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.l A7,-(A4)\n", pc)
}

func (c *Processor) op2910() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l (A0),-(A4)\n", pc)
}

func (c *Processor) op2911() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l (A1),-(A4)\n", pc)
}

func (c *Processor) op2912() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l (A2),-(A4)\n", pc)
}

func (c *Processor) op2913() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l (A3),-(A4)\n", pc)
}

func (c *Processor) op2914() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l (A4),-(A4)\n", pc)
}

func (c *Processor) op2915() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l (A5),-(A4)\n", pc)
}

func (c *Processor) op2916() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l (A6),-(A4)\n", pc)
}

func (c *Processor) op2917() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l (A7),-(A4)\n", pc)
}

func (c *Processor) op2938() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l $%X,-(A4)\n", pc, v)
}

func (c *Processor) op2939() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l $%X,-(A4)\n", pc, v)
}

func (c *Processor) op293C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.l #$%X,-(A4)\n", pc, v)
}

func (c *Processor) op2940() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D0,(%d,A4)\n", pc, disp)
}

func (c *Processor) op2941() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D1,(%d,A4)\n", pc, disp)
}

func (c *Processor) op2942() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D2,(%d,A4)\n", pc, disp)
}

func (c *Processor) op2943() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D3,(%d,A4)\n", pc, disp)
}

func (c *Processor) op2944() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D4,(%d,A4)\n", pc, disp)
}

func (c *Processor) op2945() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D5,(%d,A4)\n", pc, disp)
}

func (c *Processor) op2946() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D6,(%d,A4)\n", pc, disp)
}

func (c *Processor) op2947() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D7,(%d,A4)\n", pc, disp)
}

func (c *Processor) op2948() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A0,(%d,A4)\n", pc, disp)
}

func (c *Processor) op2949() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A1,(%d,A4)\n", pc, disp)
}

func (c *Processor) op294A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A2,(%d,A4)\n", pc, disp)
}

func (c *Processor) op294B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A3,(%d,A4)\n", pc, disp)
}

func (c *Processor) op294C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A4,(%d,A4)\n", pc, disp)
}

func (c *Processor) op294D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A5,(%d,A4)\n", pc, disp)
}

func (c *Processor) op294E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A6,(%d,A4)\n", pc, disp)
}

func (c *Processor) op294F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A7,(%d,A4)\n", pc, disp)
}

func (c *Processor) op2950() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A0),(%d,A4)\n", pc, disp)
}

func (c *Processor) op2951() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A1),(%d,A4)\n", pc, disp)
}

func (c *Processor) op2952() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A2),(%d,A4)\n", pc, disp)
}

func (c *Processor) op2953() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A3),(%d,A4)\n", pc, disp)
}

func (c *Processor) op2954() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A4),(%d,A4)\n", pc, disp)
}

func (c *Processor) op2955() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A5),(%d,A4)\n", pc, disp)
}

func (c *Processor) op2956() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A6),(%d,A4)\n", pc, disp)
}

func (c *Processor) op2957() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A7),(%d,A4)\n", pc, disp)
}

func (c *Processor) op2978() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,(%d,A4)\n", pc, v, disp)
}

func (c *Processor) op2979() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,(%d,A4)\n", pc, v, disp)
}

func (c *Processor) op297C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l #$%X,(%d,A4)\n", pc, v, disp)
}

func (c *Processor) op2A00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[5] = uint32(v)
	c.tracef("%04X move.l D0,D5\n", pc)
}

func (c *Processor) op2A01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[5] = uint32(v)
	c.tracef("%04X move.l D1,D5\n", pc)
}

func (c *Processor) op2A02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[5] = uint32(v)
	c.tracef("%04X move.l D2,D5\n", pc)
}

func (c *Processor) op2A03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[5] = uint32(v)
	c.tracef("%04X move.l D3,D5\n", pc)
}

func (c *Processor) op2A04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[5] = uint32(v)
	c.tracef("%04X move.l D4,D5\n", pc)
}

func (c *Processor) op2A05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[5] = uint32(v)
	c.tracef("%04X move.l D5,D5\n", pc)
}

func (c *Processor) op2A06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[5] = uint32(v)
	c.tracef("%04X move.l D6,D5\n", pc)
}

func (c *Processor) op2A07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[5] = uint32(v)
	c.tracef("%04X move.l D7,D5\n", pc)
}

func (c *Processor) op2A08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[5] = uint32(v)
	c.tracef("%04X move.l A0,D5\n", pc)
}

func (c *Processor) op2A09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[5] = uint32(v)
	c.tracef("%04X move.l A1,D5\n", pc)
}

func (c *Processor) op2A0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[5] = uint32(v)
	c.tracef("%04X move.l A2,D5\n", pc)
}

func (c *Processor) op2A0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[5] = uint32(v)
	c.tracef("%04X move.l A3,D5\n", pc)
}

func (c *Processor) op2A0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[5] = uint32(v)
	c.tracef("%04X move.l A4,D5\n", pc)
}

func (c *Processor) op2A0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[5] = uint32(v)
	c.tracef("%04X move.l A5,D5\n", pc)
}

func (c *Processor) op2A0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[5] = uint32(v)
	c.tracef("%04X move.l A6,D5\n", pc)
}

func (c *Processor) op2A0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[5] = uint32(v)
	c.tracef("%04X move.l A7,D5\n", pc)
}

func (c *Processor) op2A10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[5] = uint32(v)
	c.tracef("%04X move.l (A0),D5\n", pc)
}

func (c *Processor) op2A11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[5] = uint32(v)
	c.tracef("%04X move.l (A1),D5\n", pc)
}

func (c *Processor) op2A12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[5] = uint32(v)
	c.tracef("%04X move.l (A2),D5\n", pc)
}

func (c *Processor) op2A13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[5] = uint32(v)
	c.tracef("%04X move.l (A3),D5\n", pc)
}

func (c *Processor) op2A14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[5] = uint32(v)
	c.tracef("%04X move.l (A4),D5\n", pc)
}

func (c *Processor) op2A15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[5] = uint32(v)
	c.tracef("%04X move.l (A5),D5\n", pc)
}

func (c *Processor) op2A16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[5] = uint32(v)
	c.tracef("%04X move.l (A6),D5\n", pc)
}

func (c *Processor) op2A17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[5] = uint32(v)
	c.tracef("%04X move.l (A7),D5\n", pc)
}

func (c *Processor) op2A38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[5] = uint32(v)
	c.tracef("%04X move.l $%X,D5\n", pc, v)
}

func (c *Processor) op2A39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[5] = uint32(v)
	c.tracef("%04X move.l $%X,D5\n", pc, v)
}

func (c *Processor) op2A3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[5] = uint32(v)
	c.tracef("%04X move.l #$%X,D5\n", pc, v)
}

func (c *Processor) op2A40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l D0,A5\n", pc)
}

func (c *Processor) op2A41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l D1,A5\n", pc)
}

func (c *Processor) op2A42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l D2,A5\n", pc)
}

func (c *Processor) op2A43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l D3,A5\n", pc)
}

func (c *Processor) op2A44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l D4,A5\n", pc)
}

func (c *Processor) op2A45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l D5,A5\n", pc)
}

func (c *Processor) op2A46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l D6,A5\n", pc)
}

func (c *Processor) op2A47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l D7,A5\n", pc)
}

func (c *Processor) op2A48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l A0,A5\n", pc)
}

func (c *Processor) op2A49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l A1,A5\n", pc)
}

func (c *Processor) op2A4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l A2,A5\n", pc)
}

func (c *Processor) op2A4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l A3,A5\n", pc)
}

func (c *Processor) op2A4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l A4,A5\n", pc)
}

func (c *Processor) op2A4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l A5,A5\n", pc)
}

func (c *Processor) op2A4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l A6,A5\n", pc)
}

func (c *Processor) op2A4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l A7,A5\n", pc)
}

func (c *Processor) op2A50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l (A0),A5\n", pc)
}

func (c *Processor) op2A51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l (A1),A5\n", pc)
}

func (c *Processor) op2A52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l (A2),A5\n", pc)
}

func (c *Processor) op2A53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l (A3),A5\n", pc)
}

func (c *Processor) op2A54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l (A4),A5\n", pc)
}

func (c *Processor) op2A55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l (A5),A5\n", pc)
}

func (c *Processor) op2A56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l (A6),A5\n", pc)
}

func (c *Processor) op2A57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l (A7),A5\n", pc)
}

func (c *Processor) op2A78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l $%X,A5\n", pc, v)
}

func (c *Processor) op2A79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l $%X,A5\n", pc, v)
}

func (c *Processor) op2A7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[5] = uint32(v)
	c.tracef("%04X movea.l #$%X,A5\n", pc, v)
}

func (c *Processor) op2A80() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l D0,(A5)\n", pc)
}

func (c *Processor) op2A81() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l D1,(A5)\n", pc)
}

func (c *Processor) op2A82() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l D2,(A5)\n", pc)
}

func (c *Processor) op2A83() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l D3,(A5)\n", pc)
}

func (c *Processor) op2A84() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l D4,(A5)\n", pc)
}

func (c *Processor) op2A85() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l D5,(A5)\n", pc)
}

func (c *Processor) op2A86() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l D6,(A5)\n", pc)
}

func (c *Processor) op2A87() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l D7,(A5)\n", pc)
}

func (c *Processor) op2A88() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l A0,(A5)\n", pc)
}

func (c *Processor) op2A89() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l A1,(A5)\n", pc)
}

func (c *Processor) op2A8A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l A2,(A5)\n", pc)
}

func (c *Processor) op2A8B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l A3,(A5)\n", pc)
}

func (c *Processor) op2A8C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l A4,(A5)\n", pc)
}

func (c *Processor) op2A8D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l A5,(A5)\n", pc)
}

func (c *Processor) op2A8E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l A6,(A5)\n", pc)
}

func (c *Processor) op2A8F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l A7,(A5)\n", pc)
}

func (c *Processor) op2A90() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l (A0),(A5)\n", pc)
}

func (c *Processor) op2A91() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l (A1),(A5)\n", pc)
}

func (c *Processor) op2A92() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l (A2),(A5)\n", pc)
}

func (c *Processor) op2A93() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l (A3),(A5)\n", pc)
}

func (c *Processor) op2A94() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l (A4),(A5)\n", pc)
}

func (c *Processor) op2A95() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l (A5),(A5)\n", pc)
}

func (c *Processor) op2A96() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l (A6),(A5)\n", pc)
}

func (c *Processor) op2A97() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l (A7),(A5)\n", pc)
}

func (c *Processor) op2AB8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l $%X,(A5)\n", pc, v)
}

func (c *Processor) op2AB9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l $%X,(A5)\n", pc, v)
}

func (c *Processor) op2ABC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l #$%X,(A5)\n", pc, v)
}

func (c *Processor) op2AC0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l D0,(A5)+\n", pc)
}

func (c *Processor) op2AC1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l D1,(A5)+\n", pc)
}

func (c *Processor) op2AC2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l D2,(A5)+\n", pc)
}

func (c *Processor) op2AC3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l D3,(A5)+\n", pc)
}

func (c *Processor) op2AC4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l D4,(A5)+\n", pc)
}

func (c *Processor) op2AC5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l D5,(A5)+\n", pc)
}

func (c *Processor) op2AC6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l D6,(A5)+\n", pc)
}

func (c *Processor) op2AC7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l D7,(A5)+\n", pc)
}

func (c *Processor) op2AC8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l A0,(A5)+\n", pc)
}

func (c *Processor) op2AC9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l A1,(A5)+\n", pc)
}

func (c *Processor) op2ACA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l A2,(A5)+\n", pc)
}

func (c *Processor) op2ACB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l A3,(A5)+\n", pc)
}

func (c *Processor) op2ACC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l A4,(A5)+\n", pc)
}

func (c *Processor) op2ACD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l A5,(A5)+\n", pc)
}

func (c *Processor) op2ACE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l A6,(A5)+\n", pc)
}

func (c *Processor) op2ACF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l A7,(A5)+\n", pc)
}

func (c *Processor) op2AD0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l (A0),(A5)+\n", pc)
}

func (c *Processor) op2AD1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l (A1),(A5)+\n", pc)
}

func (c *Processor) op2AD2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l (A2),(A5)+\n", pc)
}

func (c *Processor) op2AD3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l (A3),(A5)+\n", pc)
}

func (c *Processor) op2AD4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l (A4),(A5)+\n", pc)
}

func (c *Processor) op2AD5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l (A5),(A5)+\n", pc)
}

func (c *Processor) op2AD6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l (A6),(A5)+\n", pc)
}

func (c *Processor) op2AD7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l (A7),(A5)+\n", pc)
}

func (c *Processor) op2AF8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l $%X,(A5)+\n", pc, v)
}

func (c *Processor) op2AF9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l $%X,(A5)+\n", pc, v)
}

func (c *Processor) op2AFC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.l #$%X,(A5)+\n", pc, v)
}

func (c *Processor) op2B00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l D0,-(A5)\n", pc)
}

func (c *Processor) op2B01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l D1,-(A5)\n", pc)
}

func (c *Processor) op2B02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l D2,-(A5)\n", pc)
}

func (c *Processor) op2B03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l D3,-(A5)\n", pc)
}

func (c *Processor) op2B04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l D4,-(A5)\n", pc)
}

func (c *Processor) op2B05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l D5,-(A5)\n", pc)
}

func (c *Processor) op2B06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l D6,-(A5)\n", pc)
}

func (c *Processor) op2B07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l D7,-(A5)\n", pc)
}

func (c *Processor) op2B08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.l A0,-(A5)\n", pc)
}

func (c *Processor) op2B09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.l A1,-(A5)\n", pc)
}

func (c *Processor) op2B0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.l A2,-(A5)\n", pc)
}

func (c *Processor) op2B0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.l A3,-(A5)\n", pc)
}

func (c *Processor) op2B0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.l A4,-(A5)\n", pc)
}

func (c *Processor) op2B0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.l A5,-(A5)\n", pc)
}

func (c *Processor) op2B0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.l A6,-(A5)\n", pc)
}

func (c *Processor) op2B0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.l A7,-(A5)\n", pc)
}

func (c *Processor) op2B10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l (A0),-(A5)\n", pc)
}

func (c *Processor) op2B11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l (A1),-(A5)\n", pc)
}

func (c *Processor) op2B12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l (A2),-(A5)\n", pc)
}

func (c *Processor) op2B13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l (A3),-(A5)\n", pc)
}

func (c *Processor) op2B14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l (A4),-(A5)\n", pc)
}

func (c *Processor) op2B15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l (A5),-(A5)\n", pc)
}

func (c *Processor) op2B16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l (A6),-(A5)\n", pc)
}

func (c *Processor) op2B17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l (A7),-(A5)\n", pc)
}

func (c *Processor) op2B38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l $%X,-(A5)\n", pc, v)
}

func (c *Processor) op2B39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l $%X,-(A5)\n", pc, v)
}

func (c *Processor) op2B3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.l #$%X,-(A5)\n", pc, v)
}

func (c *Processor) op2B40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D0,(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D1,(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D2,(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D3,(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D4,(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D5,(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D6,(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D7,(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A0,(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A1,(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A2,(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A3,(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A4,(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A5,(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A6,(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A7,(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A0),(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A1),(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A2),(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A3),(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A4),(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A5),(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A6),(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A7),(%d,A5)\n", pc, disp)
}

func (c *Processor) op2B78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,(%d,A5)\n", pc, v, disp)
}

func (c *Processor) op2B79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,(%d,A5)\n", pc, v, disp)
}

func (c *Processor) op2B7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l #$%X,(%d,A5)\n", pc, v, disp)
}

func (c *Processor) op2C00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[6] = uint32(v)
	c.tracef("%04X move.l D0,D6\n", pc)
}

func (c *Processor) op2C01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[6] = uint32(v)
	c.tracef("%04X move.l D1,D6\n", pc)
}

func (c *Processor) op2C02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[6] = uint32(v)
	c.tracef("%04X move.l D2,D6\n", pc)
}

func (c *Processor) op2C03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[6] = uint32(v)
	c.tracef("%04X move.l D3,D6\n", pc)
}

func (c *Processor) op2C04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[6] = uint32(v)
	c.tracef("%04X move.l D4,D6\n", pc)
}

func (c *Processor) op2C05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[6] = uint32(v)
	c.tracef("%04X move.l D5,D6\n", pc)
}

func (c *Processor) op2C06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[6] = uint32(v)
	c.tracef("%04X move.l D6,D6\n", pc)
}

func (c *Processor) op2C07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[6] = uint32(v)
	c.tracef("%04X move.l D7,D6\n", pc)
}

func (c *Processor) op2C08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[6] = uint32(v)
	c.tracef("%04X move.l A0,D6\n", pc)
}

func (c *Processor) op2C09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[6] = uint32(v)
	c.tracef("%04X move.l A1,D6\n", pc)
}

func (c *Processor) op2C0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[6] = uint32(v)
	c.tracef("%04X move.l A2,D6\n", pc)
}

func (c *Processor) op2C0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[6] = uint32(v)
	c.tracef("%04X move.l A3,D6\n", pc)
}

func (c *Processor) op2C0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[6] = uint32(v)
	c.tracef("%04X move.l A4,D6\n", pc)
}

func (c *Processor) op2C0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[6] = uint32(v)
	c.tracef("%04X move.l A5,D6\n", pc)
}

func (c *Processor) op2C0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[6] = uint32(v)
	c.tracef("%04X move.l A6,D6\n", pc)
}

func (c *Processor) op2C0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[6] = uint32(v)
	c.tracef("%04X move.l A7,D6\n", pc)
}

func (c *Processor) op2C10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[6] = uint32(v)
	c.tracef("%04X move.l (A0),D6\n", pc)
}

func (c *Processor) op2C11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[6] = uint32(v)
	c.tracef("%04X move.l (A1),D6\n", pc)
}

func (c *Processor) op2C12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[6] = uint32(v)
	c.tracef("%04X move.l (A2),D6\n", pc)
}

func (c *Processor) op2C13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[6] = uint32(v)
	c.tracef("%04X move.l (A3),D6\n", pc)
}

func (c *Processor) op2C14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[6] = uint32(v)
	c.tracef("%04X move.l (A4),D6\n", pc)
}

func (c *Processor) op2C15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[6] = uint32(v)
	c.tracef("%04X move.l (A5),D6\n", pc)
}

func (c *Processor) op2C16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[6] = uint32(v)
	c.tracef("%04X move.l (A6),D6\n", pc)
}

func (c *Processor) op2C17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[6] = uint32(v)
	c.tracef("%04X move.l (A7),D6\n", pc)
}

func (c *Processor) op2C38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[6] = uint32(v)
	c.tracef("%04X move.l $%X,D6\n", pc, v)
}

func (c *Processor) op2C39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[6] = uint32(v)
	c.tracef("%04X move.l $%X,D6\n", pc, v)
}

func (c *Processor) op2C3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[6] = uint32(v)
	c.tracef("%04X move.l #$%X,D6\n", pc, v)
}

func (c *Processor) op2C40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l D0,A6\n", pc)
}

func (c *Processor) op2C41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l D1,A6\n", pc)
}

func (c *Processor) op2C42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l D2,A6\n", pc)
}

func (c *Processor) op2C43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l D3,A6\n", pc)
}

func (c *Processor) op2C44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l D4,A6\n", pc)
}

func (c *Processor) op2C45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l D5,A6\n", pc)
}

func (c *Processor) op2C46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l D6,A6\n", pc)
}

func (c *Processor) op2C47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l D7,A6\n", pc)
}

func (c *Processor) op2C48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l A0,A6\n", pc)
}

func (c *Processor) op2C49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l A1,A6\n", pc)
}

func (c *Processor) op2C4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l A2,A6\n", pc)
}

func (c *Processor) op2C4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l A3,A6\n", pc)
}

func (c *Processor) op2C4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l A4,A6\n", pc)
}

func (c *Processor) op2C4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l A5,A6\n", pc)
}

func (c *Processor) op2C4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l A6,A6\n", pc)
}

func (c *Processor) op2C4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l A7,A6\n", pc)
}

func (c *Processor) op2C50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l (A0),A6\n", pc)
}

func (c *Processor) op2C51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l (A1),A6\n", pc)
}

func (c *Processor) op2C52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l (A2),A6\n", pc)
}

func (c *Processor) op2C53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l (A3),A6\n", pc)
}

func (c *Processor) op2C54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l (A4),A6\n", pc)
}

func (c *Processor) op2C55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l (A5),A6\n", pc)
}

func (c *Processor) op2C56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l (A6),A6\n", pc)
}

func (c *Processor) op2C57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l (A7),A6\n", pc)
}

func (c *Processor) op2C78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l $%X,A6\n", pc, v)
}

func (c *Processor) op2C79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l $%X,A6\n", pc, v)
}

func (c *Processor) op2C7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[6] = uint32(v)
	c.tracef("%04X movea.l #$%X,A6\n", pc, v)
}

func (c *Processor) op2C80() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l D0,(A6)\n", pc)
}

func (c *Processor) op2C81() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l D1,(A6)\n", pc)
}

func (c *Processor) op2C82() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l D2,(A6)\n", pc)
}

func (c *Processor) op2C83() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l D3,(A6)\n", pc)
}

func (c *Processor) op2C84() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l D4,(A6)\n", pc)
}

func (c *Processor) op2C85() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l D5,(A6)\n", pc)
}

func (c *Processor) op2C86() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l D6,(A6)\n", pc)
}

func (c *Processor) op2C87() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l D7,(A6)\n", pc)
}

func (c *Processor) op2C88() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l A0,(A6)\n", pc)
}

func (c *Processor) op2C89() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l A1,(A6)\n", pc)
}

func (c *Processor) op2C8A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l A2,(A6)\n", pc)
}

func (c *Processor) op2C8B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l A3,(A6)\n", pc)
}

func (c *Processor) op2C8C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l A4,(A6)\n", pc)
}

func (c *Processor) op2C8D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l A5,(A6)\n", pc)
}

func (c *Processor) op2C8E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l A6,(A6)\n", pc)
}

func (c *Processor) op2C8F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l A7,(A6)\n", pc)
}

func (c *Processor) op2C90() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l (A0),(A6)\n", pc)
}

func (c *Processor) op2C91() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l (A1),(A6)\n", pc)
}

func (c *Processor) op2C92() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l (A2),(A6)\n", pc)
}

func (c *Processor) op2C93() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l (A3),(A6)\n", pc)
}

func (c *Processor) op2C94() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l (A4),(A6)\n", pc)
}

func (c *Processor) op2C95() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l (A5),(A6)\n", pc)
}

func (c *Processor) op2C96() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l (A6),(A6)\n", pc)
}

func (c *Processor) op2C97() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l (A7),(A6)\n", pc)
}

func (c *Processor) op2CB8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l $%X,(A6)\n", pc, v)
}

func (c *Processor) op2CB9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l $%X,(A6)\n", pc, v)
}

func (c *Processor) op2CBC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l #$%X,(A6)\n", pc, v)
}

func (c *Processor) op2CC0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l D0,(A6)+\n", pc)
}

func (c *Processor) op2CC1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l D1,(A6)+\n", pc)
}

func (c *Processor) op2CC2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l D2,(A6)+\n", pc)
}

func (c *Processor) op2CC3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l D3,(A6)+\n", pc)
}

func (c *Processor) op2CC4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l D4,(A6)+\n", pc)
}

func (c *Processor) op2CC5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l D5,(A6)+\n", pc)
}

func (c *Processor) op2CC6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l D6,(A6)+\n", pc)
}

func (c *Processor) op2CC7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l D7,(A6)+\n", pc)
}

func (c *Processor) op2CC8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l A0,(A6)+\n", pc)
}

func (c *Processor) op2CC9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l A1,(A6)+\n", pc)
}

func (c *Processor) op2CCA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l A2,(A6)+\n", pc)
}

func (c *Processor) op2CCB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l A3,(A6)+\n", pc)
}

func (c *Processor) op2CCC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l A4,(A6)+\n", pc)
}

func (c *Processor) op2CCD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l A5,(A6)+\n", pc)
}

func (c *Processor) op2CCE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l A6,(A6)+\n", pc)
}

func (c *Processor) op2CCF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l A7,(A6)+\n", pc)
}

func (c *Processor) op2CD0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l (A0),(A6)+\n", pc)
}

func (c *Processor) op2CD1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l (A1),(A6)+\n", pc)
}

func (c *Processor) op2CD2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l (A2),(A6)+\n", pc)
}

func (c *Processor) op2CD3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l (A3),(A6)+\n", pc)
}

func (c *Processor) op2CD4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l (A4),(A6)+\n", pc)
}

func (c *Processor) op2CD5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l (A5),(A6)+\n", pc)
}

func (c *Processor) op2CD6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l (A6),(A6)+\n", pc)
}

func (c *Processor) op2CD7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l (A7),(A6)+\n", pc)
}

func (c *Processor) op2CF8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l $%X,(A6)+\n", pc, v)
}

func (c *Processor) op2CF9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l $%X,(A6)+\n", pc, v)
}

func (c *Processor) op2CFC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.l #$%X,(A6)+\n", pc, v)
}

func (c *Processor) op2D00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l D0,-(A6)\n", pc)
}

func (c *Processor) op2D01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l D1,-(A6)\n", pc)
}

func (c *Processor) op2D02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l D2,-(A6)\n", pc)
}

func (c *Processor) op2D03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l D3,-(A6)\n", pc)
}

func (c *Processor) op2D04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l D4,-(A6)\n", pc)
}

func (c *Processor) op2D05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l D5,-(A6)\n", pc)
}

func (c *Processor) op2D06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l D6,-(A6)\n", pc)
}

func (c *Processor) op2D07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l D7,-(A6)\n", pc)
}

func (c *Processor) op2D08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.l A0,-(A6)\n", pc)
}

func (c *Processor) op2D09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.l A1,-(A6)\n", pc)
}

func (c *Processor) op2D0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.l A2,-(A6)\n", pc)
}

func (c *Processor) op2D0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.l A3,-(A6)\n", pc)
}

func (c *Processor) op2D0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.l A4,-(A6)\n", pc)
}

func (c *Processor) op2D0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.l A5,-(A6)\n", pc)
}

func (c *Processor) op2D0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.l A6,-(A6)\n", pc)
}

func (c *Processor) op2D0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.l A7,-(A6)\n", pc)
}

func (c *Processor) op2D10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l (A0),-(A6)\n", pc)
}

func (c *Processor) op2D11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l (A1),-(A6)\n", pc)
}

func (c *Processor) op2D12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l (A2),-(A6)\n", pc)
}

func (c *Processor) op2D13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l (A3),-(A6)\n", pc)
}

func (c *Processor) op2D14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l (A4),-(A6)\n", pc)
}

func (c *Processor) op2D15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l (A5),-(A6)\n", pc)
}

func (c *Processor) op2D16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l (A6),-(A6)\n", pc)
}

func (c *Processor) op2D17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l (A7),-(A6)\n", pc)
}

func (c *Processor) op2D38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l $%X,-(A6)\n", pc, v)
}

func (c *Processor) op2D39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l $%X,-(A6)\n", pc, v)
}

func (c *Processor) op2D3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.l #$%X,-(A6)\n", pc, v)
}

func (c *Processor) op2D40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D0,(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D1,(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D2,(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D3,(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D4,(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D5,(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D6,(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D7,(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A0,(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A1,(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A2,(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A3,(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A4,(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A5,(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A6,(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A7,(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A0),(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A1),(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A2),(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A3),(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A4),(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A5),(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A6),(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A7),(%d,A6)\n", pc, disp)
}

func (c *Processor) op2D78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,(%d,A6)\n", pc, v, disp)
}

func (c *Processor) op2D79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,(%d,A6)\n", pc, v, disp)
}

func (c *Processor) op2D7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l #$%X,(%d,A6)\n", pc, v, disp)
}

func (c *Processor) op2E00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[7] = uint32(v)
	c.tracef("%04X move.l D0,D7\n", pc)
}

func (c *Processor) op2E01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[7] = uint32(v)
	c.tracef("%04X move.l D1,D7\n", pc)
}

func (c *Processor) op2E02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[7] = uint32(v)
	c.tracef("%04X move.l D2,D7\n", pc)
}

func (c *Processor) op2E03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[7] = uint32(v)
	c.tracef("%04X move.l D3,D7\n", pc)
}

func (c *Processor) op2E04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[7] = uint32(v)
	c.tracef("%04X move.l D4,D7\n", pc)
}

func (c *Processor) op2E05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[7] = uint32(v)
	c.tracef("%04X move.l D5,D7\n", pc)
}

func (c *Processor) op2E06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[7] = uint32(v)
	c.tracef("%04X move.l D6,D7\n", pc)
}

func (c *Processor) op2E07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[7] = uint32(v)
	c.tracef("%04X move.l D7,D7\n", pc)
}

func (c *Processor) op2E08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[7] = uint32(v)
	c.tracef("%04X move.l A0,D7\n", pc)
}

func (c *Processor) op2E09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[7] = uint32(v)
	c.tracef("%04X move.l A1,D7\n", pc)
}

func (c *Processor) op2E0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[7] = uint32(v)
	c.tracef("%04X move.l A2,D7\n", pc)
}

func (c *Processor) op2E0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[7] = uint32(v)
	c.tracef("%04X move.l A3,D7\n", pc)
}

func (c *Processor) op2E0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[7] = uint32(v)
	c.tracef("%04X move.l A4,D7\n", pc)
}

func (c *Processor) op2E0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[7] = uint32(v)
	c.tracef("%04X move.l A5,D7\n", pc)
}

func (c *Processor) op2E0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[7] = uint32(v)
	c.tracef("%04X move.l A6,D7\n", pc)
}

func (c *Processor) op2E0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[7] = uint32(v)
	c.tracef("%04X move.l A7,D7\n", pc)
}

func (c *Processor) op2E10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[7] = uint32(v)
	c.tracef("%04X move.l (A0),D7\n", pc)
}

func (c *Processor) op2E11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[7] = uint32(v)
	c.tracef("%04X move.l (A1),D7\n", pc)
}

func (c *Processor) op2E12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[7] = uint32(v)
	c.tracef("%04X move.l (A2),D7\n", pc)
}

func (c *Processor) op2E13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[7] = uint32(v)
	c.tracef("%04X move.l (A3),D7\n", pc)
}

func (c *Processor) op2E14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[7] = uint32(v)
	c.tracef("%04X move.l (A4),D7\n", pc)
}

func (c *Processor) op2E15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[7] = uint32(v)
	c.tracef("%04X move.l (A5),D7\n", pc)
}

func (c *Processor) op2E16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[7] = uint32(v)
	c.tracef("%04X move.l (A6),D7\n", pc)
}

func (c *Processor) op2E17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.D[7] = uint32(v)
	c.tracef("%04X move.l (A7),D7\n", pc)
}

func (c *Processor) op2E38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[7] = uint32(v)
	c.tracef("%04X move.l $%X,D7\n", pc, v)
}

func (c *Processor) op2E39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[7] = uint32(v)
	c.tracef("%04X move.l $%X,D7\n", pc, v)
}

func (c *Processor) op2E3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.D[7] = uint32(v)
	c.tracef("%04X move.l #$%X,D7\n", pc, v)
}

func (c *Processor) op2E40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l D0,A7\n", pc)
}

func (c *Processor) op2E41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l D1,A7\n", pc)
}

func (c *Processor) op2E42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l D2,A7\n", pc)
}

func (c *Processor) op2E43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l D3,A7\n", pc)
}

func (c *Processor) op2E44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l D4,A7\n", pc)
}

func (c *Processor) op2E45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l D5,A7\n", pc)
}

func (c *Processor) op2E46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l D6,A7\n", pc)
}

func (c *Processor) op2E47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l D7,A7\n", pc)
}

func (c *Processor) op2E48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l A0,A7\n", pc)
}

func (c *Processor) op2E49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l A1,A7\n", pc)
}

func (c *Processor) op2E4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l A2,A7\n", pc)
}

func (c *Processor) op2E4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l A3,A7\n", pc)
}

func (c *Processor) op2E4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l A4,A7\n", pc)
}

func (c *Processor) op2E4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l A5,A7\n", pc)
}

func (c *Processor) op2E4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l A6,A7\n", pc)
}

func (c *Processor) op2E4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l A7,A7\n", pc)
}

func (c *Processor) op2E50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l (A0),A7\n", pc)
}

func (c *Processor) op2E51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l (A1),A7\n", pc)
}

func (c *Processor) op2E52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l (A2),A7\n", pc)
}

func (c *Processor) op2E53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l (A3),A7\n", pc)
}

func (c *Processor) op2E54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l (A4),A7\n", pc)
}

func (c *Processor) op2E55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l (A5),A7\n", pc)
}

func (c *Processor) op2E56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l (A6),A7\n", pc)
}

func (c *Processor) op2E57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l (A7),A7\n", pc)
}

func (c *Processor) op2E78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l $%X,A7\n", pc, v)
}

func (c *Processor) op2E79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l $%X,A7\n", pc, v)
}

func (c *Processor) op2E7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[7] = uint32(v)
	c.tracef("%04X movea.l #$%X,A7\n", pc, v)
}

func (c *Processor) op2E80() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l D0,(A7)\n", pc)
}

func (c *Processor) op2E81() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l D1,(A7)\n", pc)
}

func (c *Processor) op2E82() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l D2,(A7)\n", pc)
}

func (c *Processor) op2E83() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l D3,(A7)\n", pc)
}

func (c *Processor) op2E84() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l D4,(A7)\n", pc)
}

func (c *Processor) op2E85() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l D5,(A7)\n", pc)
}

func (c *Processor) op2E86() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l D6,(A7)\n", pc)
}

func (c *Processor) op2E87() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l D7,(A7)\n", pc)
}

func (c *Processor) op2E88() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l A0,(A7)\n", pc)
}

func (c *Processor) op2E89() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l A1,(A7)\n", pc)
}

func (c *Processor) op2E8A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l A2,(A7)\n", pc)
}

func (c *Processor) op2E8B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l A3,(A7)\n", pc)
}

func (c *Processor) op2E8C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l A4,(A7)\n", pc)
}

func (c *Processor) op2E8D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l A5,(A7)\n", pc)
}

func (c *Processor) op2E8E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l A6,(A7)\n", pc)
}

func (c *Processor) op2E8F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l A7,(A7)\n", pc)
}

func (c *Processor) op2E90() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l (A0),(A7)\n", pc)
}

func (c *Processor) op2E91() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l (A1),(A7)\n", pc)
}

func (c *Processor) op2E92() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l (A2),(A7)\n", pc)
}

func (c *Processor) op2E93() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l (A3),(A7)\n", pc)
}

func (c *Processor) op2E94() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l (A4),(A7)\n", pc)
}

func (c *Processor) op2E95() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l (A5),(A7)\n", pc)
}

func (c *Processor) op2E96() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l (A6),(A7)\n", pc)
}

func (c *Processor) op2E97() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l (A7),(A7)\n", pc)
}

func (c *Processor) op2EB8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l $%X,(A7)\n", pc, v)
}

func (c *Processor) op2EB9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l $%X,(A7)\n", pc, v)
}

func (c *Processor) op2EBC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l #$%X,(A7)\n", pc, v)
}

func (c *Processor) op2EC0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l D0,(A7)+\n", pc)
}

func (c *Processor) op2EC1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l D1,(A7)+\n", pc)
}

func (c *Processor) op2EC2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l D2,(A7)+\n", pc)
}

func (c *Processor) op2EC3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l D3,(A7)+\n", pc)
}

func (c *Processor) op2EC4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l D4,(A7)+\n", pc)
}

func (c *Processor) op2EC5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l D5,(A7)+\n", pc)
}

func (c *Processor) op2EC6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l D6,(A7)+\n", pc)
}

func (c *Processor) op2EC7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l D7,(A7)+\n", pc)
}

func (c *Processor) op2EC8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l A0,(A7)+\n", pc)
}

func (c *Processor) op2EC9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l A1,(A7)+\n", pc)
}

func (c *Processor) op2ECA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l A2,(A7)+\n", pc)
}

func (c *Processor) op2ECB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l A3,(A7)+\n", pc)
}

func (c *Processor) op2ECC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l A4,(A7)+\n", pc)
}

func (c *Processor) op2ECD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l A5,(A7)+\n", pc)
}

func (c *Processor) op2ECE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l A6,(A7)+\n", pc)
}

func (c *Processor) op2ECF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l A7,(A7)+\n", pc)
}

func (c *Processor) op2ED0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l (A0),(A7)+\n", pc)
}

func (c *Processor) op2ED1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l (A1),(A7)+\n", pc)
}

func (c *Processor) op2ED2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l (A2),(A7)+\n", pc)
}

func (c *Processor) op2ED3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l (A3),(A7)+\n", pc)
}

func (c *Processor) op2ED4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l (A4),(A7)+\n", pc)
}

func (c *Processor) op2ED5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l (A5),(A7)+\n", pc)
}

func (c *Processor) op2ED6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l (A6),(A7)+\n", pc)
}

func (c *Processor) op2ED7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l (A7),(A7)+\n", pc)
}

func (c *Processor) op2EF8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l $%X,(A7)+\n", pc, v)
}

func (c *Processor) op2EF9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l $%X,(A7)+\n", pc, v)
}

func (c *Processor) op2EFC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.l #$%X,(A7)+\n", pc, v)
}

func (c *Processor) op2F00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l D0,-(A7)\n", pc)
}

func (c *Processor) op2F01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l D1,-(A7)\n", pc)
}

func (c *Processor) op2F02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l D2,-(A7)\n", pc)
}

func (c *Processor) op2F03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l D3,-(A7)\n", pc)
}

func (c *Processor) op2F04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l D4,-(A7)\n", pc)
}

func (c *Processor) op2F05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l D5,-(A7)\n", pc)
}

func (c *Processor) op2F06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l D6,-(A7)\n", pc)
}

func (c *Processor) op2F07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l D7,-(A7)\n", pc)
}

func (c *Processor) op2F08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.l A0,-(A7)\n", pc)
}

func (c *Processor) op2F09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.l A1,-(A7)\n", pc)
}

func (c *Processor) op2F0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.l A2,-(A7)\n", pc)
}

func (c *Processor) op2F0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.l A3,-(A7)\n", pc)
}

func (c *Processor) op2F0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.l A4,-(A7)\n", pc)
}

func (c *Processor) op2F0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.l A5,-(A7)\n", pc)
}

func (c *Processor) op2F0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.l A6,-(A7)\n", pc)
}

func (c *Processor) op2F0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.l A7,-(A7)\n", pc)
}

func (c *Processor) op2F10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l (A0),-(A7)\n", pc)
}

func (c *Processor) op2F11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l (A1),-(A7)\n", pc)
}

func (c *Processor) op2F12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l (A2),-(A7)\n", pc)
}

func (c *Processor) op2F13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l (A3),-(A7)\n", pc)
}

func (c *Processor) op2F14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l (A4),-(A7)\n", pc)
}

func (c *Processor) op2F15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l (A5),-(A7)\n", pc)
}

func (c *Processor) op2F16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l (A6),-(A7)\n", pc)
}

func (c *Processor) op2F17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l (A7),-(A7)\n", pc)
}

func (c *Processor) op2F38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l $%X,-(A7)\n", pc, v)
}

func (c *Processor) op2F39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l $%X,-(A7)\n", pc, v)
}

func (c *Processor) op2F3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.l #$%X,-(A7)\n", pc, v)
}

func (c *Processor) op2F40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D0,(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D1,(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D2,(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D3,(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D4,(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D5,(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D6,(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l D7,(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A0,(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A1,(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A2,(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A3,(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A4,(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A5,(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A6,(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.l A7,(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A0),(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A1),(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A2),(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A3),(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A4),(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A5),(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A6),(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:4])
	if c.err != nil {
		return
	}
	v := uint32(c.buf[3]) | uint32(c.buf[2])<<8 | uint32(c.buf[1])<<16 | uint32(c.buf[0])<<24
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l (A7),(%d,A7)\n", pc, disp)
}

func (c *Processor) op2F78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,(%d,A7)\n", pc, v, disp)
}

func (c *Processor) op2F79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l $%X,(%d,A7)\n", pc, v, disp)
}

func (c *Processor) op2F7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	v := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.l #$%X,(%d,A7)\n", pc, v, disp)
}

func (c *Processor) op3000() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[0] = uint32(v)
	c.tracef("%04X move.w D0,D0\n", pc)
}

func (c *Processor) op3001() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[0] = uint32(v)
	c.tracef("%04X move.w D1,D0\n", pc)
}

func (c *Processor) op3002() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[0] = uint32(v)
	c.tracef("%04X move.w D2,D0\n", pc)
}

func (c *Processor) op3003() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[0] = uint32(v)
	c.tracef("%04X move.w D3,D0\n", pc)
}

func (c *Processor) op3004() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[0] = uint32(v)
	c.tracef("%04X move.w D4,D0\n", pc)
}

func (c *Processor) op3005() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[0] = uint32(v)
	c.tracef("%04X move.w D5,D0\n", pc)
}

func (c *Processor) op3006() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[0] = uint32(v)
	c.tracef("%04X move.w D6,D0\n", pc)
}

func (c *Processor) op3007() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[0] = uint32(v)
	c.tracef("%04X move.w D7,D0\n", pc)
}

func (c *Processor) op3008() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[0] = uint32(v)
	c.tracef("%04X move.w A0,D0\n", pc)
}

func (c *Processor) op3009() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[0] = uint32(v)
	c.tracef("%04X move.w A1,D0\n", pc)
}

func (c *Processor) op300A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[0] = uint32(v)
	c.tracef("%04X move.w A2,D0\n", pc)
}

func (c *Processor) op300B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[0] = uint32(v)
	c.tracef("%04X move.w A3,D0\n", pc)
}

func (c *Processor) op300C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[0] = uint32(v)
	c.tracef("%04X move.w A4,D0\n", pc)
}

func (c *Processor) op300D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[0] = uint32(v)
	c.tracef("%04X move.w A5,D0\n", pc)
}

func (c *Processor) op300E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[0] = uint32(v)
	c.tracef("%04X move.w A6,D0\n", pc)
}

func (c *Processor) op300F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[0] = uint32(v)
	c.tracef("%04X move.w A7,D0\n", pc)
}

func (c *Processor) op3010() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[0] = uint32(v)
	c.tracef("%04X move.w (A0),D0\n", pc)
}

func (c *Processor) op3011() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[0] = uint32(v)
	c.tracef("%04X move.w (A1),D0\n", pc)
}

func (c *Processor) op3012() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[0] = uint32(v)
	c.tracef("%04X move.w (A2),D0\n", pc)
}

func (c *Processor) op3013() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[0] = uint32(v)
	c.tracef("%04X move.w (A3),D0\n", pc)
}

func (c *Processor) op3014() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[0] = uint32(v)
	c.tracef("%04X move.w (A4),D0\n", pc)
}

func (c *Processor) op3015() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[0] = uint32(v)
	c.tracef("%04X move.w (A5),D0\n", pc)
}

func (c *Processor) op3016() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[0] = uint32(v)
	c.tracef("%04X move.w (A6),D0\n", pc)
}

func (c *Processor) op3017() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[0] = uint32(v)
	c.tracef("%04X move.w (A7),D0\n", pc)
}

func (c *Processor) op3038() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[0] = uint32(v)
	c.tracef("%04X move.w $%X,D0\n", pc, v)
}

func (c *Processor) op3039() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[0] = uint32(v)
	c.tracef("%04X move.w $%X,D0\n", pc, v)
}

func (c *Processor) op303C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[0] = uint32(v)
	c.tracef("%04X move.w #$%X,D0\n", pc, v)
}

func (c *Processor) op3040() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w D0,A0\n", pc)
}

func (c *Processor) op3041() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w D1,A0\n", pc)
}

func (c *Processor) op3042() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w D2,A0\n", pc)
}

func (c *Processor) op3043() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w D3,A0\n", pc)
}

func (c *Processor) op3044() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w D4,A0\n", pc)
}

func (c *Processor) op3045() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w D5,A0\n", pc)
}

func (c *Processor) op3046() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w D6,A0\n", pc)
}

func (c *Processor) op3047() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w D7,A0\n", pc)
}

func (c *Processor) op3048() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w A0,A0\n", pc)
}

func (c *Processor) op3049() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w A1,A0\n", pc)
}

func (c *Processor) op304A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w A2,A0\n", pc)
}

func (c *Processor) op304B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w A3,A0\n", pc)
}

func (c *Processor) op304C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w A4,A0\n", pc)
}

func (c *Processor) op304D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w A5,A0\n", pc)
}

func (c *Processor) op304E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w A6,A0\n", pc)
}

func (c *Processor) op304F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w A7,A0\n", pc)
}

func (c *Processor) op3050() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w (A0),A0\n", pc)
}

func (c *Processor) op3051() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w (A1),A0\n", pc)
}

func (c *Processor) op3052() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w (A2),A0\n", pc)
}

func (c *Processor) op3053() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w (A3),A0\n", pc)
}

func (c *Processor) op3054() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w (A4),A0\n", pc)
}

func (c *Processor) op3055() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w (A5),A0\n", pc)
}

func (c *Processor) op3056() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w (A6),A0\n", pc)
}

func (c *Processor) op3057() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w (A7),A0\n", pc)
}

func (c *Processor) op3078() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w $%X,A0\n", pc, v)
}

func (c *Processor) op3079() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w $%X,A0\n", pc, v)
}

func (c *Processor) op307C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] = uint32(v)
	c.tracef("%04X movea.w #$%X,A0\n", pc, v)
}

func (c *Processor) op3080() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w D0,(A0)\n", pc)
}

func (c *Processor) op3081() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w D1,(A0)\n", pc)
}

func (c *Processor) op3082() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w D2,(A0)\n", pc)
}

func (c *Processor) op3083() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w D3,(A0)\n", pc)
}

func (c *Processor) op3084() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w D4,(A0)\n", pc)
}

func (c *Processor) op3085() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w D5,(A0)\n", pc)
}

func (c *Processor) op3086() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w D6,(A0)\n", pc)
}

func (c *Processor) op3087() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w D7,(A0)\n", pc)
}

func (c *Processor) op3088() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w A0,(A0)\n", pc)
}

func (c *Processor) op3089() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w A1,(A0)\n", pc)
}

func (c *Processor) op308A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w A2,(A0)\n", pc)
}

func (c *Processor) op308B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w A3,(A0)\n", pc)
}

func (c *Processor) op308C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w A4,(A0)\n", pc)
}

func (c *Processor) op308D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w A5,(A0)\n", pc)
}

func (c *Processor) op308E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w A6,(A0)\n", pc)
}

func (c *Processor) op308F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w A7,(A0)\n", pc)
}

func (c *Processor) op3090() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w (A0),(A0)\n", pc)
}

func (c *Processor) op3091() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w (A1),(A0)\n", pc)
}

func (c *Processor) op3092() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w (A2),(A0)\n", pc)
}

func (c *Processor) op3093() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w (A3),(A0)\n", pc)
}

func (c *Processor) op3094() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w (A4),(A0)\n", pc)
}

func (c *Processor) op3095() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w (A5),(A0)\n", pc)
}

func (c *Processor) op3096() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w (A6),(A0)\n", pc)
}

func (c *Processor) op3097() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w (A7),(A0)\n", pc)
}

func (c *Processor) op30B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w $%X,(A0)\n", pc, v)
}

func (c *Processor) op30B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w $%X,(A0)\n", pc, v)
}

func (c *Processor) op30BC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w #$%X,(A0)\n", pc, v)
}

func (c *Processor) op30C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w D0,(A0)+\n", pc)
}

func (c *Processor) op30C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w D1,(A0)+\n", pc)
}

func (c *Processor) op30C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w D2,(A0)+\n", pc)
}

func (c *Processor) op30C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w D3,(A0)+\n", pc)
}

func (c *Processor) op30C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w D4,(A0)+\n", pc)
}

func (c *Processor) op30C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w D5,(A0)+\n", pc)
}

func (c *Processor) op30C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w D6,(A0)+\n", pc)
}

func (c *Processor) op30C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w D7,(A0)+\n", pc)
}

func (c *Processor) op30C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w A0,(A0)+\n", pc)
}

func (c *Processor) op30C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w A1,(A0)+\n", pc)
}

func (c *Processor) op30CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w A2,(A0)+\n", pc)
}

func (c *Processor) op30CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w A3,(A0)+\n", pc)
}

func (c *Processor) op30CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w A4,(A0)+\n", pc)
}

func (c *Processor) op30CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w A5,(A0)+\n", pc)
}

func (c *Processor) op30CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w A6,(A0)+\n", pc)
}

func (c *Processor) op30CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w A7,(A0)+\n", pc)
}

func (c *Processor) op30D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w (A0),(A0)+\n", pc)
}

func (c *Processor) op30D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w (A1),(A0)+\n", pc)
}

func (c *Processor) op30D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w (A2),(A0)+\n", pc)
}

func (c *Processor) op30D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w (A3),(A0)+\n", pc)
}

func (c *Processor) op30D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w (A4),(A0)+\n", pc)
}

func (c *Processor) op30D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w (A5),(A0)+\n", pc)
}

func (c *Processor) op30D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w (A6),(A0)+\n", pc)
}

func (c *Processor) op30D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w (A7),(A0)+\n", pc)
}

func (c *Processor) op30F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w $%X,(A0)+\n", pc, v)
}

func (c *Processor) op30F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w $%X,(A0)+\n", pc, v)
}

func (c *Processor) op30FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[0], uint32(v))
	c.A[0] += 4
	c.tracef("%04X move.w #$%X,(A0)+\n", pc, v)
}

func (c *Processor) op3100() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w D0,-(A0)\n", pc)
}

func (c *Processor) op3101() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w D1,-(A0)\n", pc)
}

func (c *Processor) op3102() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w D2,-(A0)\n", pc)
}

func (c *Processor) op3103() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w D3,-(A0)\n", pc)
}

func (c *Processor) op3104() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w D4,-(A0)\n", pc)
}

func (c *Processor) op3105() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w D5,-(A0)\n", pc)
}

func (c *Processor) op3106() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w D6,-(A0)\n", pc)
}

func (c *Processor) op3107() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w D7,-(A0)\n", pc)
}

func (c *Processor) op3108() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.w A0,-(A0)\n", pc)
}

func (c *Processor) op3109() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.w A1,-(A0)\n", pc)
}

func (c *Processor) op310A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.w A2,-(A0)\n", pc)
}

func (c *Processor) op310B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.w A3,-(A0)\n", pc)
}

func (c *Processor) op310C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.w A4,-(A0)\n", pc)
}

func (c *Processor) op310D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.w A5,-(A0)\n", pc)
}

func (c *Processor) op310E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.w A6,-(A0)\n", pc)
}

func (c *Processor) op310F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X movep.w A7,-(A0)\n", pc)
}

func (c *Processor) op3110() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w (A0),-(A0)\n", pc)
}

func (c *Processor) op3111() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w (A1),-(A0)\n", pc)
}

func (c *Processor) op3112() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w (A2),-(A0)\n", pc)
}

func (c *Processor) op3113() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w (A3),-(A0)\n", pc)
}

func (c *Processor) op3114() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w (A4),-(A0)\n", pc)
}

func (c *Processor) op3115() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w (A5),-(A0)\n", pc)
}

func (c *Processor) op3116() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w (A6),-(A0)\n", pc)
}

func (c *Processor) op3117() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w (A7),-(A0)\n", pc)
}

func (c *Processor) op3138() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w $%X,-(A0)\n", pc, v)
}

func (c *Processor) op3139() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w $%X,-(A0)\n", pc, v)
}

func (c *Processor) op313C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[0] -= 4
	c.writeLong(c.A[0], uint32(v))
	c.tracef("%04X move.w #$%X,-(A0)\n", pc, v)
}

func (c *Processor) op3140() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D0,(%d,A0)\n", pc, disp)
}

func (c *Processor) op3141() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D1,(%d,A0)\n", pc, disp)
}

func (c *Processor) op3142() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D2,(%d,A0)\n", pc, disp)
}

func (c *Processor) op3143() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D3,(%d,A0)\n", pc, disp)
}

func (c *Processor) op3144() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D4,(%d,A0)\n", pc, disp)
}

func (c *Processor) op3145() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D5,(%d,A0)\n", pc, disp)
}

func (c *Processor) op3146() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D6,(%d,A0)\n", pc, disp)
}

func (c *Processor) op3147() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D7,(%d,A0)\n", pc, disp)
}

func (c *Processor) op3148() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A0,(%d,A0)\n", pc, disp)
}

func (c *Processor) op3149() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A1,(%d,A0)\n", pc, disp)
}

func (c *Processor) op314A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A2,(%d,A0)\n", pc, disp)
}

func (c *Processor) op314B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A3,(%d,A0)\n", pc, disp)
}

func (c *Processor) op314C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A4,(%d,A0)\n", pc, disp)
}

func (c *Processor) op314D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A5,(%d,A0)\n", pc, disp)
}

func (c *Processor) op314E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A6,(%d,A0)\n", pc, disp)
}

func (c *Processor) op314F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A7,(%d,A0)\n", pc, disp)
}

func (c *Processor) op3150() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A0),(%d,A0)\n", pc, disp)
}

func (c *Processor) op3151() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A1),(%d,A0)\n", pc, disp)
}

func (c *Processor) op3152() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A2),(%d,A0)\n", pc, disp)
}

func (c *Processor) op3153() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A3),(%d,A0)\n", pc, disp)
}

func (c *Processor) op3154() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A4),(%d,A0)\n", pc, disp)
}

func (c *Processor) op3155() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A5),(%d,A0)\n", pc, disp)
}

func (c *Processor) op3156() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A6),(%d,A0)\n", pc, disp)
}

func (c *Processor) op3157() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A7),(%d,A0)\n", pc, disp)
}

func (c *Processor) op3178() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,(%d,A0)\n", pc, v, disp)
}

func (c *Processor) op3179() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,(%d,A0)\n", pc, v, disp)
}

func (c *Processor) op317C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[0]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w #$%X,(%d,A0)\n", pc, v, disp)
}

func (c *Processor) op31C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w D0,$%X\n", pc, addr)
}

func (c *Processor) op31C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w D1,$%X\n", pc, addr)
}

func (c *Processor) op31C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w D2,$%X\n", pc, addr)
}

func (c *Processor) op31C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w D3,$%X\n", pc, addr)
}

func (c *Processor) op31C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w D4,$%X\n", pc, addr)
}

func (c *Processor) op31C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w D5,$%X\n", pc, addr)
}

func (c *Processor) op31C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w D6,$%X\n", pc, addr)
}

func (c *Processor) op31C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w D7,$%X\n", pc, addr)
}

func (c *Processor) op31C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.w A0,$%X\n", pc, addr)
}

func (c *Processor) op31C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.w A1,$%X\n", pc, addr)
}

func (c *Processor) op31CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.w A2,$%X\n", pc, addr)
}

func (c *Processor) op31CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.w A3,$%X\n", pc, addr)
}

func (c *Processor) op31CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.w A4,$%X\n", pc, addr)
}

func (c *Processor) op31CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.w A5,$%X\n", pc, addr)
}

func (c *Processor) op31CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.w A6,$%X\n", pc, addr)
}

func (c *Processor) op31CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X movep.w A7,$%X\n", pc, addr)
}

func (c *Processor) op31D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w (A0),$%X\n", pc, addr)
}

func (c *Processor) op31D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w (A1),$%X\n", pc, addr)
}

func (c *Processor) op31D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w (A2),$%X\n", pc, addr)
}

func (c *Processor) op31D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w (A3),$%X\n", pc, addr)
}

func (c *Processor) op31D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w (A4),$%X\n", pc, addr)
}

func (c *Processor) op31D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w (A5),$%X\n", pc, addr)
}

func (c *Processor) op31D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w (A6),$%X\n", pc, addr)
}

func (c *Processor) op31D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w (A7),$%X\n", pc, addr)
}

func (c *Processor) op31F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w $%X,$%X\n", pc, v, addr)
}

func (c *Processor) op31F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w $%X,$%X\n", pc, v, addr)
}

func (c *Processor) op31FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	addr := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(uint32(addr), uint32(v))
	c.tracef("%04X move.w #$%X,$%X\n", pc, v, addr)
}

func (c *Processor) op3200() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[1] = uint32(v)
	c.tracef("%04X move.w D0,D1\n", pc)
}

func (c *Processor) op3201() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[1] = uint32(v)
	c.tracef("%04X move.w D1,D1\n", pc)
}

func (c *Processor) op3202() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[1] = uint32(v)
	c.tracef("%04X move.w D2,D1\n", pc)
}

func (c *Processor) op3203() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[1] = uint32(v)
	c.tracef("%04X move.w D3,D1\n", pc)
}

func (c *Processor) op3204() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[1] = uint32(v)
	c.tracef("%04X move.w D4,D1\n", pc)
}

func (c *Processor) op3205() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[1] = uint32(v)
	c.tracef("%04X move.w D5,D1\n", pc)
}

func (c *Processor) op3206() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[1] = uint32(v)
	c.tracef("%04X move.w D6,D1\n", pc)
}

func (c *Processor) op3207() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[1] = uint32(v)
	c.tracef("%04X move.w D7,D1\n", pc)
}

func (c *Processor) op3208() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[1] = uint32(v)
	c.tracef("%04X move.w A0,D1\n", pc)
}

func (c *Processor) op3209() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[1] = uint32(v)
	c.tracef("%04X move.w A1,D1\n", pc)
}

func (c *Processor) op320A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[1] = uint32(v)
	c.tracef("%04X move.w A2,D1\n", pc)
}

func (c *Processor) op320B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[1] = uint32(v)
	c.tracef("%04X move.w A3,D1\n", pc)
}

func (c *Processor) op320C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[1] = uint32(v)
	c.tracef("%04X move.w A4,D1\n", pc)
}

func (c *Processor) op320D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[1] = uint32(v)
	c.tracef("%04X move.w A5,D1\n", pc)
}

func (c *Processor) op320E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[1] = uint32(v)
	c.tracef("%04X move.w A6,D1\n", pc)
}

func (c *Processor) op320F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[1] = uint32(v)
	c.tracef("%04X move.w A7,D1\n", pc)
}

func (c *Processor) op3210() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[1] = uint32(v)
	c.tracef("%04X move.w (A0),D1\n", pc)
}

func (c *Processor) op3211() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[1] = uint32(v)
	c.tracef("%04X move.w (A1),D1\n", pc)
}

func (c *Processor) op3212() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[1] = uint32(v)
	c.tracef("%04X move.w (A2),D1\n", pc)
}

func (c *Processor) op3213() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[1] = uint32(v)
	c.tracef("%04X move.w (A3),D1\n", pc)
}

func (c *Processor) op3214() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[1] = uint32(v)
	c.tracef("%04X move.w (A4),D1\n", pc)
}

func (c *Processor) op3215() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[1] = uint32(v)
	c.tracef("%04X move.w (A5),D1\n", pc)
}

func (c *Processor) op3216() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[1] = uint32(v)
	c.tracef("%04X move.w (A6),D1\n", pc)
}

func (c *Processor) op3217() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[1] = uint32(v)
	c.tracef("%04X move.w (A7),D1\n", pc)
}

func (c *Processor) op3238() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[1] = uint32(v)
	c.tracef("%04X move.w $%X,D1\n", pc, v)
}

func (c *Processor) op3239() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[1] = uint32(v)
	c.tracef("%04X move.w $%X,D1\n", pc, v)
}

func (c *Processor) op323C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[1] = uint32(v)
	c.tracef("%04X move.w #$%X,D1\n", pc, v)
}

func (c *Processor) op3240() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w D0,A1\n", pc)
}

func (c *Processor) op3241() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w D1,A1\n", pc)
}

func (c *Processor) op3242() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w D2,A1\n", pc)
}

func (c *Processor) op3243() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w D3,A1\n", pc)
}

func (c *Processor) op3244() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w D4,A1\n", pc)
}

func (c *Processor) op3245() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w D5,A1\n", pc)
}

func (c *Processor) op3246() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w D6,A1\n", pc)
}

func (c *Processor) op3247() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w D7,A1\n", pc)
}

func (c *Processor) op3248() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w A0,A1\n", pc)
}

func (c *Processor) op3249() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w A1,A1\n", pc)
}

func (c *Processor) op324A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w A2,A1\n", pc)
}

func (c *Processor) op324B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w A3,A1\n", pc)
}

func (c *Processor) op324C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w A4,A1\n", pc)
}

func (c *Processor) op324D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w A5,A1\n", pc)
}

func (c *Processor) op324E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w A6,A1\n", pc)
}

func (c *Processor) op324F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w A7,A1\n", pc)
}

func (c *Processor) op3250() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w (A0),A1\n", pc)
}

func (c *Processor) op3251() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w (A1),A1\n", pc)
}

func (c *Processor) op3252() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w (A2),A1\n", pc)
}

func (c *Processor) op3253() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w (A3),A1\n", pc)
}

func (c *Processor) op3254() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w (A4),A1\n", pc)
}

func (c *Processor) op3255() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w (A5),A1\n", pc)
}

func (c *Processor) op3256() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w (A6),A1\n", pc)
}

func (c *Processor) op3257() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w (A7),A1\n", pc)
}

func (c *Processor) op3278() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w $%X,A1\n", pc, v)
}

func (c *Processor) op3279() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w $%X,A1\n", pc, v)
}

func (c *Processor) op327C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] = uint32(v)
	c.tracef("%04X movea.w #$%X,A1\n", pc, v)
}

func (c *Processor) op3280() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w D0,(A1)\n", pc)
}

func (c *Processor) op3281() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w D1,(A1)\n", pc)
}

func (c *Processor) op3282() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w D2,(A1)\n", pc)
}

func (c *Processor) op3283() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w D3,(A1)\n", pc)
}

func (c *Processor) op3284() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w D4,(A1)\n", pc)
}

func (c *Processor) op3285() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w D5,(A1)\n", pc)
}

func (c *Processor) op3286() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w D6,(A1)\n", pc)
}

func (c *Processor) op3287() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w D7,(A1)\n", pc)
}

func (c *Processor) op3288() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w A0,(A1)\n", pc)
}

func (c *Processor) op3289() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w A1,(A1)\n", pc)
}

func (c *Processor) op328A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w A2,(A1)\n", pc)
}

func (c *Processor) op328B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w A3,(A1)\n", pc)
}

func (c *Processor) op328C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w A4,(A1)\n", pc)
}

func (c *Processor) op328D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w A5,(A1)\n", pc)
}

func (c *Processor) op328E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w A6,(A1)\n", pc)
}

func (c *Processor) op328F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w A7,(A1)\n", pc)
}

func (c *Processor) op3290() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w (A0),(A1)\n", pc)
}

func (c *Processor) op3291() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w (A1),(A1)\n", pc)
}

func (c *Processor) op3292() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w (A2),(A1)\n", pc)
}

func (c *Processor) op3293() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w (A3),(A1)\n", pc)
}

func (c *Processor) op3294() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w (A4),(A1)\n", pc)
}

func (c *Processor) op3295() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w (A5),(A1)\n", pc)
}

func (c *Processor) op3296() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w (A6),(A1)\n", pc)
}

func (c *Processor) op3297() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w (A7),(A1)\n", pc)
}

func (c *Processor) op32B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w $%X,(A1)\n", pc, v)
}

func (c *Processor) op32B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w $%X,(A1)\n", pc, v)
}

func (c *Processor) op32BC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w #$%X,(A1)\n", pc, v)
}

func (c *Processor) op32C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w D0,(A1)+\n", pc)
}

func (c *Processor) op32C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w D1,(A1)+\n", pc)
}

func (c *Processor) op32C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w D2,(A1)+\n", pc)
}

func (c *Processor) op32C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w D3,(A1)+\n", pc)
}

func (c *Processor) op32C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w D4,(A1)+\n", pc)
}

func (c *Processor) op32C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w D5,(A1)+\n", pc)
}

func (c *Processor) op32C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w D6,(A1)+\n", pc)
}

func (c *Processor) op32C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w D7,(A1)+\n", pc)
}

func (c *Processor) op32C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w A0,(A1)+\n", pc)
}

func (c *Processor) op32C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w A1,(A1)+\n", pc)
}

func (c *Processor) op32CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w A2,(A1)+\n", pc)
}

func (c *Processor) op32CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w A3,(A1)+\n", pc)
}

func (c *Processor) op32CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w A4,(A1)+\n", pc)
}

func (c *Processor) op32CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w A5,(A1)+\n", pc)
}

func (c *Processor) op32CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w A6,(A1)+\n", pc)
}

func (c *Processor) op32CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w A7,(A1)+\n", pc)
}

func (c *Processor) op32D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w (A0),(A1)+\n", pc)
}

func (c *Processor) op32D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w (A1),(A1)+\n", pc)
}

func (c *Processor) op32D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w (A2),(A1)+\n", pc)
}

func (c *Processor) op32D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w (A3),(A1)+\n", pc)
}

func (c *Processor) op32D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w (A4),(A1)+\n", pc)
}

func (c *Processor) op32D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w (A5),(A1)+\n", pc)
}

func (c *Processor) op32D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w (A6),(A1)+\n", pc)
}

func (c *Processor) op32D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w (A7),(A1)+\n", pc)
}

func (c *Processor) op32F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w $%X,(A1)+\n", pc, v)
}

func (c *Processor) op32F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w $%X,(A1)+\n", pc, v)
}

func (c *Processor) op32FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[1], uint32(v))
	c.A[1] += 4
	c.tracef("%04X move.w #$%X,(A1)+\n", pc, v)
}

func (c *Processor) op3300() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w D0,-(A1)\n", pc)
}

func (c *Processor) op3301() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w D1,-(A1)\n", pc)
}

func (c *Processor) op3302() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w D2,-(A1)\n", pc)
}

func (c *Processor) op3303() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w D3,-(A1)\n", pc)
}

func (c *Processor) op3304() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w D4,-(A1)\n", pc)
}

func (c *Processor) op3305() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w D5,-(A1)\n", pc)
}

func (c *Processor) op3306() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w D6,-(A1)\n", pc)
}

func (c *Processor) op3307() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w D7,-(A1)\n", pc)
}

func (c *Processor) op3308() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.w A0,-(A1)\n", pc)
}

func (c *Processor) op3309() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.w A1,-(A1)\n", pc)
}

func (c *Processor) op330A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.w A2,-(A1)\n", pc)
}

func (c *Processor) op330B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.w A3,-(A1)\n", pc)
}

func (c *Processor) op330C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.w A4,-(A1)\n", pc)
}

func (c *Processor) op330D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.w A5,-(A1)\n", pc)
}

func (c *Processor) op330E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.w A6,-(A1)\n", pc)
}

func (c *Processor) op330F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X movep.w A7,-(A1)\n", pc)
}

func (c *Processor) op3310() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w (A0),-(A1)\n", pc)
}

func (c *Processor) op3311() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w (A1),-(A1)\n", pc)
}

func (c *Processor) op3312() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w (A2),-(A1)\n", pc)
}

func (c *Processor) op3313() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w (A3),-(A1)\n", pc)
}

func (c *Processor) op3314() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w (A4),-(A1)\n", pc)
}

func (c *Processor) op3315() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w (A5),-(A1)\n", pc)
}

func (c *Processor) op3316() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w (A6),-(A1)\n", pc)
}

func (c *Processor) op3317() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w (A7),-(A1)\n", pc)
}

func (c *Processor) op3338() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w $%X,-(A1)\n", pc, v)
}

func (c *Processor) op3339() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w $%X,-(A1)\n", pc, v)
}

func (c *Processor) op333C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[1] -= 4
	c.writeLong(c.A[1], uint32(v))
	c.tracef("%04X move.w #$%X,-(A1)\n", pc, v)
}

func (c *Processor) op3340() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D0,(%d,A1)\n", pc, disp)
}

func (c *Processor) op3341() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D1,(%d,A1)\n", pc, disp)
}

func (c *Processor) op3342() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D2,(%d,A1)\n", pc, disp)
}

func (c *Processor) op3343() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D3,(%d,A1)\n", pc, disp)
}

func (c *Processor) op3344() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D4,(%d,A1)\n", pc, disp)
}

func (c *Processor) op3345() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D5,(%d,A1)\n", pc, disp)
}

func (c *Processor) op3346() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D6,(%d,A1)\n", pc, disp)
}

func (c *Processor) op3347() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D7,(%d,A1)\n", pc, disp)
}

func (c *Processor) op3348() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A0,(%d,A1)\n", pc, disp)
}

func (c *Processor) op3349() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A1,(%d,A1)\n", pc, disp)
}

func (c *Processor) op334A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A2,(%d,A1)\n", pc, disp)
}

func (c *Processor) op334B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A3,(%d,A1)\n", pc, disp)
}

func (c *Processor) op334C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A4,(%d,A1)\n", pc, disp)
}

func (c *Processor) op334D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A5,(%d,A1)\n", pc, disp)
}

func (c *Processor) op334E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A6,(%d,A1)\n", pc, disp)
}

func (c *Processor) op334F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A7,(%d,A1)\n", pc, disp)
}

func (c *Processor) op3350() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A0),(%d,A1)\n", pc, disp)
}

func (c *Processor) op3351() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A1),(%d,A1)\n", pc, disp)
}

func (c *Processor) op3352() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A2),(%d,A1)\n", pc, disp)
}

func (c *Processor) op3353() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A3),(%d,A1)\n", pc, disp)
}

func (c *Processor) op3354() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A4),(%d,A1)\n", pc, disp)
}

func (c *Processor) op3355() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A5),(%d,A1)\n", pc, disp)
}

func (c *Processor) op3356() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A6),(%d,A1)\n", pc, disp)
}

func (c *Processor) op3357() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A7),(%d,A1)\n", pc, disp)
}

func (c *Processor) op3378() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,(%d,A1)\n", pc, v, disp)
}

func (c *Processor) op3379() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,(%d,A1)\n", pc, v, disp)
}

func (c *Processor) op337C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[1]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w #$%X,(%d,A1)\n", pc, v, disp)
}

func (c *Processor) op33C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D0,$%X\n", pc, addr)
}

func (c *Processor) op33C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D1,$%X\n", pc, addr)
}

func (c *Processor) op33C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D2,$%X\n", pc, addr)
}

func (c *Processor) op33C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D3,$%X\n", pc, addr)
}

func (c *Processor) op33C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D4,$%X\n", pc, addr)
}

func (c *Processor) op33C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D5,$%X\n", pc, addr)
}

func (c *Processor) op33C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D6,$%X\n", pc, addr)
}

func (c *Processor) op33C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D7,$%X\n", pc, addr)
}

func (c *Processor) op33C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A0,$%X\n", pc, addr)
}

func (c *Processor) op33C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A1,$%X\n", pc, addr)
}

func (c *Processor) op33CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A2,$%X\n", pc, addr)
}

func (c *Processor) op33CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A3,$%X\n", pc, addr)
}

func (c *Processor) op33CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A4,$%X\n", pc, addr)
}

func (c *Processor) op33CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A5,$%X\n", pc, addr)
}

func (c *Processor) op33CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A6,$%X\n", pc, addr)
}

func (c *Processor) op33CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A7,$%X\n", pc, addr)
}

func (c *Processor) op33D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A0),$%X\n", pc, addr)
}

func (c *Processor) op33D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A1),$%X\n", pc, addr)
}

func (c *Processor) op33D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A2),$%X\n", pc, addr)
}

func (c *Processor) op33D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A3),$%X\n", pc, addr)
}

func (c *Processor) op33D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A4),$%X\n", pc, addr)
}

func (c *Processor) op33D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A5),$%X\n", pc, addr)
}

func (c *Processor) op33D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A6),$%X\n", pc, addr)
}

func (c *Processor) op33D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A7),$%X\n", pc, addr)
}

func (c *Processor) op33F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,$%X\n", pc, v, addr)
}

func (c *Processor) op33F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,$%X\n", pc, v, addr)
}

func (c *Processor) op33FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:4])
	if c.err != nil {
		return
	}
	c.PC += 4
	addr := uint32(c.buf[0])<<24 | uint32(c.buf[1])<<16 | uint32(c.buf[2])<<8 | uint32(c.buf[3])
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w #$%X,$%X\n", pc, v, addr)
}

func (c *Processor) op3400() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[2] = uint32(v)
	c.tracef("%04X move.w D0,D2\n", pc)
}

func (c *Processor) op3401() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[2] = uint32(v)
	c.tracef("%04X move.w D1,D2\n", pc)
}

func (c *Processor) op3402() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[2] = uint32(v)
	c.tracef("%04X move.w D2,D2\n", pc)
}

func (c *Processor) op3403() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[2] = uint32(v)
	c.tracef("%04X move.w D3,D2\n", pc)
}

func (c *Processor) op3404() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[2] = uint32(v)
	c.tracef("%04X move.w D4,D2\n", pc)
}

func (c *Processor) op3405() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[2] = uint32(v)
	c.tracef("%04X move.w D5,D2\n", pc)
}

func (c *Processor) op3406() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[2] = uint32(v)
	c.tracef("%04X move.w D6,D2\n", pc)
}

func (c *Processor) op3407() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[2] = uint32(v)
	c.tracef("%04X move.w D7,D2\n", pc)
}

func (c *Processor) op3408() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[2] = uint32(v)
	c.tracef("%04X move.w A0,D2\n", pc)
}

func (c *Processor) op3409() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[2] = uint32(v)
	c.tracef("%04X move.w A1,D2\n", pc)
}

func (c *Processor) op340A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[2] = uint32(v)
	c.tracef("%04X move.w A2,D2\n", pc)
}

func (c *Processor) op340B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[2] = uint32(v)
	c.tracef("%04X move.w A3,D2\n", pc)
}

func (c *Processor) op340C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[2] = uint32(v)
	c.tracef("%04X move.w A4,D2\n", pc)
}

func (c *Processor) op340D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[2] = uint32(v)
	c.tracef("%04X move.w A5,D2\n", pc)
}

func (c *Processor) op340E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[2] = uint32(v)
	c.tracef("%04X move.w A6,D2\n", pc)
}

func (c *Processor) op340F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[2] = uint32(v)
	c.tracef("%04X move.w A7,D2\n", pc)
}

func (c *Processor) op3410() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[2] = uint32(v)
	c.tracef("%04X move.w (A0),D2\n", pc)
}

func (c *Processor) op3411() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[2] = uint32(v)
	c.tracef("%04X move.w (A1),D2\n", pc)
}

func (c *Processor) op3412() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[2] = uint32(v)
	c.tracef("%04X move.w (A2),D2\n", pc)
}

func (c *Processor) op3413() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[2] = uint32(v)
	c.tracef("%04X move.w (A3),D2\n", pc)
}

func (c *Processor) op3414() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[2] = uint32(v)
	c.tracef("%04X move.w (A4),D2\n", pc)
}

func (c *Processor) op3415() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[2] = uint32(v)
	c.tracef("%04X move.w (A5),D2\n", pc)
}

func (c *Processor) op3416() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[2] = uint32(v)
	c.tracef("%04X move.w (A6),D2\n", pc)
}

func (c *Processor) op3417() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[2] = uint32(v)
	c.tracef("%04X move.w (A7),D2\n", pc)
}

func (c *Processor) op3438() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[2] = uint32(v)
	c.tracef("%04X move.w $%X,D2\n", pc, v)
}

func (c *Processor) op3439() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[2] = uint32(v)
	c.tracef("%04X move.w $%X,D2\n", pc, v)
}

func (c *Processor) op343C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[2] = uint32(v)
	c.tracef("%04X move.w #$%X,D2\n", pc, v)
}

func (c *Processor) op3440() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w D0,A2\n", pc)
}

func (c *Processor) op3441() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w D1,A2\n", pc)
}

func (c *Processor) op3442() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w D2,A2\n", pc)
}

func (c *Processor) op3443() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w D3,A2\n", pc)
}

func (c *Processor) op3444() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w D4,A2\n", pc)
}

func (c *Processor) op3445() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w D5,A2\n", pc)
}

func (c *Processor) op3446() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w D6,A2\n", pc)
}

func (c *Processor) op3447() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w D7,A2\n", pc)
}

func (c *Processor) op3448() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w A0,A2\n", pc)
}

func (c *Processor) op3449() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w A1,A2\n", pc)
}

func (c *Processor) op344A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w A2,A2\n", pc)
}

func (c *Processor) op344B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w A3,A2\n", pc)
}

func (c *Processor) op344C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w A4,A2\n", pc)
}

func (c *Processor) op344D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w A5,A2\n", pc)
}

func (c *Processor) op344E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w A6,A2\n", pc)
}

func (c *Processor) op344F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w A7,A2\n", pc)
}

func (c *Processor) op3450() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w (A0),A2\n", pc)
}

func (c *Processor) op3451() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w (A1),A2\n", pc)
}

func (c *Processor) op3452() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w (A2),A2\n", pc)
}

func (c *Processor) op3453() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w (A3),A2\n", pc)
}

func (c *Processor) op3454() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w (A4),A2\n", pc)
}

func (c *Processor) op3455() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w (A5),A2\n", pc)
}

func (c *Processor) op3456() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w (A6),A2\n", pc)
}

func (c *Processor) op3457() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w (A7),A2\n", pc)
}

func (c *Processor) op3478() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w $%X,A2\n", pc, v)
}

func (c *Processor) op3479() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w $%X,A2\n", pc, v)
}

func (c *Processor) op347C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] = uint32(v)
	c.tracef("%04X movea.w #$%X,A2\n", pc, v)
}

func (c *Processor) op3480() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w D0,(A2)\n", pc)
}

func (c *Processor) op3481() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w D1,(A2)\n", pc)
}

func (c *Processor) op3482() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w D2,(A2)\n", pc)
}

func (c *Processor) op3483() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w D3,(A2)\n", pc)
}

func (c *Processor) op3484() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w D4,(A2)\n", pc)
}

func (c *Processor) op3485() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w D5,(A2)\n", pc)
}

func (c *Processor) op3486() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w D6,(A2)\n", pc)
}

func (c *Processor) op3487() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w D7,(A2)\n", pc)
}

func (c *Processor) op3488() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w A0,(A2)\n", pc)
}

func (c *Processor) op3489() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w A1,(A2)\n", pc)
}

func (c *Processor) op348A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w A2,(A2)\n", pc)
}

func (c *Processor) op348B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w A3,(A2)\n", pc)
}

func (c *Processor) op348C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w A4,(A2)\n", pc)
}

func (c *Processor) op348D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w A5,(A2)\n", pc)
}

func (c *Processor) op348E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w A6,(A2)\n", pc)
}

func (c *Processor) op348F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w A7,(A2)\n", pc)
}

func (c *Processor) op3490() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w (A0),(A2)\n", pc)
}

func (c *Processor) op3491() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w (A1),(A2)\n", pc)
}

func (c *Processor) op3492() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w (A2),(A2)\n", pc)
}

func (c *Processor) op3493() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w (A3),(A2)\n", pc)
}

func (c *Processor) op3494() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w (A4),(A2)\n", pc)
}

func (c *Processor) op3495() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w (A5),(A2)\n", pc)
}

func (c *Processor) op3496() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w (A6),(A2)\n", pc)
}

func (c *Processor) op3497() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w (A7),(A2)\n", pc)
}

func (c *Processor) op34B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w $%X,(A2)\n", pc, v)
}

func (c *Processor) op34B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w $%X,(A2)\n", pc, v)
}

func (c *Processor) op34BC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w #$%X,(A2)\n", pc, v)
}

func (c *Processor) op34C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w D0,(A2)+\n", pc)
}

func (c *Processor) op34C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w D1,(A2)+\n", pc)
}

func (c *Processor) op34C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w D2,(A2)+\n", pc)
}

func (c *Processor) op34C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w D3,(A2)+\n", pc)
}

func (c *Processor) op34C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w D4,(A2)+\n", pc)
}

func (c *Processor) op34C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w D5,(A2)+\n", pc)
}

func (c *Processor) op34C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w D6,(A2)+\n", pc)
}

func (c *Processor) op34C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w D7,(A2)+\n", pc)
}

func (c *Processor) op34C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w A0,(A2)+\n", pc)
}

func (c *Processor) op34C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w A1,(A2)+\n", pc)
}

func (c *Processor) op34CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w A2,(A2)+\n", pc)
}

func (c *Processor) op34CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w A3,(A2)+\n", pc)
}

func (c *Processor) op34CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w A4,(A2)+\n", pc)
}

func (c *Processor) op34CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w A5,(A2)+\n", pc)
}

func (c *Processor) op34CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w A6,(A2)+\n", pc)
}

func (c *Processor) op34CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w A7,(A2)+\n", pc)
}

func (c *Processor) op34D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w (A0),(A2)+\n", pc)
}

func (c *Processor) op34D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w (A1),(A2)+\n", pc)
}

func (c *Processor) op34D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w (A2),(A2)+\n", pc)
}

func (c *Processor) op34D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w (A3),(A2)+\n", pc)
}

func (c *Processor) op34D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w (A4),(A2)+\n", pc)
}

func (c *Processor) op34D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w (A5),(A2)+\n", pc)
}

func (c *Processor) op34D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w (A6),(A2)+\n", pc)
}

func (c *Processor) op34D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w (A7),(A2)+\n", pc)
}

func (c *Processor) op34F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w $%X,(A2)+\n", pc, v)
}

func (c *Processor) op34F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w $%X,(A2)+\n", pc, v)
}

func (c *Processor) op34FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[2], uint32(v))
	c.A[2] += 4
	c.tracef("%04X move.w #$%X,(A2)+\n", pc, v)
}

func (c *Processor) op3500() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w D0,-(A2)\n", pc)
}

func (c *Processor) op3501() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w D1,-(A2)\n", pc)
}

func (c *Processor) op3502() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w D2,-(A2)\n", pc)
}

func (c *Processor) op3503() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w D3,-(A2)\n", pc)
}

func (c *Processor) op3504() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w D4,-(A2)\n", pc)
}

func (c *Processor) op3505() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w D5,-(A2)\n", pc)
}

func (c *Processor) op3506() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w D6,-(A2)\n", pc)
}

func (c *Processor) op3507() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w D7,-(A2)\n", pc)
}

func (c *Processor) op3508() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.w A0,-(A2)\n", pc)
}

func (c *Processor) op3509() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.w A1,-(A2)\n", pc)
}

func (c *Processor) op350A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.w A2,-(A2)\n", pc)
}

func (c *Processor) op350B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.w A3,-(A2)\n", pc)
}

func (c *Processor) op350C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.w A4,-(A2)\n", pc)
}

func (c *Processor) op350D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.w A5,-(A2)\n", pc)
}

func (c *Processor) op350E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.w A6,-(A2)\n", pc)
}

func (c *Processor) op350F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X movep.w A7,-(A2)\n", pc)
}

func (c *Processor) op3510() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w (A0),-(A2)\n", pc)
}

func (c *Processor) op3511() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w (A1),-(A2)\n", pc)
}

func (c *Processor) op3512() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w (A2),-(A2)\n", pc)
}

func (c *Processor) op3513() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w (A3),-(A2)\n", pc)
}

func (c *Processor) op3514() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w (A4),-(A2)\n", pc)
}

func (c *Processor) op3515() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w (A5),-(A2)\n", pc)
}

func (c *Processor) op3516() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w (A6),-(A2)\n", pc)
}

func (c *Processor) op3517() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w (A7),-(A2)\n", pc)
}

func (c *Processor) op3538() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w $%X,-(A2)\n", pc, v)
}

func (c *Processor) op3539() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w $%X,-(A2)\n", pc, v)
}

func (c *Processor) op353C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[2] -= 4
	c.writeLong(c.A[2], uint32(v))
	c.tracef("%04X move.w #$%X,-(A2)\n", pc, v)
}

func (c *Processor) op3540() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D0,(%d,A2)\n", pc, disp)
}

func (c *Processor) op3541() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D1,(%d,A2)\n", pc, disp)
}

func (c *Processor) op3542() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D2,(%d,A2)\n", pc, disp)
}

func (c *Processor) op3543() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D3,(%d,A2)\n", pc, disp)
}

func (c *Processor) op3544() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D4,(%d,A2)\n", pc, disp)
}

func (c *Processor) op3545() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D5,(%d,A2)\n", pc, disp)
}

func (c *Processor) op3546() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D6,(%d,A2)\n", pc, disp)
}

func (c *Processor) op3547() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D7,(%d,A2)\n", pc, disp)
}

func (c *Processor) op3548() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A0,(%d,A2)\n", pc, disp)
}

func (c *Processor) op3549() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A1,(%d,A2)\n", pc, disp)
}

func (c *Processor) op354A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A2,(%d,A2)\n", pc, disp)
}

func (c *Processor) op354B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A3,(%d,A2)\n", pc, disp)
}

func (c *Processor) op354C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A4,(%d,A2)\n", pc, disp)
}

func (c *Processor) op354D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A5,(%d,A2)\n", pc, disp)
}

func (c *Processor) op354E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A6,(%d,A2)\n", pc, disp)
}

func (c *Processor) op354F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A7,(%d,A2)\n", pc, disp)
}

func (c *Processor) op3550() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A0),(%d,A2)\n", pc, disp)
}

func (c *Processor) op3551() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A1),(%d,A2)\n", pc, disp)
}

func (c *Processor) op3552() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A2),(%d,A2)\n", pc, disp)
}

func (c *Processor) op3553() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A3),(%d,A2)\n", pc, disp)
}

func (c *Processor) op3554() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A4),(%d,A2)\n", pc, disp)
}

func (c *Processor) op3555() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A5),(%d,A2)\n", pc, disp)
}

func (c *Processor) op3556() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A6),(%d,A2)\n", pc, disp)
}

func (c *Processor) op3557() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A7),(%d,A2)\n", pc, disp)
}

func (c *Processor) op3578() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,(%d,A2)\n", pc, v, disp)
}

func (c *Processor) op3579() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,(%d,A2)\n", pc, v, disp)
}

func (c *Processor) op357C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[2]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w #$%X,(%d,A2)\n", pc, v, disp)
}

func (c *Processor) op3600() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[3] = uint32(v)
	c.tracef("%04X move.w D0,D3\n", pc)
}

func (c *Processor) op3601() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[3] = uint32(v)
	c.tracef("%04X move.w D1,D3\n", pc)
}

func (c *Processor) op3602() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[3] = uint32(v)
	c.tracef("%04X move.w D2,D3\n", pc)
}

func (c *Processor) op3603() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[3] = uint32(v)
	c.tracef("%04X move.w D3,D3\n", pc)
}

func (c *Processor) op3604() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[3] = uint32(v)
	c.tracef("%04X move.w D4,D3\n", pc)
}

func (c *Processor) op3605() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[3] = uint32(v)
	c.tracef("%04X move.w D5,D3\n", pc)
}

func (c *Processor) op3606() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[3] = uint32(v)
	c.tracef("%04X move.w D6,D3\n", pc)
}

func (c *Processor) op3607() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[3] = uint32(v)
	c.tracef("%04X move.w D7,D3\n", pc)
}

func (c *Processor) op3608() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[3] = uint32(v)
	c.tracef("%04X move.w A0,D3\n", pc)
}

func (c *Processor) op3609() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[3] = uint32(v)
	c.tracef("%04X move.w A1,D3\n", pc)
}

func (c *Processor) op360A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[3] = uint32(v)
	c.tracef("%04X move.w A2,D3\n", pc)
}

func (c *Processor) op360B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[3] = uint32(v)
	c.tracef("%04X move.w A3,D3\n", pc)
}

func (c *Processor) op360C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[3] = uint32(v)
	c.tracef("%04X move.w A4,D3\n", pc)
}

func (c *Processor) op360D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[3] = uint32(v)
	c.tracef("%04X move.w A5,D3\n", pc)
}

func (c *Processor) op360E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[3] = uint32(v)
	c.tracef("%04X move.w A6,D3\n", pc)
}

func (c *Processor) op360F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[3] = uint32(v)
	c.tracef("%04X move.w A7,D3\n", pc)
}

func (c *Processor) op3610() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[3] = uint32(v)
	c.tracef("%04X move.w (A0),D3\n", pc)
}

func (c *Processor) op3611() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[3] = uint32(v)
	c.tracef("%04X move.w (A1),D3\n", pc)
}

func (c *Processor) op3612() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[3] = uint32(v)
	c.tracef("%04X move.w (A2),D3\n", pc)
}

func (c *Processor) op3613() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[3] = uint32(v)
	c.tracef("%04X move.w (A3),D3\n", pc)
}

func (c *Processor) op3614() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[3] = uint32(v)
	c.tracef("%04X move.w (A4),D3\n", pc)
}

func (c *Processor) op3615() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[3] = uint32(v)
	c.tracef("%04X move.w (A5),D3\n", pc)
}

func (c *Processor) op3616() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[3] = uint32(v)
	c.tracef("%04X move.w (A6),D3\n", pc)
}

func (c *Processor) op3617() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[3] = uint32(v)
	c.tracef("%04X move.w (A7),D3\n", pc)
}

func (c *Processor) op3638() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[3] = uint32(v)
	c.tracef("%04X move.w $%X,D3\n", pc, v)
}

func (c *Processor) op3639() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[3] = uint32(v)
	c.tracef("%04X move.w $%X,D3\n", pc, v)
}

func (c *Processor) op363C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[3] = uint32(v)
	c.tracef("%04X move.w #$%X,D3\n", pc, v)
}

func (c *Processor) op3640() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w D0,A3\n", pc)
}

func (c *Processor) op3641() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w D1,A3\n", pc)
}

func (c *Processor) op3642() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w D2,A3\n", pc)
}

func (c *Processor) op3643() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w D3,A3\n", pc)
}

func (c *Processor) op3644() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w D4,A3\n", pc)
}

func (c *Processor) op3645() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w D5,A3\n", pc)
}

func (c *Processor) op3646() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w D6,A3\n", pc)
}

func (c *Processor) op3647() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w D7,A3\n", pc)
}

func (c *Processor) op3648() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w A0,A3\n", pc)
}

func (c *Processor) op3649() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w A1,A3\n", pc)
}

func (c *Processor) op364A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w A2,A3\n", pc)
}

func (c *Processor) op364B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w A3,A3\n", pc)
}

func (c *Processor) op364C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w A4,A3\n", pc)
}

func (c *Processor) op364D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w A5,A3\n", pc)
}

func (c *Processor) op364E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w A6,A3\n", pc)
}

func (c *Processor) op364F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w A7,A3\n", pc)
}

func (c *Processor) op3650() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w (A0),A3\n", pc)
}

func (c *Processor) op3651() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w (A1),A3\n", pc)
}

func (c *Processor) op3652() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w (A2),A3\n", pc)
}

func (c *Processor) op3653() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w (A3),A3\n", pc)
}

func (c *Processor) op3654() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w (A4),A3\n", pc)
}

func (c *Processor) op3655() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w (A5),A3\n", pc)
}

func (c *Processor) op3656() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w (A6),A3\n", pc)
}

func (c *Processor) op3657() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w (A7),A3\n", pc)
}

func (c *Processor) op3678() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w $%X,A3\n", pc, v)
}

func (c *Processor) op3679() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w $%X,A3\n", pc, v)
}

func (c *Processor) op367C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] = uint32(v)
	c.tracef("%04X movea.w #$%X,A3\n", pc, v)
}

func (c *Processor) op3680() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w D0,(A3)\n", pc)
}

func (c *Processor) op3681() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w D1,(A3)\n", pc)
}

func (c *Processor) op3682() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w D2,(A3)\n", pc)
}

func (c *Processor) op3683() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w D3,(A3)\n", pc)
}

func (c *Processor) op3684() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w D4,(A3)\n", pc)
}

func (c *Processor) op3685() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w D5,(A3)\n", pc)
}

func (c *Processor) op3686() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w D6,(A3)\n", pc)
}

func (c *Processor) op3687() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w D7,(A3)\n", pc)
}

func (c *Processor) op3688() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w A0,(A3)\n", pc)
}

func (c *Processor) op3689() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w A1,(A3)\n", pc)
}

func (c *Processor) op368A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w A2,(A3)\n", pc)
}

func (c *Processor) op368B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w A3,(A3)\n", pc)
}

func (c *Processor) op368C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w A4,(A3)\n", pc)
}

func (c *Processor) op368D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w A5,(A3)\n", pc)
}

func (c *Processor) op368E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w A6,(A3)\n", pc)
}

func (c *Processor) op368F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w A7,(A3)\n", pc)
}

func (c *Processor) op3690() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w (A0),(A3)\n", pc)
}

func (c *Processor) op3691() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w (A1),(A3)\n", pc)
}

func (c *Processor) op3692() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w (A2),(A3)\n", pc)
}

func (c *Processor) op3693() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w (A3),(A3)\n", pc)
}

func (c *Processor) op3694() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w (A4),(A3)\n", pc)
}

func (c *Processor) op3695() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w (A5),(A3)\n", pc)
}

func (c *Processor) op3696() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w (A6),(A3)\n", pc)
}

func (c *Processor) op3697() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w (A7),(A3)\n", pc)
}

func (c *Processor) op36B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w $%X,(A3)\n", pc, v)
}

func (c *Processor) op36B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w $%X,(A3)\n", pc, v)
}

func (c *Processor) op36BC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w #$%X,(A3)\n", pc, v)
}

func (c *Processor) op36C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w D0,(A3)+\n", pc)
}

func (c *Processor) op36C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w D1,(A3)+\n", pc)
}

func (c *Processor) op36C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w D2,(A3)+\n", pc)
}

func (c *Processor) op36C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w D3,(A3)+\n", pc)
}

func (c *Processor) op36C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w D4,(A3)+\n", pc)
}

func (c *Processor) op36C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w D5,(A3)+\n", pc)
}

func (c *Processor) op36C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w D6,(A3)+\n", pc)
}

func (c *Processor) op36C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w D7,(A3)+\n", pc)
}

func (c *Processor) op36C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w A0,(A3)+\n", pc)
}

func (c *Processor) op36C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w A1,(A3)+\n", pc)
}

func (c *Processor) op36CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w A2,(A3)+\n", pc)
}

func (c *Processor) op36CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w A3,(A3)+\n", pc)
}

func (c *Processor) op36CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w A4,(A3)+\n", pc)
}

func (c *Processor) op36CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w A5,(A3)+\n", pc)
}

func (c *Processor) op36CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w A6,(A3)+\n", pc)
}

func (c *Processor) op36CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w A7,(A3)+\n", pc)
}

func (c *Processor) op36D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w (A0),(A3)+\n", pc)
}

func (c *Processor) op36D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w (A1),(A3)+\n", pc)
}

func (c *Processor) op36D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w (A2),(A3)+\n", pc)
}

func (c *Processor) op36D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w (A3),(A3)+\n", pc)
}

func (c *Processor) op36D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w (A4),(A3)+\n", pc)
}

func (c *Processor) op36D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w (A5),(A3)+\n", pc)
}

func (c *Processor) op36D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w (A6),(A3)+\n", pc)
}

func (c *Processor) op36D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w (A7),(A3)+\n", pc)
}

func (c *Processor) op36F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w $%X,(A3)+\n", pc, v)
}

func (c *Processor) op36F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w $%X,(A3)+\n", pc, v)
}

func (c *Processor) op36FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[3], uint32(v))
	c.A[3] += 4
	c.tracef("%04X move.w #$%X,(A3)+\n", pc, v)
}

func (c *Processor) op3700() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w D0,-(A3)\n", pc)
}

func (c *Processor) op3701() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w D1,-(A3)\n", pc)
}

func (c *Processor) op3702() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w D2,-(A3)\n", pc)
}

func (c *Processor) op3703() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w D3,-(A3)\n", pc)
}

func (c *Processor) op3704() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w D4,-(A3)\n", pc)
}

func (c *Processor) op3705() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w D5,-(A3)\n", pc)
}

func (c *Processor) op3706() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w D6,-(A3)\n", pc)
}

func (c *Processor) op3707() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w D7,-(A3)\n", pc)
}

func (c *Processor) op3708() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.w A0,-(A3)\n", pc)
}

func (c *Processor) op3709() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.w A1,-(A3)\n", pc)
}

func (c *Processor) op370A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.w A2,-(A3)\n", pc)
}

func (c *Processor) op370B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.w A3,-(A3)\n", pc)
}

func (c *Processor) op370C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.w A4,-(A3)\n", pc)
}

func (c *Processor) op370D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.w A5,-(A3)\n", pc)
}

func (c *Processor) op370E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.w A6,-(A3)\n", pc)
}

func (c *Processor) op370F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X movep.w A7,-(A3)\n", pc)
}

func (c *Processor) op3710() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w (A0),-(A3)\n", pc)
}

func (c *Processor) op3711() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w (A1),-(A3)\n", pc)
}

func (c *Processor) op3712() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w (A2),-(A3)\n", pc)
}

func (c *Processor) op3713() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w (A3),-(A3)\n", pc)
}

func (c *Processor) op3714() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w (A4),-(A3)\n", pc)
}

func (c *Processor) op3715() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w (A5),-(A3)\n", pc)
}

func (c *Processor) op3716() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w (A6),-(A3)\n", pc)
}

func (c *Processor) op3717() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w (A7),-(A3)\n", pc)
}

func (c *Processor) op3738() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w $%X,-(A3)\n", pc, v)
}

func (c *Processor) op3739() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w $%X,-(A3)\n", pc, v)
}

func (c *Processor) op373C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[3] -= 4
	c.writeLong(c.A[3], uint32(v))
	c.tracef("%04X move.w #$%X,-(A3)\n", pc, v)
}

func (c *Processor) op3740() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D0,(%d,A3)\n", pc, disp)
}

func (c *Processor) op3741() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D1,(%d,A3)\n", pc, disp)
}

func (c *Processor) op3742() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D2,(%d,A3)\n", pc, disp)
}

func (c *Processor) op3743() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D3,(%d,A3)\n", pc, disp)
}

func (c *Processor) op3744() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D4,(%d,A3)\n", pc, disp)
}

func (c *Processor) op3745() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D5,(%d,A3)\n", pc, disp)
}

func (c *Processor) op3746() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D6,(%d,A3)\n", pc, disp)
}

func (c *Processor) op3747() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D7,(%d,A3)\n", pc, disp)
}

func (c *Processor) op3748() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A0,(%d,A3)\n", pc, disp)
}

func (c *Processor) op3749() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A1,(%d,A3)\n", pc, disp)
}

func (c *Processor) op374A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A2,(%d,A3)\n", pc, disp)
}

func (c *Processor) op374B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A3,(%d,A3)\n", pc, disp)
}

func (c *Processor) op374C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A4,(%d,A3)\n", pc, disp)
}

func (c *Processor) op374D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A5,(%d,A3)\n", pc, disp)
}

func (c *Processor) op374E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A6,(%d,A3)\n", pc, disp)
}

func (c *Processor) op374F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A7,(%d,A3)\n", pc, disp)
}

func (c *Processor) op3750() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A0),(%d,A3)\n", pc, disp)
}

func (c *Processor) op3751() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A1),(%d,A3)\n", pc, disp)
}

func (c *Processor) op3752() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A2),(%d,A3)\n", pc, disp)
}

func (c *Processor) op3753() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A3),(%d,A3)\n", pc, disp)
}

func (c *Processor) op3754() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A4),(%d,A3)\n", pc, disp)
}

func (c *Processor) op3755() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A5),(%d,A3)\n", pc, disp)
}

func (c *Processor) op3756() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A6),(%d,A3)\n", pc, disp)
}

func (c *Processor) op3757() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A7),(%d,A3)\n", pc, disp)
}

func (c *Processor) op3778() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,(%d,A3)\n", pc, v, disp)
}

func (c *Processor) op3779() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,(%d,A3)\n", pc, v, disp)
}

func (c *Processor) op377C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[3]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w #$%X,(%d,A3)\n", pc, v, disp)
}

func (c *Processor) op3800() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[4] = uint32(v)
	c.tracef("%04X move.w D0,D4\n", pc)
}

func (c *Processor) op3801() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[4] = uint32(v)
	c.tracef("%04X move.w D1,D4\n", pc)
}

func (c *Processor) op3802() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[4] = uint32(v)
	c.tracef("%04X move.w D2,D4\n", pc)
}

func (c *Processor) op3803() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[4] = uint32(v)
	c.tracef("%04X move.w D3,D4\n", pc)
}

func (c *Processor) op3804() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[4] = uint32(v)
	c.tracef("%04X move.w D4,D4\n", pc)
}

func (c *Processor) op3805() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[4] = uint32(v)
	c.tracef("%04X move.w D5,D4\n", pc)
}

func (c *Processor) op3806() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[4] = uint32(v)
	c.tracef("%04X move.w D6,D4\n", pc)
}

func (c *Processor) op3807() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[4] = uint32(v)
	c.tracef("%04X move.w D7,D4\n", pc)
}

func (c *Processor) op3808() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[4] = uint32(v)
	c.tracef("%04X move.w A0,D4\n", pc)
}

func (c *Processor) op3809() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[4] = uint32(v)
	c.tracef("%04X move.w A1,D4\n", pc)
}

func (c *Processor) op380A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[4] = uint32(v)
	c.tracef("%04X move.w A2,D4\n", pc)
}

func (c *Processor) op380B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[4] = uint32(v)
	c.tracef("%04X move.w A3,D4\n", pc)
}

func (c *Processor) op380C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[4] = uint32(v)
	c.tracef("%04X move.w A4,D4\n", pc)
}

func (c *Processor) op380D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[4] = uint32(v)
	c.tracef("%04X move.w A5,D4\n", pc)
}

func (c *Processor) op380E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[4] = uint32(v)
	c.tracef("%04X move.w A6,D4\n", pc)
}

func (c *Processor) op380F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[4] = uint32(v)
	c.tracef("%04X move.w A7,D4\n", pc)
}

func (c *Processor) op3810() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[4] = uint32(v)
	c.tracef("%04X move.w (A0),D4\n", pc)
}

func (c *Processor) op3811() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[4] = uint32(v)
	c.tracef("%04X move.w (A1),D4\n", pc)
}

func (c *Processor) op3812() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[4] = uint32(v)
	c.tracef("%04X move.w (A2),D4\n", pc)
}

func (c *Processor) op3813() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[4] = uint32(v)
	c.tracef("%04X move.w (A3),D4\n", pc)
}

func (c *Processor) op3814() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[4] = uint32(v)
	c.tracef("%04X move.w (A4),D4\n", pc)
}

func (c *Processor) op3815() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[4] = uint32(v)
	c.tracef("%04X move.w (A5),D4\n", pc)
}

func (c *Processor) op3816() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[4] = uint32(v)
	c.tracef("%04X move.w (A6),D4\n", pc)
}

func (c *Processor) op3817() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[4] = uint32(v)
	c.tracef("%04X move.w (A7),D4\n", pc)
}

func (c *Processor) op3838() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[4] = uint32(v)
	c.tracef("%04X move.w $%X,D4\n", pc, v)
}

func (c *Processor) op3839() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[4] = uint32(v)
	c.tracef("%04X move.w $%X,D4\n", pc, v)
}

func (c *Processor) op383C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[4] = uint32(v)
	c.tracef("%04X move.w #$%X,D4\n", pc, v)
}

func (c *Processor) op3840() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w D0,A4\n", pc)
}

func (c *Processor) op3841() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w D1,A4\n", pc)
}

func (c *Processor) op3842() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w D2,A4\n", pc)
}

func (c *Processor) op3843() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w D3,A4\n", pc)
}

func (c *Processor) op3844() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w D4,A4\n", pc)
}

func (c *Processor) op3845() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w D5,A4\n", pc)
}

func (c *Processor) op3846() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w D6,A4\n", pc)
}

func (c *Processor) op3847() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w D7,A4\n", pc)
}

func (c *Processor) op3848() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w A0,A4\n", pc)
}

func (c *Processor) op3849() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w A1,A4\n", pc)
}

func (c *Processor) op384A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w A2,A4\n", pc)
}

func (c *Processor) op384B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w A3,A4\n", pc)
}

func (c *Processor) op384C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w A4,A4\n", pc)
}

func (c *Processor) op384D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w A5,A4\n", pc)
}

func (c *Processor) op384E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w A6,A4\n", pc)
}

func (c *Processor) op384F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w A7,A4\n", pc)
}

func (c *Processor) op3850() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w (A0),A4\n", pc)
}

func (c *Processor) op3851() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w (A1),A4\n", pc)
}

func (c *Processor) op3852() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w (A2),A4\n", pc)
}

func (c *Processor) op3853() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w (A3),A4\n", pc)
}

func (c *Processor) op3854() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w (A4),A4\n", pc)
}

func (c *Processor) op3855() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w (A5),A4\n", pc)
}

func (c *Processor) op3856() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w (A6),A4\n", pc)
}

func (c *Processor) op3857() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w (A7),A4\n", pc)
}

func (c *Processor) op3878() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w $%X,A4\n", pc, v)
}

func (c *Processor) op3879() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w $%X,A4\n", pc, v)
}

func (c *Processor) op387C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] = uint32(v)
	c.tracef("%04X movea.w #$%X,A4\n", pc, v)
}

func (c *Processor) op3880() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w D0,(A4)\n", pc)
}

func (c *Processor) op3881() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w D1,(A4)\n", pc)
}

func (c *Processor) op3882() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w D2,(A4)\n", pc)
}

func (c *Processor) op3883() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w D3,(A4)\n", pc)
}

func (c *Processor) op3884() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w D4,(A4)\n", pc)
}

func (c *Processor) op3885() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w D5,(A4)\n", pc)
}

func (c *Processor) op3886() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w D6,(A4)\n", pc)
}

func (c *Processor) op3887() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w D7,(A4)\n", pc)
}

func (c *Processor) op3888() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w A0,(A4)\n", pc)
}

func (c *Processor) op3889() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w A1,(A4)\n", pc)
}

func (c *Processor) op388A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w A2,(A4)\n", pc)
}

func (c *Processor) op388B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w A3,(A4)\n", pc)
}

func (c *Processor) op388C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w A4,(A4)\n", pc)
}

func (c *Processor) op388D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w A5,(A4)\n", pc)
}

func (c *Processor) op388E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w A6,(A4)\n", pc)
}

func (c *Processor) op388F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w A7,(A4)\n", pc)
}

func (c *Processor) op3890() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w (A0),(A4)\n", pc)
}

func (c *Processor) op3891() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w (A1),(A4)\n", pc)
}

func (c *Processor) op3892() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w (A2),(A4)\n", pc)
}

func (c *Processor) op3893() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w (A3),(A4)\n", pc)
}

func (c *Processor) op3894() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w (A4),(A4)\n", pc)
}

func (c *Processor) op3895() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w (A5),(A4)\n", pc)
}

func (c *Processor) op3896() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w (A6),(A4)\n", pc)
}

func (c *Processor) op3897() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w (A7),(A4)\n", pc)
}

func (c *Processor) op38B8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w $%X,(A4)\n", pc, v)
}

func (c *Processor) op38B9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w $%X,(A4)\n", pc, v)
}

func (c *Processor) op38BC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w #$%X,(A4)\n", pc, v)
}

func (c *Processor) op38C0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w D0,(A4)+\n", pc)
}

func (c *Processor) op38C1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w D1,(A4)+\n", pc)
}

func (c *Processor) op38C2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w D2,(A4)+\n", pc)
}

func (c *Processor) op38C3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w D3,(A4)+\n", pc)
}

func (c *Processor) op38C4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w D4,(A4)+\n", pc)
}

func (c *Processor) op38C5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w D5,(A4)+\n", pc)
}

func (c *Processor) op38C6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w D6,(A4)+\n", pc)
}

func (c *Processor) op38C7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w D7,(A4)+\n", pc)
}

func (c *Processor) op38C8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w A0,(A4)+\n", pc)
}

func (c *Processor) op38C9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w A1,(A4)+\n", pc)
}

func (c *Processor) op38CA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w A2,(A4)+\n", pc)
}

func (c *Processor) op38CB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w A3,(A4)+\n", pc)
}

func (c *Processor) op38CC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w A4,(A4)+\n", pc)
}

func (c *Processor) op38CD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w A5,(A4)+\n", pc)
}

func (c *Processor) op38CE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w A6,(A4)+\n", pc)
}

func (c *Processor) op38CF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w A7,(A4)+\n", pc)
}

func (c *Processor) op38D0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w (A0),(A4)+\n", pc)
}

func (c *Processor) op38D1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w (A1),(A4)+\n", pc)
}

func (c *Processor) op38D2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w (A2),(A4)+\n", pc)
}

func (c *Processor) op38D3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w (A3),(A4)+\n", pc)
}

func (c *Processor) op38D4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w (A4),(A4)+\n", pc)
}

func (c *Processor) op38D5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w (A5),(A4)+\n", pc)
}

func (c *Processor) op38D6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w (A6),(A4)+\n", pc)
}

func (c *Processor) op38D7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w (A7),(A4)+\n", pc)
}

func (c *Processor) op38F8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w $%X,(A4)+\n", pc, v)
}

func (c *Processor) op38F9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w $%X,(A4)+\n", pc, v)
}

func (c *Processor) op38FC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[4], uint32(v))
	c.A[4] += 4
	c.tracef("%04X move.w #$%X,(A4)+\n", pc, v)
}

func (c *Processor) op3900() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w D0,-(A4)\n", pc)
}

func (c *Processor) op3901() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w D1,-(A4)\n", pc)
}

func (c *Processor) op3902() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w D2,-(A4)\n", pc)
}

func (c *Processor) op3903() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w D3,-(A4)\n", pc)
}

func (c *Processor) op3904() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w D4,-(A4)\n", pc)
}

func (c *Processor) op3905() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w D5,-(A4)\n", pc)
}

func (c *Processor) op3906() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w D6,-(A4)\n", pc)
}

func (c *Processor) op3907() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w D7,-(A4)\n", pc)
}

func (c *Processor) op3908() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.w A0,-(A4)\n", pc)
}

func (c *Processor) op3909() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.w A1,-(A4)\n", pc)
}

func (c *Processor) op390A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.w A2,-(A4)\n", pc)
}

func (c *Processor) op390B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.w A3,-(A4)\n", pc)
}

func (c *Processor) op390C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.w A4,-(A4)\n", pc)
}

func (c *Processor) op390D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.w A5,-(A4)\n", pc)
}

func (c *Processor) op390E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.w A6,-(A4)\n", pc)
}

func (c *Processor) op390F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X movep.w A7,-(A4)\n", pc)
}

func (c *Processor) op3910() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w (A0),-(A4)\n", pc)
}

func (c *Processor) op3911() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w (A1),-(A4)\n", pc)
}

func (c *Processor) op3912() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w (A2),-(A4)\n", pc)
}

func (c *Processor) op3913() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w (A3),-(A4)\n", pc)
}

func (c *Processor) op3914() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w (A4),-(A4)\n", pc)
}

func (c *Processor) op3915() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w (A5),-(A4)\n", pc)
}

func (c *Processor) op3916() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w (A6),-(A4)\n", pc)
}

func (c *Processor) op3917() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w (A7),-(A4)\n", pc)
}

func (c *Processor) op3938() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w $%X,-(A4)\n", pc, v)
}

func (c *Processor) op3939() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w $%X,-(A4)\n", pc, v)
}

func (c *Processor) op393C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[4] -= 4
	c.writeLong(c.A[4], uint32(v))
	c.tracef("%04X move.w #$%X,-(A4)\n", pc, v)
}

func (c *Processor) op3940() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D0,(%d,A4)\n", pc, disp)
}

func (c *Processor) op3941() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D1,(%d,A4)\n", pc, disp)
}

func (c *Processor) op3942() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D2,(%d,A4)\n", pc, disp)
}

func (c *Processor) op3943() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D3,(%d,A4)\n", pc, disp)
}

func (c *Processor) op3944() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D4,(%d,A4)\n", pc, disp)
}

func (c *Processor) op3945() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D5,(%d,A4)\n", pc, disp)
}

func (c *Processor) op3946() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D6,(%d,A4)\n", pc, disp)
}

func (c *Processor) op3947() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D7,(%d,A4)\n", pc, disp)
}

func (c *Processor) op3948() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A0,(%d,A4)\n", pc, disp)
}

func (c *Processor) op3949() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A1,(%d,A4)\n", pc, disp)
}

func (c *Processor) op394A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A2,(%d,A4)\n", pc, disp)
}

func (c *Processor) op394B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A3,(%d,A4)\n", pc, disp)
}

func (c *Processor) op394C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A4,(%d,A4)\n", pc, disp)
}

func (c *Processor) op394D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A5,(%d,A4)\n", pc, disp)
}

func (c *Processor) op394E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A6,(%d,A4)\n", pc, disp)
}

func (c *Processor) op394F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A7,(%d,A4)\n", pc, disp)
}

func (c *Processor) op3950() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A0),(%d,A4)\n", pc, disp)
}

func (c *Processor) op3951() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A1),(%d,A4)\n", pc, disp)
}

func (c *Processor) op3952() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A2),(%d,A4)\n", pc, disp)
}

func (c *Processor) op3953() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A3),(%d,A4)\n", pc, disp)
}

func (c *Processor) op3954() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A4),(%d,A4)\n", pc, disp)
}

func (c *Processor) op3955() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A5),(%d,A4)\n", pc, disp)
}

func (c *Processor) op3956() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A6),(%d,A4)\n", pc, disp)
}

func (c *Processor) op3957() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A7),(%d,A4)\n", pc, disp)
}

func (c *Processor) op3978() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,(%d,A4)\n", pc, v, disp)
}

func (c *Processor) op3979() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,(%d,A4)\n", pc, v, disp)
}

func (c *Processor) op397C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[4]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w #$%X,(%d,A4)\n", pc, v, disp)
}

func (c *Processor) op3A00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[5] = uint32(v)
	c.tracef("%04X move.w D0,D5\n", pc)
}

func (c *Processor) op3A01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[5] = uint32(v)
	c.tracef("%04X move.w D1,D5\n", pc)
}

func (c *Processor) op3A02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[5] = uint32(v)
	c.tracef("%04X move.w D2,D5\n", pc)
}

func (c *Processor) op3A03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[5] = uint32(v)
	c.tracef("%04X move.w D3,D5\n", pc)
}

func (c *Processor) op3A04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[5] = uint32(v)
	c.tracef("%04X move.w D4,D5\n", pc)
}

func (c *Processor) op3A05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[5] = uint32(v)
	c.tracef("%04X move.w D5,D5\n", pc)
}

func (c *Processor) op3A06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[5] = uint32(v)
	c.tracef("%04X move.w D6,D5\n", pc)
}

func (c *Processor) op3A07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[5] = uint32(v)
	c.tracef("%04X move.w D7,D5\n", pc)
}

func (c *Processor) op3A08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[5] = uint32(v)
	c.tracef("%04X move.w A0,D5\n", pc)
}

func (c *Processor) op3A09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[5] = uint32(v)
	c.tracef("%04X move.w A1,D5\n", pc)
}

func (c *Processor) op3A0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[5] = uint32(v)
	c.tracef("%04X move.w A2,D5\n", pc)
}

func (c *Processor) op3A0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[5] = uint32(v)
	c.tracef("%04X move.w A3,D5\n", pc)
}

func (c *Processor) op3A0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[5] = uint32(v)
	c.tracef("%04X move.w A4,D5\n", pc)
}

func (c *Processor) op3A0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[5] = uint32(v)
	c.tracef("%04X move.w A5,D5\n", pc)
}

func (c *Processor) op3A0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[5] = uint32(v)
	c.tracef("%04X move.w A6,D5\n", pc)
}

func (c *Processor) op3A0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[5] = uint32(v)
	c.tracef("%04X move.w A7,D5\n", pc)
}

func (c *Processor) op3A10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[5] = uint32(v)
	c.tracef("%04X move.w (A0),D5\n", pc)
}

func (c *Processor) op3A11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[5] = uint32(v)
	c.tracef("%04X move.w (A1),D5\n", pc)
}

func (c *Processor) op3A12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[5] = uint32(v)
	c.tracef("%04X move.w (A2),D5\n", pc)
}

func (c *Processor) op3A13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[5] = uint32(v)
	c.tracef("%04X move.w (A3),D5\n", pc)
}

func (c *Processor) op3A14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[5] = uint32(v)
	c.tracef("%04X move.w (A4),D5\n", pc)
}

func (c *Processor) op3A15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[5] = uint32(v)
	c.tracef("%04X move.w (A5),D5\n", pc)
}

func (c *Processor) op3A16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[5] = uint32(v)
	c.tracef("%04X move.w (A6),D5\n", pc)
}

func (c *Processor) op3A17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[5] = uint32(v)
	c.tracef("%04X move.w (A7),D5\n", pc)
}

func (c *Processor) op3A38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[5] = uint32(v)
	c.tracef("%04X move.w $%X,D5\n", pc, v)
}

func (c *Processor) op3A39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[5] = uint32(v)
	c.tracef("%04X move.w $%X,D5\n", pc, v)
}

func (c *Processor) op3A3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[5] = uint32(v)
	c.tracef("%04X move.w #$%X,D5\n", pc, v)
}

func (c *Processor) op3A40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w D0,A5\n", pc)
}

func (c *Processor) op3A41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w D1,A5\n", pc)
}

func (c *Processor) op3A42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w D2,A5\n", pc)
}

func (c *Processor) op3A43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w D3,A5\n", pc)
}

func (c *Processor) op3A44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w D4,A5\n", pc)
}

func (c *Processor) op3A45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w D5,A5\n", pc)
}

func (c *Processor) op3A46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w D6,A5\n", pc)
}

func (c *Processor) op3A47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w D7,A5\n", pc)
}

func (c *Processor) op3A48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w A0,A5\n", pc)
}

func (c *Processor) op3A49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w A1,A5\n", pc)
}

func (c *Processor) op3A4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w A2,A5\n", pc)
}

func (c *Processor) op3A4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w A3,A5\n", pc)
}

func (c *Processor) op3A4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w A4,A5\n", pc)
}

func (c *Processor) op3A4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w A5,A5\n", pc)
}

func (c *Processor) op3A4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w A6,A5\n", pc)
}

func (c *Processor) op3A4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w A7,A5\n", pc)
}

func (c *Processor) op3A50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w (A0),A5\n", pc)
}

func (c *Processor) op3A51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w (A1),A5\n", pc)
}

func (c *Processor) op3A52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w (A2),A5\n", pc)
}

func (c *Processor) op3A53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w (A3),A5\n", pc)
}

func (c *Processor) op3A54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w (A4),A5\n", pc)
}

func (c *Processor) op3A55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w (A5),A5\n", pc)
}

func (c *Processor) op3A56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w (A6),A5\n", pc)
}

func (c *Processor) op3A57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w (A7),A5\n", pc)
}

func (c *Processor) op3A78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w $%X,A5\n", pc, v)
}

func (c *Processor) op3A79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w $%X,A5\n", pc, v)
}

func (c *Processor) op3A7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] = uint32(v)
	c.tracef("%04X movea.w #$%X,A5\n", pc, v)
}

func (c *Processor) op3A80() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w D0,(A5)\n", pc)
}

func (c *Processor) op3A81() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w D1,(A5)\n", pc)
}

func (c *Processor) op3A82() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w D2,(A5)\n", pc)
}

func (c *Processor) op3A83() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w D3,(A5)\n", pc)
}

func (c *Processor) op3A84() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w D4,(A5)\n", pc)
}

func (c *Processor) op3A85() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w D5,(A5)\n", pc)
}

func (c *Processor) op3A86() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w D6,(A5)\n", pc)
}

func (c *Processor) op3A87() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w D7,(A5)\n", pc)
}

func (c *Processor) op3A88() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w A0,(A5)\n", pc)
}

func (c *Processor) op3A89() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w A1,(A5)\n", pc)
}

func (c *Processor) op3A8A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w A2,(A5)\n", pc)
}

func (c *Processor) op3A8B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w A3,(A5)\n", pc)
}

func (c *Processor) op3A8C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w A4,(A5)\n", pc)
}

func (c *Processor) op3A8D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w A5,(A5)\n", pc)
}

func (c *Processor) op3A8E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w A6,(A5)\n", pc)
}

func (c *Processor) op3A8F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w A7,(A5)\n", pc)
}

func (c *Processor) op3A90() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w (A0),(A5)\n", pc)
}

func (c *Processor) op3A91() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w (A1),(A5)\n", pc)
}

func (c *Processor) op3A92() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w (A2),(A5)\n", pc)
}

func (c *Processor) op3A93() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w (A3),(A5)\n", pc)
}

func (c *Processor) op3A94() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w (A4),(A5)\n", pc)
}

func (c *Processor) op3A95() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w (A5),(A5)\n", pc)
}

func (c *Processor) op3A96() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w (A6),(A5)\n", pc)
}

func (c *Processor) op3A97() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w (A7),(A5)\n", pc)
}

func (c *Processor) op3AB8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w $%X,(A5)\n", pc, v)
}

func (c *Processor) op3AB9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w $%X,(A5)\n", pc, v)
}

func (c *Processor) op3ABC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w #$%X,(A5)\n", pc, v)
}

func (c *Processor) op3AC0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w D0,(A5)+\n", pc)
}

func (c *Processor) op3AC1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w D1,(A5)+\n", pc)
}

func (c *Processor) op3AC2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w D2,(A5)+\n", pc)
}

func (c *Processor) op3AC3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w D3,(A5)+\n", pc)
}

func (c *Processor) op3AC4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w D4,(A5)+\n", pc)
}

func (c *Processor) op3AC5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w D5,(A5)+\n", pc)
}

func (c *Processor) op3AC6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w D6,(A5)+\n", pc)
}

func (c *Processor) op3AC7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w D7,(A5)+\n", pc)
}

func (c *Processor) op3AC8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w A0,(A5)+\n", pc)
}

func (c *Processor) op3AC9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w A1,(A5)+\n", pc)
}

func (c *Processor) op3ACA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w A2,(A5)+\n", pc)
}

func (c *Processor) op3ACB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w A3,(A5)+\n", pc)
}

func (c *Processor) op3ACC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w A4,(A5)+\n", pc)
}

func (c *Processor) op3ACD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w A5,(A5)+\n", pc)
}

func (c *Processor) op3ACE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w A6,(A5)+\n", pc)
}

func (c *Processor) op3ACF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w A7,(A5)+\n", pc)
}

func (c *Processor) op3AD0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w (A0),(A5)+\n", pc)
}

func (c *Processor) op3AD1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w (A1),(A5)+\n", pc)
}

func (c *Processor) op3AD2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w (A2),(A5)+\n", pc)
}

func (c *Processor) op3AD3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w (A3),(A5)+\n", pc)
}

func (c *Processor) op3AD4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w (A4),(A5)+\n", pc)
}

func (c *Processor) op3AD5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w (A5),(A5)+\n", pc)
}

func (c *Processor) op3AD6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w (A6),(A5)+\n", pc)
}

func (c *Processor) op3AD7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w (A7),(A5)+\n", pc)
}

func (c *Processor) op3AF8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w $%X,(A5)+\n", pc, v)
}

func (c *Processor) op3AF9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w $%X,(A5)+\n", pc, v)
}

func (c *Processor) op3AFC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[5], uint32(v))
	c.A[5] += 4
	c.tracef("%04X move.w #$%X,(A5)+\n", pc, v)
}

func (c *Processor) op3B00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w D0,-(A5)\n", pc)
}

func (c *Processor) op3B01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w D1,-(A5)\n", pc)
}

func (c *Processor) op3B02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w D2,-(A5)\n", pc)
}

func (c *Processor) op3B03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w D3,-(A5)\n", pc)
}

func (c *Processor) op3B04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w D4,-(A5)\n", pc)
}

func (c *Processor) op3B05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w D5,-(A5)\n", pc)
}

func (c *Processor) op3B06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w D6,-(A5)\n", pc)
}

func (c *Processor) op3B07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w D7,-(A5)\n", pc)
}

func (c *Processor) op3B08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.w A0,-(A5)\n", pc)
}

func (c *Processor) op3B09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.w A1,-(A5)\n", pc)
}

func (c *Processor) op3B0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.w A2,-(A5)\n", pc)
}

func (c *Processor) op3B0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.w A3,-(A5)\n", pc)
}

func (c *Processor) op3B0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.w A4,-(A5)\n", pc)
}

func (c *Processor) op3B0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.w A5,-(A5)\n", pc)
}

func (c *Processor) op3B0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.w A6,-(A5)\n", pc)
}

func (c *Processor) op3B0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X movep.w A7,-(A5)\n", pc)
}

func (c *Processor) op3B10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w (A0),-(A5)\n", pc)
}

func (c *Processor) op3B11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w (A1),-(A5)\n", pc)
}

func (c *Processor) op3B12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w (A2),-(A5)\n", pc)
}

func (c *Processor) op3B13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w (A3),-(A5)\n", pc)
}

func (c *Processor) op3B14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w (A4),-(A5)\n", pc)
}

func (c *Processor) op3B15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w (A5),-(A5)\n", pc)
}

func (c *Processor) op3B16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w (A6),-(A5)\n", pc)
}

func (c *Processor) op3B17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w (A7),-(A5)\n", pc)
}

func (c *Processor) op3B38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w $%X,-(A5)\n", pc, v)
}

func (c *Processor) op3B39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w $%X,-(A5)\n", pc, v)
}

func (c *Processor) op3B3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[5] -= 4
	c.writeLong(c.A[5], uint32(v))
	c.tracef("%04X move.w #$%X,-(A5)\n", pc, v)
}

func (c *Processor) op3B40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D0,(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D1,(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D2,(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D3,(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D4,(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D5,(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D6,(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D7,(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A0,(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A1,(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A2,(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A3,(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A4,(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A5,(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A6,(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A7,(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A0),(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A1),(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A2),(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A3),(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A4),(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A5),(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A6),(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A7),(%d,A5)\n", pc, disp)
}

func (c *Processor) op3B78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,(%d,A5)\n", pc, v, disp)
}

func (c *Processor) op3B79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,(%d,A5)\n", pc, v, disp)
}

func (c *Processor) op3B7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[5]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w #$%X,(%d,A5)\n", pc, v, disp)
}

func (c *Processor) op3C00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[6] = uint32(v)
	c.tracef("%04X move.w D0,D6\n", pc)
}

func (c *Processor) op3C01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[6] = uint32(v)
	c.tracef("%04X move.w D1,D6\n", pc)
}

func (c *Processor) op3C02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[6] = uint32(v)
	c.tracef("%04X move.w D2,D6\n", pc)
}

func (c *Processor) op3C03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[6] = uint32(v)
	c.tracef("%04X move.w D3,D6\n", pc)
}

func (c *Processor) op3C04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[6] = uint32(v)
	c.tracef("%04X move.w D4,D6\n", pc)
}

func (c *Processor) op3C05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[6] = uint32(v)
	c.tracef("%04X move.w D5,D6\n", pc)
}

func (c *Processor) op3C06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[6] = uint32(v)
	c.tracef("%04X move.w D6,D6\n", pc)
}

func (c *Processor) op3C07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[6] = uint32(v)
	c.tracef("%04X move.w D7,D6\n", pc)
}

func (c *Processor) op3C08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[6] = uint32(v)
	c.tracef("%04X move.w A0,D6\n", pc)
}

func (c *Processor) op3C09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[6] = uint32(v)
	c.tracef("%04X move.w A1,D6\n", pc)
}

func (c *Processor) op3C0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[6] = uint32(v)
	c.tracef("%04X move.w A2,D6\n", pc)
}

func (c *Processor) op3C0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[6] = uint32(v)
	c.tracef("%04X move.w A3,D6\n", pc)
}

func (c *Processor) op3C0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[6] = uint32(v)
	c.tracef("%04X move.w A4,D6\n", pc)
}

func (c *Processor) op3C0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[6] = uint32(v)
	c.tracef("%04X move.w A5,D6\n", pc)
}

func (c *Processor) op3C0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[6] = uint32(v)
	c.tracef("%04X move.w A6,D6\n", pc)
}

func (c *Processor) op3C0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[6] = uint32(v)
	c.tracef("%04X move.w A7,D6\n", pc)
}

func (c *Processor) op3C10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[6] = uint32(v)
	c.tracef("%04X move.w (A0),D6\n", pc)
}

func (c *Processor) op3C11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[6] = uint32(v)
	c.tracef("%04X move.w (A1),D6\n", pc)
}

func (c *Processor) op3C12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[6] = uint32(v)
	c.tracef("%04X move.w (A2),D6\n", pc)
}

func (c *Processor) op3C13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[6] = uint32(v)
	c.tracef("%04X move.w (A3),D6\n", pc)
}

func (c *Processor) op3C14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[6] = uint32(v)
	c.tracef("%04X move.w (A4),D6\n", pc)
}

func (c *Processor) op3C15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[6] = uint32(v)
	c.tracef("%04X move.w (A5),D6\n", pc)
}

func (c *Processor) op3C16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[6] = uint32(v)
	c.tracef("%04X move.w (A6),D6\n", pc)
}

func (c *Processor) op3C17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[6] = uint32(v)
	c.tracef("%04X move.w (A7),D6\n", pc)
}

func (c *Processor) op3C38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[6] = uint32(v)
	c.tracef("%04X move.w $%X,D6\n", pc, v)
}

func (c *Processor) op3C39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[6] = uint32(v)
	c.tracef("%04X move.w $%X,D6\n", pc, v)
}

func (c *Processor) op3C3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[6] = uint32(v)
	c.tracef("%04X move.w #$%X,D6\n", pc, v)
}

func (c *Processor) op3C40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w D0,A6\n", pc)
}

func (c *Processor) op3C41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w D1,A6\n", pc)
}

func (c *Processor) op3C42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w D2,A6\n", pc)
}

func (c *Processor) op3C43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w D3,A6\n", pc)
}

func (c *Processor) op3C44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w D4,A6\n", pc)
}

func (c *Processor) op3C45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w D5,A6\n", pc)
}

func (c *Processor) op3C46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w D6,A6\n", pc)
}

func (c *Processor) op3C47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w D7,A6\n", pc)
}

func (c *Processor) op3C48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w A0,A6\n", pc)
}

func (c *Processor) op3C49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w A1,A6\n", pc)
}

func (c *Processor) op3C4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w A2,A6\n", pc)
}

func (c *Processor) op3C4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w A3,A6\n", pc)
}

func (c *Processor) op3C4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w A4,A6\n", pc)
}

func (c *Processor) op3C4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w A5,A6\n", pc)
}

func (c *Processor) op3C4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w A6,A6\n", pc)
}

func (c *Processor) op3C4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w A7,A6\n", pc)
}

func (c *Processor) op3C50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w (A0),A6\n", pc)
}

func (c *Processor) op3C51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w (A1),A6\n", pc)
}

func (c *Processor) op3C52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w (A2),A6\n", pc)
}

func (c *Processor) op3C53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w (A3),A6\n", pc)
}

func (c *Processor) op3C54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w (A4),A6\n", pc)
}

func (c *Processor) op3C55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w (A5),A6\n", pc)
}

func (c *Processor) op3C56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w (A6),A6\n", pc)
}

func (c *Processor) op3C57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w (A7),A6\n", pc)
}

func (c *Processor) op3C78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w $%X,A6\n", pc, v)
}

func (c *Processor) op3C79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w $%X,A6\n", pc, v)
}

func (c *Processor) op3C7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] = uint32(v)
	c.tracef("%04X movea.w #$%X,A6\n", pc, v)
}

func (c *Processor) op3C80() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w D0,(A6)\n", pc)
}

func (c *Processor) op3C81() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w D1,(A6)\n", pc)
}

func (c *Processor) op3C82() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w D2,(A6)\n", pc)
}

func (c *Processor) op3C83() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w D3,(A6)\n", pc)
}

func (c *Processor) op3C84() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w D4,(A6)\n", pc)
}

func (c *Processor) op3C85() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w D5,(A6)\n", pc)
}

func (c *Processor) op3C86() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w D6,(A6)\n", pc)
}

func (c *Processor) op3C87() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w D7,(A6)\n", pc)
}

func (c *Processor) op3C88() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w A0,(A6)\n", pc)
}

func (c *Processor) op3C89() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w A1,(A6)\n", pc)
}

func (c *Processor) op3C8A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w A2,(A6)\n", pc)
}

func (c *Processor) op3C8B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w A3,(A6)\n", pc)
}

func (c *Processor) op3C8C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w A4,(A6)\n", pc)
}

func (c *Processor) op3C8D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w A5,(A6)\n", pc)
}

func (c *Processor) op3C8E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w A6,(A6)\n", pc)
}

func (c *Processor) op3C8F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w A7,(A6)\n", pc)
}

func (c *Processor) op3C90() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w (A0),(A6)\n", pc)
}

func (c *Processor) op3C91() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w (A1),(A6)\n", pc)
}

func (c *Processor) op3C92() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w (A2),(A6)\n", pc)
}

func (c *Processor) op3C93() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w (A3),(A6)\n", pc)
}

func (c *Processor) op3C94() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w (A4),(A6)\n", pc)
}

func (c *Processor) op3C95() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w (A5),(A6)\n", pc)
}

func (c *Processor) op3C96() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w (A6),(A6)\n", pc)
}

func (c *Processor) op3C97() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w (A7),(A6)\n", pc)
}

func (c *Processor) op3CB8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w $%X,(A6)\n", pc, v)
}

func (c *Processor) op3CB9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w $%X,(A6)\n", pc, v)
}

func (c *Processor) op3CBC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w #$%X,(A6)\n", pc, v)
}

func (c *Processor) op3CC0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w D0,(A6)+\n", pc)
}

func (c *Processor) op3CC1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w D1,(A6)+\n", pc)
}

func (c *Processor) op3CC2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w D2,(A6)+\n", pc)
}

func (c *Processor) op3CC3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w D3,(A6)+\n", pc)
}

func (c *Processor) op3CC4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w D4,(A6)+\n", pc)
}

func (c *Processor) op3CC5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w D5,(A6)+\n", pc)
}

func (c *Processor) op3CC6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w D6,(A6)+\n", pc)
}

func (c *Processor) op3CC7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w D7,(A6)+\n", pc)
}

func (c *Processor) op3CC8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w A0,(A6)+\n", pc)
}

func (c *Processor) op3CC9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w A1,(A6)+\n", pc)
}

func (c *Processor) op3CCA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w A2,(A6)+\n", pc)
}

func (c *Processor) op3CCB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w A3,(A6)+\n", pc)
}

func (c *Processor) op3CCC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w A4,(A6)+\n", pc)
}

func (c *Processor) op3CCD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w A5,(A6)+\n", pc)
}

func (c *Processor) op3CCE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w A6,(A6)+\n", pc)
}

func (c *Processor) op3CCF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w A7,(A6)+\n", pc)
}

func (c *Processor) op3CD0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w (A0),(A6)+\n", pc)
}

func (c *Processor) op3CD1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w (A1),(A6)+\n", pc)
}

func (c *Processor) op3CD2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w (A2),(A6)+\n", pc)
}

func (c *Processor) op3CD3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w (A3),(A6)+\n", pc)
}

func (c *Processor) op3CD4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w (A4),(A6)+\n", pc)
}

func (c *Processor) op3CD5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w (A5),(A6)+\n", pc)
}

func (c *Processor) op3CD6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w (A6),(A6)+\n", pc)
}

func (c *Processor) op3CD7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w (A7),(A6)+\n", pc)
}

func (c *Processor) op3CF8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w $%X,(A6)+\n", pc, v)
}

func (c *Processor) op3CF9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w $%X,(A6)+\n", pc, v)
}

func (c *Processor) op3CFC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[6], uint32(v))
	c.A[6] += 4
	c.tracef("%04X move.w #$%X,(A6)+\n", pc, v)
}

func (c *Processor) op3D00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w D0,-(A6)\n", pc)
}

func (c *Processor) op3D01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w D1,-(A6)\n", pc)
}

func (c *Processor) op3D02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w D2,-(A6)\n", pc)
}

func (c *Processor) op3D03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w D3,-(A6)\n", pc)
}

func (c *Processor) op3D04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w D4,-(A6)\n", pc)
}

func (c *Processor) op3D05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w D5,-(A6)\n", pc)
}

func (c *Processor) op3D06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w D6,-(A6)\n", pc)
}

func (c *Processor) op3D07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w D7,-(A6)\n", pc)
}

func (c *Processor) op3D08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.w A0,-(A6)\n", pc)
}

func (c *Processor) op3D09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.w A1,-(A6)\n", pc)
}

func (c *Processor) op3D0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.w A2,-(A6)\n", pc)
}

func (c *Processor) op3D0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.w A3,-(A6)\n", pc)
}

func (c *Processor) op3D0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.w A4,-(A6)\n", pc)
}

func (c *Processor) op3D0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.w A5,-(A6)\n", pc)
}

func (c *Processor) op3D0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.w A6,-(A6)\n", pc)
}

func (c *Processor) op3D0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X movep.w A7,-(A6)\n", pc)
}

func (c *Processor) op3D10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w (A0),-(A6)\n", pc)
}

func (c *Processor) op3D11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w (A1),-(A6)\n", pc)
}

func (c *Processor) op3D12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w (A2),-(A6)\n", pc)
}

func (c *Processor) op3D13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w (A3),-(A6)\n", pc)
}

func (c *Processor) op3D14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w (A4),-(A6)\n", pc)
}

func (c *Processor) op3D15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w (A5),-(A6)\n", pc)
}

func (c *Processor) op3D16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w (A6),-(A6)\n", pc)
}

func (c *Processor) op3D17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w (A7),-(A6)\n", pc)
}

func (c *Processor) op3D38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w $%X,-(A6)\n", pc, v)
}

func (c *Processor) op3D39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w $%X,-(A6)\n", pc, v)
}

func (c *Processor) op3D3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[6] -= 4
	c.writeLong(c.A[6], uint32(v))
	c.tracef("%04X move.w #$%X,-(A6)\n", pc, v)
}

func (c *Processor) op3D40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D0,(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D1,(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D2,(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D3,(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D4,(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D5,(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D6,(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D7,(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A0,(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A1,(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A2,(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A3,(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A4,(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A5,(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A6,(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A7,(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A0),(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A1),(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A2),(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A3),(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A4),(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A5),(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A6),(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A7),(%d,A6)\n", pc, disp)
}

func (c *Processor) op3D78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,(%d,A6)\n", pc, v, disp)
}

func (c *Processor) op3D79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,(%d,A6)\n", pc, v, disp)
}

func (c *Processor) op3D7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[6]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w #$%X,(%d,A6)\n", pc, v, disp)
}

func (c *Processor) op3E00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.D[7] = uint32(v)
	c.tracef("%04X move.w D0,D7\n", pc)
}

func (c *Processor) op3E01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.D[7] = uint32(v)
	c.tracef("%04X move.w D1,D7\n", pc)
}

func (c *Processor) op3E02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.D[7] = uint32(v)
	c.tracef("%04X move.w D2,D7\n", pc)
}

func (c *Processor) op3E03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.D[7] = uint32(v)
	c.tracef("%04X move.w D3,D7\n", pc)
}

func (c *Processor) op3E04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.D[7] = uint32(v)
	c.tracef("%04X move.w D4,D7\n", pc)
}

func (c *Processor) op3E05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.D[7] = uint32(v)
	c.tracef("%04X move.w D5,D7\n", pc)
}

func (c *Processor) op3E06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.D[7] = uint32(v)
	c.tracef("%04X move.w D6,D7\n", pc)
}

func (c *Processor) op3E07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.D[7] = uint32(v)
	c.tracef("%04X move.w D7,D7\n", pc)
}

func (c *Processor) op3E08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.D[7] = uint32(v)
	c.tracef("%04X move.w A0,D7\n", pc)
}

func (c *Processor) op3E09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.D[7] = uint32(v)
	c.tracef("%04X move.w A1,D7\n", pc)
}

func (c *Processor) op3E0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.D[7] = uint32(v)
	c.tracef("%04X move.w A2,D7\n", pc)
}

func (c *Processor) op3E0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.D[7] = uint32(v)
	c.tracef("%04X move.w A3,D7\n", pc)
}

func (c *Processor) op3E0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.D[7] = uint32(v)
	c.tracef("%04X move.w A4,D7\n", pc)
}

func (c *Processor) op3E0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.D[7] = uint32(v)
	c.tracef("%04X move.w A5,D7\n", pc)
}

func (c *Processor) op3E0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.D[7] = uint32(v)
	c.tracef("%04X move.w A6,D7\n", pc)
}

func (c *Processor) op3E0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.D[7] = uint32(v)
	c.tracef("%04X move.w A7,D7\n", pc)
}

func (c *Processor) op3E10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[7] = uint32(v)
	c.tracef("%04X move.w (A0),D7\n", pc)
}

func (c *Processor) op3E11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[7] = uint32(v)
	c.tracef("%04X move.w (A1),D7\n", pc)
}

func (c *Processor) op3E12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[7] = uint32(v)
	c.tracef("%04X move.w (A2),D7\n", pc)
}

func (c *Processor) op3E13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[7] = uint32(v)
	c.tracef("%04X move.w (A3),D7\n", pc)
}

func (c *Processor) op3E14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[7] = uint32(v)
	c.tracef("%04X move.w (A4),D7\n", pc)
}

func (c *Processor) op3E15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[7] = uint32(v)
	c.tracef("%04X move.w (A5),D7\n", pc)
}

func (c *Processor) op3E16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[7] = uint32(v)
	c.tracef("%04X move.w (A6),D7\n", pc)
}

func (c *Processor) op3E17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[7] = uint32(v)
	c.tracef("%04X move.w (A7),D7\n", pc)
}

func (c *Processor) op3E38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[7] = uint32(v)
	c.tracef("%04X move.w $%X,D7\n", pc, v)
}

func (c *Processor) op3E39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[7] = uint32(v)
	c.tracef("%04X move.w $%X,D7\n", pc, v)
}

func (c *Processor) op3E3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.D[7] = uint32(v)
	c.tracef("%04X move.w #$%X,D7\n", pc, v)
}

func (c *Processor) op3E40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w D0,A7\n", pc)
}

func (c *Processor) op3E41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w D1,A7\n", pc)
}

func (c *Processor) op3E42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w D2,A7\n", pc)
}

func (c *Processor) op3E43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w D3,A7\n", pc)
}

func (c *Processor) op3E44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w D4,A7\n", pc)
}

func (c *Processor) op3E45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w D5,A7\n", pc)
}

func (c *Processor) op3E46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w D6,A7\n", pc)
}

func (c *Processor) op3E47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w D7,A7\n", pc)
}

func (c *Processor) op3E48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w A0,A7\n", pc)
}

func (c *Processor) op3E49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w A1,A7\n", pc)
}

func (c *Processor) op3E4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w A2,A7\n", pc)
}

func (c *Processor) op3E4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w A3,A7\n", pc)
}

func (c *Processor) op3E4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w A4,A7\n", pc)
}

func (c *Processor) op3E4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w A5,A7\n", pc)
}

func (c *Processor) op3E4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w A6,A7\n", pc)
}

func (c *Processor) op3E4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w A7,A7\n", pc)
}

func (c *Processor) op3E50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w (A0),A7\n", pc)
}

func (c *Processor) op3E51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w (A1),A7\n", pc)
}

func (c *Processor) op3E52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w (A2),A7\n", pc)
}

func (c *Processor) op3E53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w (A3),A7\n", pc)
}

func (c *Processor) op3E54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w (A4),A7\n", pc)
}

func (c *Processor) op3E55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w (A5),A7\n", pc)
}

func (c *Processor) op3E56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w (A6),A7\n", pc)
}

func (c *Processor) op3E57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w (A7),A7\n", pc)
}

func (c *Processor) op3E78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w $%X,A7\n", pc, v)
}

func (c *Processor) op3E79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w $%X,A7\n", pc, v)
}

func (c *Processor) op3E7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] = uint32(v)
	c.tracef("%04X movea.w #$%X,A7\n", pc, v)
}

func (c *Processor) op3E80() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w D0,(A7)\n", pc)
}

func (c *Processor) op3E81() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w D1,(A7)\n", pc)
}

func (c *Processor) op3E82() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w D2,(A7)\n", pc)
}

func (c *Processor) op3E83() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w D3,(A7)\n", pc)
}

func (c *Processor) op3E84() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w D4,(A7)\n", pc)
}

func (c *Processor) op3E85() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w D5,(A7)\n", pc)
}

func (c *Processor) op3E86() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w D6,(A7)\n", pc)
}

func (c *Processor) op3E87() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w D7,(A7)\n", pc)
}

func (c *Processor) op3E88() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w A0,(A7)\n", pc)
}

func (c *Processor) op3E89() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w A1,(A7)\n", pc)
}

func (c *Processor) op3E8A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w A2,(A7)\n", pc)
}

func (c *Processor) op3E8B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w A3,(A7)\n", pc)
}

func (c *Processor) op3E8C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w A4,(A7)\n", pc)
}

func (c *Processor) op3E8D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w A5,(A7)\n", pc)
}

func (c *Processor) op3E8E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w A6,(A7)\n", pc)
}

func (c *Processor) op3E8F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w A7,(A7)\n", pc)
}

func (c *Processor) op3E90() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w (A0),(A7)\n", pc)
}

func (c *Processor) op3E91() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w (A1),(A7)\n", pc)
}

func (c *Processor) op3E92() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w (A2),(A7)\n", pc)
}

func (c *Processor) op3E93() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w (A3),(A7)\n", pc)
}

func (c *Processor) op3E94() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w (A4),(A7)\n", pc)
}

func (c *Processor) op3E95() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w (A5),(A7)\n", pc)
}

func (c *Processor) op3E96() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w (A6),(A7)\n", pc)
}

func (c *Processor) op3E97() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w (A7),(A7)\n", pc)
}

func (c *Processor) op3EB8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w $%X,(A7)\n", pc, v)
}

func (c *Processor) op3EB9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w $%X,(A7)\n", pc, v)
}

func (c *Processor) op3EBC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w #$%X,(A7)\n", pc, v)
}

func (c *Processor) op3EC0() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w D0,(A7)+\n", pc)
}

func (c *Processor) op3EC1() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w D1,(A7)+\n", pc)
}

func (c *Processor) op3EC2() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w D2,(A7)+\n", pc)
}

func (c *Processor) op3EC3() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w D3,(A7)+\n", pc)
}

func (c *Processor) op3EC4() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w D4,(A7)+\n", pc)
}

func (c *Processor) op3EC5() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w D5,(A7)+\n", pc)
}

func (c *Processor) op3EC6() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w D6,(A7)+\n", pc)
}

func (c *Processor) op3EC7() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w D7,(A7)+\n", pc)
}

func (c *Processor) op3EC8() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w A0,(A7)+\n", pc)
}

func (c *Processor) op3EC9() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w A1,(A7)+\n", pc)
}

func (c *Processor) op3ECA() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w A2,(A7)+\n", pc)
}

func (c *Processor) op3ECB() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w A3,(A7)+\n", pc)
}

func (c *Processor) op3ECC() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w A4,(A7)+\n", pc)
}

func (c *Processor) op3ECD() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w A5,(A7)+\n", pc)
}

func (c *Processor) op3ECE() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w A6,(A7)+\n", pc)
}

func (c *Processor) op3ECF() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w A7,(A7)+\n", pc)
}

func (c *Processor) op3ED0() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w (A0),(A7)+\n", pc)
}

func (c *Processor) op3ED1() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w (A1),(A7)+\n", pc)
}

func (c *Processor) op3ED2() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w (A2),(A7)+\n", pc)
}

func (c *Processor) op3ED3() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w (A3),(A7)+\n", pc)
}

func (c *Processor) op3ED4() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w (A4),(A7)+\n", pc)
}

func (c *Processor) op3ED5() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w (A5),(A7)+\n", pc)
}

func (c *Processor) op3ED6() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w (A6),(A7)+\n", pc)
}

func (c *Processor) op3ED7() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w (A7),(A7)+\n", pc)
}

func (c *Processor) op3EF8() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w $%X,(A7)+\n", pc, v)
}

func (c *Processor) op3EF9() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w $%X,(A7)+\n", pc, v)
}

func (c *Processor) op3EFC() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.writeLong(c.A[7], uint32(v))
	c.A[7] += 4
	c.tracef("%04X move.w #$%X,(A7)+\n", pc, v)
}

func (c *Processor) op3F00() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w D0,-(A7)\n", pc)
}

func (c *Processor) op3F01() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w D1,-(A7)\n", pc)
}

func (c *Processor) op3F02() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w D2,-(A7)\n", pc)
}

func (c *Processor) op3F03() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w D3,-(A7)\n", pc)
}

func (c *Processor) op3F04() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w D4,-(A7)\n", pc)
}

func (c *Processor) op3F05() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w D5,-(A7)\n", pc)
}

func (c *Processor) op3F06() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w D6,-(A7)\n", pc)
}

func (c *Processor) op3F07() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w D7,-(A7)\n", pc)
}

func (c *Processor) op3F08() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.w A0,-(A7)\n", pc)
}

func (c *Processor) op3F09() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.w A1,-(A7)\n", pc)
}

func (c *Processor) op3F0A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.w A2,-(A7)\n", pc)
}

func (c *Processor) op3F0B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.w A3,-(A7)\n", pc)
}

func (c *Processor) op3F0C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.w A4,-(A7)\n", pc)
}

func (c *Processor) op3F0D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.w A5,-(A7)\n", pc)
}

func (c *Processor) op3F0E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.w A6,-(A7)\n", pc)
}

func (c *Processor) op3F0F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X movep.w A7,-(A7)\n", pc)
}

func (c *Processor) op3F10() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w (A0),-(A7)\n", pc)
}

func (c *Processor) op3F11() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w (A1),-(A7)\n", pc)
}

func (c *Processor) op3F12() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w (A2),-(A7)\n", pc)
}

func (c *Processor) op3F13() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w (A3),-(A7)\n", pc)
}

func (c *Processor) op3F14() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w (A4),-(A7)\n", pc)
}

func (c *Processor) op3F15() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w (A5),-(A7)\n", pc)
}

func (c *Processor) op3F16() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w (A6),-(A7)\n", pc)
}

func (c *Processor) op3F17() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w (A7),-(A7)\n", pc)
}

func (c *Processor) op3F38() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w $%X,-(A7)\n", pc, v)
}

func (c *Processor) op3F39() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w $%X,-(A7)\n", pc, v)
}

func (c *Processor) op3F3C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	c.A[7] -= 4
	c.writeLong(c.A[7], uint32(v))
	c.tracef("%04X move.w #$%X,-(A7)\n", pc, v)
}

func (c *Processor) op3F40() {
	pc := c.PC
	c.PC += 2
	v := c.D[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D0,(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F41() {
	pc := c.PC
	c.PC += 2
	v := c.D[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D1,(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F42() {
	pc := c.PC
	c.PC += 2
	v := c.D[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D2,(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F43() {
	pc := c.PC
	c.PC += 2
	v := c.D[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D3,(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F44() {
	pc := c.PC
	c.PC += 2
	v := c.D[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D4,(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F45() {
	pc := c.PC
	c.PC += 2
	v := c.D[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D5,(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F46() {
	pc := c.PC
	c.PC += 2
	v := c.D[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D6,(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F47() {
	pc := c.PC
	c.PC += 2
	v := c.D[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w D7,(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F48() {
	pc := c.PC
	c.PC += 2
	v := c.A[0]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A0,(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F49() {
	pc := c.PC
	c.PC += 2
	v := c.A[1]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A1,(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F4A() {
	pc := c.PC
	c.PC += 2
	v := c.A[2]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A2,(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F4B() {
	pc := c.PC
	c.PC += 2
	v := c.A[3]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A3,(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F4C() {
	pc := c.PC
	c.PC += 2
	v := c.A[4]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A4,(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F4D() {
	pc := c.PC
	c.PC += 2
	v := c.A[5]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A5,(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F4E() {
	pc := c.PC
	c.PC += 2
	v := c.A[6]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A6,(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F4F() {
	pc := c.PC
	c.PC += 2
	v := c.A[7]
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X movep.w A7,(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F50() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[0]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A0),(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F51() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[1]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A1),(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F52() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[2]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A2),(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F53() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[3]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A3),(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F54() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[4]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A4),(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F55() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[5]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A5),(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F56() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[6]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A6),(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F57() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.A[7]), c.buf[:2])
	if c.err != nil {
		return
	}
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w (A7),(%d,A7)\n", pc, disp)
}

func (c *Processor) op3F78() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,(%d,A7)\n", pc, v, disp)
}

func (c *Processor) op3F79() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w $%X,(%d,A7)\n", pc, v, disp)
}

func (c *Processor) op3F7C() {
	pc := c.PC
	c.PC += 2
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	v := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	_, c.err = c.M.Read(int(c.PC), c.buf[:2])
	if c.err != nil {
		return
	}
	c.PC += 2
	disp := uint16(c.buf[0])<<8 | uint16(c.buf[1])
	addr := uint32(disp) + c.A[7]
	c.writeLong(addr, uint32(v))
	c.tracef("%04X move.w #$%X,(%d,A7)\n", pc, v, disp)
}

func (c *Processor) op4E40() {
	pc := c.PC
	c.PC += 2
	if c.handlers[32] != nil {
		c.err = c.handlers[32].Exception(c, 32)
	}
	c.tracef("%04X trap #0\n", pc)
}

func (c *Processor) op4E41() {
	pc := c.PC
	c.PC += 2
	if c.handlers[33] != nil {
		c.err = c.handlers[33].Exception(c, 33)
	}
	c.tracef("%04X trap #1\n", pc)
}

func (c *Processor) op4E42() {
	pc := c.PC
	c.PC += 2
	if c.handlers[34] != nil {
		c.err = c.handlers[34].Exception(c, 34)
	}
	c.tracef("%04X trap #2\n", pc)
}

func (c *Processor) op4E43() {
	pc := c.PC
	c.PC += 2
	if c.handlers[35] != nil {
		c.err = c.handlers[35].Exception(c, 35)
	}
	c.tracef("%04X trap #3\n", pc)
}

func (c *Processor) op4E44() {
	pc := c.PC
	c.PC += 2
	if c.handlers[36] != nil {
		c.err = c.handlers[36].Exception(c, 36)
	}
	c.tracef("%04X trap #4\n", pc)
}

func (c *Processor) op4E45() {
	pc := c.PC
	c.PC += 2
	if c.handlers[37] != nil {
		c.err = c.handlers[37].Exception(c, 37)
	}
	c.tracef("%04X trap #5\n", pc)
}

func (c *Processor) op4E46() {
	pc := c.PC
	c.PC += 2
	if c.handlers[38] != nil {
		c.err = c.handlers[38].Exception(c, 38)
	}
	c.tracef("%04X trap #6\n", pc)
}

func (c *Processor) op4E47() {
	pc := c.PC
	c.PC += 2
	if c.handlers[39] != nil {
		c.err = c.handlers[39].Exception(c, 39)
	}
	c.tracef("%04X trap #7\n", pc)
}

func (c *Processor) op4E48() {
	pc := c.PC
	c.PC += 2
	if c.handlers[40] != nil {
		c.err = c.handlers[40].Exception(c, 40)
	}
	c.tracef("%04X trap #8\n", pc)
}

func (c *Processor) op4E49() {
	pc := c.PC
	c.PC += 2
	if c.handlers[41] != nil {
		c.err = c.handlers[41].Exception(c, 41)
	}
	c.tracef("%04X trap #9\n", pc)
}

func (c *Processor) op4E4A() {
	pc := c.PC
	c.PC += 2
	if c.handlers[42] != nil {
		c.err = c.handlers[42].Exception(c, 42)
	}
	c.tracef("%04X trap #10\n", pc)
}

func (c *Processor) op4E4B() {
	pc := c.PC
	c.PC += 2
	if c.handlers[43] != nil {
		c.err = c.handlers[43].Exception(c, 43)
	}
	c.tracef("%04X trap #11\n", pc)
}

func (c *Processor) op4E4C() {
	pc := c.PC
	c.PC += 2
	if c.handlers[44] != nil {
		c.err = c.handlers[44].Exception(c, 44)
	}
	c.tracef("%04X trap #12\n", pc)
}

func (c *Processor) op4E4D() {
	pc := c.PC
	c.PC += 2
	if c.handlers[45] != nil {
		c.err = c.handlers[45].Exception(c, 45)
	}
	c.tracef("%04X trap #13\n", pc)
}

func (c *Processor) op4E4E() {
	pc := c.PC
	c.PC += 2
	if c.handlers[46] != nil {
		c.err = c.handlers[46].Exception(c, 46)
	}
	c.tracef("%04X trap #14\n", pc)
}

func (c *Processor) op4E4F() {
	pc := c.PC
	c.PC += 2
	if c.handlers[47] != nil {
		c.err = c.handlers[47].Exception(c, 47)
	}
	c.tracef("%04X trap #15\n", pc)
}

func (c *Processor) mapFn(op uint16) func() {
	return []func(){
		c.op0000,
		c.op0001,
		c.op0002,
		c.op0003,
		c.op0004,
		c.op0005,
		c.op0006,
		c.op0007,
		c.op0008,
		c.op0009,
		c.op000A,
		c.op000B,
		c.op000C,
		c.op000D,
		c.op000E,
		c.op000F,
		c.op0010,
		c.op0011,
		c.op0012,
		c.op0013,
		c.op0014,
		c.op0015,
		c.op0016,
		c.op0017,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0038,
		c.op0039,
		nil,
		nil,
		c.op003C,
		nil,
		nil,
		nil,
		c.op0040,
		c.op0041,
		c.op0042,
		c.op0043,
		c.op0044,
		c.op0045,
		c.op0046,
		c.op0047,
		c.op0048,
		c.op0049,
		c.op004A,
		c.op004B,
		c.op004C,
		c.op004D,
		c.op004E,
		c.op004F,
		c.op0050,
		c.op0051,
		c.op0052,
		c.op0053,
		c.op0054,
		c.op0055,
		c.op0056,
		c.op0057,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0078,
		c.op0079,
		nil,
		nil,
		c.op007C,
		nil,
		nil,
		nil,
		c.op0080,
		c.op0081,
		c.op0082,
		c.op0083,
		c.op0084,
		c.op0085,
		c.op0086,
		c.op0087,
		c.op0088,
		c.op0089,
		c.op008A,
		c.op008B,
		c.op008C,
		c.op008D,
		c.op008E,
		c.op008F,
		c.op0090,
		c.op0091,
		c.op0092,
		c.op0093,
		c.op0094,
		c.op0095,
		c.op0096,
		c.op0097,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op00B8,
		c.op00B9,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0100,
		c.op0101,
		c.op0102,
		c.op0103,
		c.op0104,
		c.op0105,
		c.op0106,
		c.op0107,
		c.op0108,
		c.op0109,
		c.op010A,
		c.op010B,
		c.op010C,
		c.op010D,
		c.op010E,
		c.op010F,
		c.op0110,
		c.op0111,
		c.op0112,
		c.op0113,
		c.op0114,
		c.op0115,
		c.op0116,
		c.op0117,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0138,
		c.op0139,
		nil,
		nil,
		c.op013C,
		nil,
		nil,
		nil,
		c.op0140,
		c.op0141,
		c.op0142,
		c.op0143,
		c.op0144,
		c.op0145,
		c.op0146,
		c.op0147,
		c.op0148,
		c.op0149,
		c.op014A,
		c.op014B,
		c.op014C,
		c.op014D,
		c.op014E,
		c.op014F,
		c.op0150,
		c.op0151,
		c.op0152,
		c.op0153,
		c.op0154,
		c.op0155,
		c.op0156,
		c.op0157,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0178,
		c.op0179,
		nil,
		nil,
		c.op017C,
		nil,
		nil,
		nil,
		c.op0180,
		c.op0181,
		c.op0182,
		c.op0183,
		c.op0184,
		c.op0185,
		c.op0186,
		c.op0187,
		c.op0188,
		c.op0189,
		c.op018A,
		c.op018B,
		c.op018C,
		c.op018D,
		c.op018E,
		c.op018F,
		c.op0190,
		c.op0191,
		c.op0192,
		c.op0193,
		c.op0194,
		c.op0195,
		c.op0196,
		c.op0197,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op01B8,
		c.op01B9,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0200,
		c.op0201,
		c.op0202,
		c.op0203,
		c.op0204,
		c.op0205,
		c.op0206,
		c.op0207,
		c.op0208,
		c.op0209,
		c.op020A,
		c.op020B,
		c.op020C,
		c.op020D,
		c.op020E,
		c.op020F,
		c.op0210,
		c.op0211,
		c.op0212,
		c.op0213,
		c.op0214,
		c.op0215,
		c.op0216,
		c.op0217,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0238,
		c.op0239,
		nil,
		nil,
		c.op023C,
		nil,
		nil,
		nil,
		c.op0240,
		c.op0241,
		c.op0242,
		c.op0243,
		c.op0244,
		c.op0245,
		c.op0246,
		c.op0247,
		c.op0248,
		c.op0249,
		c.op024A,
		c.op024B,
		c.op024C,
		c.op024D,
		c.op024E,
		c.op024F,
		c.op0250,
		c.op0251,
		c.op0252,
		c.op0253,
		c.op0254,
		c.op0255,
		c.op0256,
		c.op0257,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0278,
		c.op0279,
		nil,
		nil,
		c.op027C,
		nil,
		nil,
		nil,
		c.op0280,
		c.op0281,
		c.op0282,
		c.op0283,
		c.op0284,
		c.op0285,
		c.op0286,
		c.op0287,
		c.op0288,
		c.op0289,
		c.op028A,
		c.op028B,
		c.op028C,
		c.op028D,
		c.op028E,
		c.op028F,
		c.op0290,
		c.op0291,
		c.op0292,
		c.op0293,
		c.op0294,
		c.op0295,
		c.op0296,
		c.op0297,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op02B8,
		c.op02B9,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0300,
		c.op0301,
		c.op0302,
		c.op0303,
		c.op0304,
		c.op0305,
		c.op0306,
		c.op0307,
		c.op0308,
		c.op0309,
		c.op030A,
		c.op030B,
		c.op030C,
		c.op030D,
		c.op030E,
		c.op030F,
		c.op0310,
		c.op0311,
		c.op0312,
		c.op0313,
		c.op0314,
		c.op0315,
		c.op0316,
		c.op0317,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0338,
		c.op0339,
		nil,
		nil,
		c.op033C,
		nil,
		nil,
		nil,
		c.op0340,
		c.op0341,
		c.op0342,
		c.op0343,
		c.op0344,
		c.op0345,
		c.op0346,
		c.op0347,
		c.op0348,
		c.op0349,
		c.op034A,
		c.op034B,
		c.op034C,
		c.op034D,
		c.op034E,
		c.op034F,
		c.op0350,
		c.op0351,
		c.op0352,
		c.op0353,
		c.op0354,
		c.op0355,
		c.op0356,
		c.op0357,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0378,
		c.op0379,
		nil,
		nil,
		c.op037C,
		nil,
		nil,
		nil,
		c.op0380,
		c.op0381,
		c.op0382,
		c.op0383,
		c.op0384,
		c.op0385,
		c.op0386,
		c.op0387,
		c.op0388,
		c.op0389,
		c.op038A,
		c.op038B,
		c.op038C,
		c.op038D,
		c.op038E,
		c.op038F,
		c.op0390,
		c.op0391,
		c.op0392,
		c.op0393,
		c.op0394,
		c.op0395,
		c.op0396,
		c.op0397,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op03B8,
		c.op03B9,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0400,
		c.op0401,
		c.op0402,
		c.op0403,
		c.op0404,
		c.op0405,
		c.op0406,
		c.op0407,
		c.op0408,
		c.op0409,
		c.op040A,
		c.op040B,
		c.op040C,
		c.op040D,
		c.op040E,
		c.op040F,
		c.op0410,
		c.op0411,
		c.op0412,
		c.op0413,
		c.op0414,
		c.op0415,
		c.op0416,
		c.op0417,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0438,
		c.op0439,
		nil,
		nil,
		c.op043C,
		nil,
		nil,
		nil,
		c.op0440,
		c.op0441,
		c.op0442,
		c.op0443,
		c.op0444,
		c.op0445,
		c.op0446,
		c.op0447,
		c.op0448,
		c.op0449,
		c.op044A,
		c.op044B,
		c.op044C,
		c.op044D,
		c.op044E,
		c.op044F,
		c.op0450,
		c.op0451,
		c.op0452,
		c.op0453,
		c.op0454,
		c.op0455,
		c.op0456,
		c.op0457,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0478,
		c.op0479,
		nil,
		nil,
		c.op047C,
		nil,
		nil,
		nil,
		c.op0480,
		c.op0481,
		c.op0482,
		c.op0483,
		c.op0484,
		c.op0485,
		c.op0486,
		c.op0487,
		c.op0488,
		c.op0489,
		c.op048A,
		c.op048B,
		c.op048C,
		c.op048D,
		c.op048E,
		c.op048F,
		c.op0490,
		c.op0491,
		c.op0492,
		c.op0493,
		c.op0494,
		c.op0495,
		c.op0496,
		c.op0497,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op04B8,
		c.op04B9,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0500,
		c.op0501,
		c.op0502,
		c.op0503,
		c.op0504,
		c.op0505,
		c.op0506,
		c.op0507,
		c.op0508,
		c.op0509,
		c.op050A,
		c.op050B,
		c.op050C,
		c.op050D,
		c.op050E,
		c.op050F,
		c.op0510,
		c.op0511,
		c.op0512,
		c.op0513,
		c.op0514,
		c.op0515,
		c.op0516,
		c.op0517,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0538,
		c.op0539,
		nil,
		nil,
		c.op053C,
		nil,
		nil,
		nil,
		c.op0540,
		c.op0541,
		c.op0542,
		c.op0543,
		c.op0544,
		c.op0545,
		c.op0546,
		c.op0547,
		c.op0548,
		c.op0549,
		c.op054A,
		c.op054B,
		c.op054C,
		c.op054D,
		c.op054E,
		c.op054F,
		c.op0550,
		c.op0551,
		c.op0552,
		c.op0553,
		c.op0554,
		c.op0555,
		c.op0556,
		c.op0557,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0578,
		c.op0579,
		nil,
		nil,
		c.op057C,
		nil,
		nil,
		nil,
		c.op0580,
		c.op0581,
		c.op0582,
		c.op0583,
		c.op0584,
		c.op0585,
		c.op0586,
		c.op0587,
		c.op0588,
		c.op0589,
		c.op058A,
		c.op058B,
		c.op058C,
		c.op058D,
		c.op058E,
		c.op058F,
		c.op0590,
		c.op0591,
		c.op0592,
		c.op0593,
		c.op0594,
		c.op0595,
		c.op0596,
		c.op0597,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op05B8,
		c.op05B9,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0600,
		c.op0601,
		c.op0602,
		c.op0603,
		c.op0604,
		c.op0605,
		c.op0606,
		c.op0607,
		c.op0608,
		c.op0609,
		c.op060A,
		c.op060B,
		c.op060C,
		c.op060D,
		c.op060E,
		c.op060F,
		c.op0610,
		c.op0611,
		c.op0612,
		c.op0613,
		c.op0614,
		c.op0615,
		c.op0616,
		c.op0617,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0638,
		c.op0639,
		nil,
		nil,
		c.op063C,
		nil,
		nil,
		nil,
		c.op0640,
		c.op0641,
		c.op0642,
		c.op0643,
		c.op0644,
		c.op0645,
		c.op0646,
		c.op0647,
		c.op0648,
		c.op0649,
		c.op064A,
		c.op064B,
		c.op064C,
		c.op064D,
		c.op064E,
		c.op064F,
		c.op0650,
		c.op0651,
		c.op0652,
		c.op0653,
		c.op0654,
		c.op0655,
		c.op0656,
		c.op0657,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0678,
		c.op0679,
		nil,
		nil,
		c.op067C,
		nil,
		nil,
		nil,
		c.op0680,
		c.op0681,
		c.op0682,
		c.op0683,
		c.op0684,
		c.op0685,
		c.op0686,
		c.op0687,
		c.op0688,
		c.op0689,
		c.op068A,
		c.op068B,
		c.op068C,
		c.op068D,
		c.op068E,
		c.op068F,
		c.op0690,
		c.op0691,
		c.op0692,
		c.op0693,
		c.op0694,
		c.op0695,
		c.op0696,
		c.op0697,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op06B8,
		c.op06B9,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0700,
		c.op0701,
		c.op0702,
		c.op0703,
		c.op0704,
		c.op0705,
		c.op0706,
		c.op0707,
		c.op0708,
		c.op0709,
		c.op070A,
		c.op070B,
		c.op070C,
		c.op070D,
		c.op070E,
		c.op070F,
		c.op0710,
		c.op0711,
		c.op0712,
		c.op0713,
		c.op0714,
		c.op0715,
		c.op0716,
		c.op0717,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0738,
		c.op0739,
		nil,
		nil,
		c.op073C,
		nil,
		nil,
		nil,
		c.op0740,
		c.op0741,
		c.op0742,
		c.op0743,
		c.op0744,
		c.op0745,
		c.op0746,
		c.op0747,
		c.op0748,
		c.op0749,
		c.op074A,
		c.op074B,
		c.op074C,
		c.op074D,
		c.op074E,
		c.op074F,
		c.op0750,
		c.op0751,
		c.op0752,
		c.op0753,
		c.op0754,
		c.op0755,
		c.op0756,
		c.op0757,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0778,
		c.op0779,
		nil,
		nil,
		c.op077C,
		nil,
		nil,
		nil,
		c.op0780,
		c.op0781,
		c.op0782,
		c.op0783,
		c.op0784,
		c.op0785,
		c.op0786,
		c.op0787,
		c.op0788,
		c.op0789,
		c.op078A,
		c.op078B,
		c.op078C,
		c.op078D,
		c.op078E,
		c.op078F,
		c.op0790,
		c.op0791,
		c.op0792,
		c.op0793,
		c.op0794,
		c.op0795,
		c.op0796,
		c.op0797,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op07B8,
		c.op07B9,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op083C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op087C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op093C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op097C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0A3C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0A7C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0B3C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0B7C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0C3C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0C7C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0D3C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0D7C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0E3C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0E7C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0F3C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op0F7C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1000,
		c.op1001,
		c.op1002,
		c.op1003,
		c.op1004,
		c.op1005,
		c.op1006,
		c.op1007,
		c.op1008,
		c.op1009,
		c.op100A,
		c.op100B,
		c.op100C,
		c.op100D,
		c.op100E,
		c.op100F,
		c.op1010,
		c.op1011,
		c.op1012,
		c.op1013,
		c.op1014,
		c.op1015,
		c.op1016,
		c.op1017,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1038,
		c.op1039,
		nil,
		nil,
		c.op103C,
		nil,
		nil,
		nil,
		c.op1040,
		c.op1041,
		c.op1042,
		c.op1043,
		c.op1044,
		c.op1045,
		c.op1046,
		c.op1047,
		c.op1048,
		c.op1049,
		c.op104A,
		c.op104B,
		c.op104C,
		c.op104D,
		c.op104E,
		c.op104F,
		c.op1050,
		c.op1051,
		c.op1052,
		c.op1053,
		c.op1054,
		c.op1055,
		c.op1056,
		c.op1057,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1078,
		c.op1079,
		nil,
		nil,
		c.op107C,
		nil,
		nil,
		nil,
		c.op1080,
		c.op1081,
		c.op1082,
		c.op1083,
		c.op1084,
		c.op1085,
		c.op1086,
		c.op1087,
		c.op1088,
		c.op1089,
		c.op108A,
		c.op108B,
		c.op108C,
		c.op108D,
		c.op108E,
		c.op108F,
		c.op1090,
		c.op1091,
		c.op1092,
		c.op1093,
		c.op1094,
		c.op1095,
		c.op1096,
		c.op1097,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op10B8,
		c.op10B9,
		nil,
		nil,
		c.op10BC,
		nil,
		nil,
		nil,
		c.op10C0,
		c.op10C1,
		c.op10C2,
		c.op10C3,
		c.op10C4,
		c.op10C5,
		c.op10C6,
		c.op10C7,
		c.op10C8,
		c.op10C9,
		c.op10CA,
		c.op10CB,
		c.op10CC,
		c.op10CD,
		c.op10CE,
		c.op10CF,
		c.op10D0,
		c.op10D1,
		c.op10D2,
		c.op10D3,
		c.op10D4,
		c.op10D5,
		c.op10D6,
		c.op10D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op10F8,
		c.op10F9,
		nil,
		nil,
		c.op10FC,
		nil,
		nil,
		nil,
		c.op1100,
		c.op1101,
		c.op1102,
		c.op1103,
		c.op1104,
		c.op1105,
		c.op1106,
		c.op1107,
		c.op1108,
		c.op1109,
		c.op110A,
		c.op110B,
		c.op110C,
		c.op110D,
		c.op110E,
		c.op110F,
		c.op1110,
		c.op1111,
		c.op1112,
		c.op1113,
		c.op1114,
		c.op1115,
		c.op1116,
		c.op1117,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1138,
		c.op1139,
		nil,
		nil,
		c.op113C,
		nil,
		nil,
		nil,
		c.op1140,
		c.op1141,
		c.op1142,
		c.op1143,
		c.op1144,
		c.op1145,
		c.op1146,
		c.op1147,
		c.op1148,
		c.op1149,
		c.op114A,
		c.op114B,
		c.op114C,
		c.op114D,
		c.op114E,
		c.op114F,
		c.op1150,
		c.op1151,
		c.op1152,
		c.op1153,
		c.op1154,
		c.op1155,
		c.op1156,
		c.op1157,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1178,
		c.op1179,
		nil,
		nil,
		c.op117C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op11C0,
		c.op11C1,
		c.op11C2,
		c.op11C3,
		c.op11C4,
		c.op11C5,
		c.op11C6,
		c.op11C7,
		c.op11C8,
		c.op11C9,
		c.op11CA,
		c.op11CB,
		c.op11CC,
		c.op11CD,
		c.op11CE,
		c.op11CF,
		c.op11D0,
		c.op11D1,
		c.op11D2,
		c.op11D3,
		c.op11D4,
		c.op11D5,
		c.op11D6,
		c.op11D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op11F8,
		c.op11F9,
		nil,
		nil,
		c.op11FC,
		nil,
		nil,
		nil,
		c.op1200,
		c.op1201,
		c.op1202,
		c.op1203,
		c.op1204,
		c.op1205,
		c.op1206,
		c.op1207,
		c.op1208,
		c.op1209,
		c.op120A,
		c.op120B,
		c.op120C,
		c.op120D,
		c.op120E,
		c.op120F,
		c.op1210,
		c.op1211,
		c.op1212,
		c.op1213,
		c.op1214,
		c.op1215,
		c.op1216,
		c.op1217,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1238,
		c.op1239,
		nil,
		nil,
		c.op123C,
		nil,
		nil,
		nil,
		c.op1240,
		c.op1241,
		c.op1242,
		c.op1243,
		c.op1244,
		c.op1245,
		c.op1246,
		c.op1247,
		c.op1248,
		c.op1249,
		c.op124A,
		c.op124B,
		c.op124C,
		c.op124D,
		c.op124E,
		c.op124F,
		c.op1250,
		c.op1251,
		c.op1252,
		c.op1253,
		c.op1254,
		c.op1255,
		c.op1256,
		c.op1257,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1278,
		c.op1279,
		nil,
		nil,
		c.op127C,
		nil,
		nil,
		nil,
		c.op1280,
		c.op1281,
		c.op1282,
		c.op1283,
		c.op1284,
		c.op1285,
		c.op1286,
		c.op1287,
		c.op1288,
		c.op1289,
		c.op128A,
		c.op128B,
		c.op128C,
		c.op128D,
		c.op128E,
		c.op128F,
		c.op1290,
		c.op1291,
		c.op1292,
		c.op1293,
		c.op1294,
		c.op1295,
		c.op1296,
		c.op1297,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op12B8,
		c.op12B9,
		nil,
		nil,
		c.op12BC,
		nil,
		nil,
		nil,
		c.op12C0,
		c.op12C1,
		c.op12C2,
		c.op12C3,
		c.op12C4,
		c.op12C5,
		c.op12C6,
		c.op12C7,
		c.op12C8,
		c.op12C9,
		c.op12CA,
		c.op12CB,
		c.op12CC,
		c.op12CD,
		c.op12CE,
		c.op12CF,
		c.op12D0,
		c.op12D1,
		c.op12D2,
		c.op12D3,
		c.op12D4,
		c.op12D5,
		c.op12D6,
		c.op12D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op12F8,
		c.op12F9,
		nil,
		nil,
		c.op12FC,
		nil,
		nil,
		nil,
		c.op1300,
		c.op1301,
		c.op1302,
		c.op1303,
		c.op1304,
		c.op1305,
		c.op1306,
		c.op1307,
		c.op1308,
		c.op1309,
		c.op130A,
		c.op130B,
		c.op130C,
		c.op130D,
		c.op130E,
		c.op130F,
		c.op1310,
		c.op1311,
		c.op1312,
		c.op1313,
		c.op1314,
		c.op1315,
		c.op1316,
		c.op1317,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1338,
		c.op1339,
		nil,
		nil,
		c.op133C,
		nil,
		nil,
		nil,
		c.op1340,
		c.op1341,
		c.op1342,
		c.op1343,
		c.op1344,
		c.op1345,
		c.op1346,
		c.op1347,
		c.op1348,
		c.op1349,
		c.op134A,
		c.op134B,
		c.op134C,
		c.op134D,
		c.op134E,
		c.op134F,
		c.op1350,
		c.op1351,
		c.op1352,
		c.op1353,
		c.op1354,
		c.op1355,
		c.op1356,
		c.op1357,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1378,
		c.op1379,
		nil,
		nil,
		c.op137C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op13C0,
		c.op13C1,
		c.op13C2,
		c.op13C3,
		c.op13C4,
		c.op13C5,
		c.op13C6,
		c.op13C7,
		c.op13C8,
		c.op13C9,
		c.op13CA,
		c.op13CB,
		c.op13CC,
		c.op13CD,
		c.op13CE,
		c.op13CF,
		c.op13D0,
		c.op13D1,
		c.op13D2,
		c.op13D3,
		c.op13D4,
		c.op13D5,
		c.op13D6,
		c.op13D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op13F8,
		c.op13F9,
		nil,
		nil,
		c.op13FC,
		nil,
		nil,
		nil,
		c.op1400,
		c.op1401,
		c.op1402,
		c.op1403,
		c.op1404,
		c.op1405,
		c.op1406,
		c.op1407,
		c.op1408,
		c.op1409,
		c.op140A,
		c.op140B,
		c.op140C,
		c.op140D,
		c.op140E,
		c.op140F,
		c.op1410,
		c.op1411,
		c.op1412,
		c.op1413,
		c.op1414,
		c.op1415,
		c.op1416,
		c.op1417,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1438,
		c.op1439,
		nil,
		nil,
		c.op143C,
		nil,
		nil,
		nil,
		c.op1440,
		c.op1441,
		c.op1442,
		c.op1443,
		c.op1444,
		c.op1445,
		c.op1446,
		c.op1447,
		c.op1448,
		c.op1449,
		c.op144A,
		c.op144B,
		c.op144C,
		c.op144D,
		c.op144E,
		c.op144F,
		c.op1450,
		c.op1451,
		c.op1452,
		c.op1453,
		c.op1454,
		c.op1455,
		c.op1456,
		c.op1457,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1478,
		c.op1479,
		nil,
		nil,
		c.op147C,
		nil,
		nil,
		nil,
		c.op1480,
		c.op1481,
		c.op1482,
		c.op1483,
		c.op1484,
		c.op1485,
		c.op1486,
		c.op1487,
		c.op1488,
		c.op1489,
		c.op148A,
		c.op148B,
		c.op148C,
		c.op148D,
		c.op148E,
		c.op148F,
		c.op1490,
		c.op1491,
		c.op1492,
		c.op1493,
		c.op1494,
		c.op1495,
		c.op1496,
		c.op1497,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op14B8,
		c.op14B9,
		nil,
		nil,
		c.op14BC,
		nil,
		nil,
		nil,
		c.op14C0,
		c.op14C1,
		c.op14C2,
		c.op14C3,
		c.op14C4,
		c.op14C5,
		c.op14C6,
		c.op14C7,
		c.op14C8,
		c.op14C9,
		c.op14CA,
		c.op14CB,
		c.op14CC,
		c.op14CD,
		c.op14CE,
		c.op14CF,
		c.op14D0,
		c.op14D1,
		c.op14D2,
		c.op14D3,
		c.op14D4,
		c.op14D5,
		c.op14D6,
		c.op14D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op14F8,
		c.op14F9,
		nil,
		nil,
		c.op14FC,
		nil,
		nil,
		nil,
		c.op1500,
		c.op1501,
		c.op1502,
		c.op1503,
		c.op1504,
		c.op1505,
		c.op1506,
		c.op1507,
		c.op1508,
		c.op1509,
		c.op150A,
		c.op150B,
		c.op150C,
		c.op150D,
		c.op150E,
		c.op150F,
		c.op1510,
		c.op1511,
		c.op1512,
		c.op1513,
		c.op1514,
		c.op1515,
		c.op1516,
		c.op1517,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1538,
		c.op1539,
		nil,
		nil,
		c.op153C,
		nil,
		nil,
		nil,
		c.op1540,
		c.op1541,
		c.op1542,
		c.op1543,
		c.op1544,
		c.op1545,
		c.op1546,
		c.op1547,
		c.op1548,
		c.op1549,
		c.op154A,
		c.op154B,
		c.op154C,
		c.op154D,
		c.op154E,
		c.op154F,
		c.op1550,
		c.op1551,
		c.op1552,
		c.op1553,
		c.op1554,
		c.op1555,
		c.op1556,
		c.op1557,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1578,
		c.op1579,
		nil,
		nil,
		c.op157C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1600,
		c.op1601,
		c.op1602,
		c.op1603,
		c.op1604,
		c.op1605,
		c.op1606,
		c.op1607,
		c.op1608,
		c.op1609,
		c.op160A,
		c.op160B,
		c.op160C,
		c.op160D,
		c.op160E,
		c.op160F,
		c.op1610,
		c.op1611,
		c.op1612,
		c.op1613,
		c.op1614,
		c.op1615,
		c.op1616,
		c.op1617,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1638,
		c.op1639,
		nil,
		nil,
		c.op163C,
		nil,
		nil,
		nil,
		c.op1640,
		c.op1641,
		c.op1642,
		c.op1643,
		c.op1644,
		c.op1645,
		c.op1646,
		c.op1647,
		c.op1648,
		c.op1649,
		c.op164A,
		c.op164B,
		c.op164C,
		c.op164D,
		c.op164E,
		c.op164F,
		c.op1650,
		c.op1651,
		c.op1652,
		c.op1653,
		c.op1654,
		c.op1655,
		c.op1656,
		c.op1657,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1678,
		c.op1679,
		nil,
		nil,
		c.op167C,
		nil,
		nil,
		nil,
		c.op1680,
		c.op1681,
		c.op1682,
		c.op1683,
		c.op1684,
		c.op1685,
		c.op1686,
		c.op1687,
		c.op1688,
		c.op1689,
		c.op168A,
		c.op168B,
		c.op168C,
		c.op168D,
		c.op168E,
		c.op168F,
		c.op1690,
		c.op1691,
		c.op1692,
		c.op1693,
		c.op1694,
		c.op1695,
		c.op1696,
		c.op1697,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op16B8,
		c.op16B9,
		nil,
		nil,
		c.op16BC,
		nil,
		nil,
		nil,
		c.op16C0,
		c.op16C1,
		c.op16C2,
		c.op16C3,
		c.op16C4,
		c.op16C5,
		c.op16C6,
		c.op16C7,
		c.op16C8,
		c.op16C9,
		c.op16CA,
		c.op16CB,
		c.op16CC,
		c.op16CD,
		c.op16CE,
		c.op16CF,
		c.op16D0,
		c.op16D1,
		c.op16D2,
		c.op16D3,
		c.op16D4,
		c.op16D5,
		c.op16D6,
		c.op16D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op16F8,
		c.op16F9,
		nil,
		nil,
		c.op16FC,
		nil,
		nil,
		nil,
		c.op1700,
		c.op1701,
		c.op1702,
		c.op1703,
		c.op1704,
		c.op1705,
		c.op1706,
		c.op1707,
		c.op1708,
		c.op1709,
		c.op170A,
		c.op170B,
		c.op170C,
		c.op170D,
		c.op170E,
		c.op170F,
		c.op1710,
		c.op1711,
		c.op1712,
		c.op1713,
		c.op1714,
		c.op1715,
		c.op1716,
		c.op1717,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1738,
		c.op1739,
		nil,
		nil,
		c.op173C,
		nil,
		nil,
		nil,
		c.op1740,
		c.op1741,
		c.op1742,
		c.op1743,
		c.op1744,
		c.op1745,
		c.op1746,
		c.op1747,
		c.op1748,
		c.op1749,
		c.op174A,
		c.op174B,
		c.op174C,
		c.op174D,
		c.op174E,
		c.op174F,
		c.op1750,
		c.op1751,
		c.op1752,
		c.op1753,
		c.op1754,
		c.op1755,
		c.op1756,
		c.op1757,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1778,
		c.op1779,
		nil,
		nil,
		c.op177C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1800,
		c.op1801,
		c.op1802,
		c.op1803,
		c.op1804,
		c.op1805,
		c.op1806,
		c.op1807,
		c.op1808,
		c.op1809,
		c.op180A,
		c.op180B,
		c.op180C,
		c.op180D,
		c.op180E,
		c.op180F,
		c.op1810,
		c.op1811,
		c.op1812,
		c.op1813,
		c.op1814,
		c.op1815,
		c.op1816,
		c.op1817,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1838,
		c.op1839,
		nil,
		nil,
		c.op183C,
		nil,
		nil,
		nil,
		c.op1840,
		c.op1841,
		c.op1842,
		c.op1843,
		c.op1844,
		c.op1845,
		c.op1846,
		c.op1847,
		c.op1848,
		c.op1849,
		c.op184A,
		c.op184B,
		c.op184C,
		c.op184D,
		c.op184E,
		c.op184F,
		c.op1850,
		c.op1851,
		c.op1852,
		c.op1853,
		c.op1854,
		c.op1855,
		c.op1856,
		c.op1857,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1878,
		c.op1879,
		nil,
		nil,
		c.op187C,
		nil,
		nil,
		nil,
		c.op1880,
		c.op1881,
		c.op1882,
		c.op1883,
		c.op1884,
		c.op1885,
		c.op1886,
		c.op1887,
		c.op1888,
		c.op1889,
		c.op188A,
		c.op188B,
		c.op188C,
		c.op188D,
		c.op188E,
		c.op188F,
		c.op1890,
		c.op1891,
		c.op1892,
		c.op1893,
		c.op1894,
		c.op1895,
		c.op1896,
		c.op1897,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op18B8,
		c.op18B9,
		nil,
		nil,
		c.op18BC,
		nil,
		nil,
		nil,
		c.op18C0,
		c.op18C1,
		c.op18C2,
		c.op18C3,
		c.op18C4,
		c.op18C5,
		c.op18C6,
		c.op18C7,
		c.op18C8,
		c.op18C9,
		c.op18CA,
		c.op18CB,
		c.op18CC,
		c.op18CD,
		c.op18CE,
		c.op18CF,
		c.op18D0,
		c.op18D1,
		c.op18D2,
		c.op18D3,
		c.op18D4,
		c.op18D5,
		c.op18D6,
		c.op18D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op18F8,
		c.op18F9,
		nil,
		nil,
		c.op18FC,
		nil,
		nil,
		nil,
		c.op1900,
		c.op1901,
		c.op1902,
		c.op1903,
		c.op1904,
		c.op1905,
		c.op1906,
		c.op1907,
		c.op1908,
		c.op1909,
		c.op190A,
		c.op190B,
		c.op190C,
		c.op190D,
		c.op190E,
		c.op190F,
		c.op1910,
		c.op1911,
		c.op1912,
		c.op1913,
		c.op1914,
		c.op1915,
		c.op1916,
		c.op1917,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1938,
		c.op1939,
		nil,
		nil,
		c.op193C,
		nil,
		nil,
		nil,
		c.op1940,
		c.op1941,
		c.op1942,
		c.op1943,
		c.op1944,
		c.op1945,
		c.op1946,
		c.op1947,
		c.op1948,
		c.op1949,
		c.op194A,
		c.op194B,
		c.op194C,
		c.op194D,
		c.op194E,
		c.op194F,
		c.op1950,
		c.op1951,
		c.op1952,
		c.op1953,
		c.op1954,
		c.op1955,
		c.op1956,
		c.op1957,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1978,
		c.op1979,
		nil,
		nil,
		c.op197C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1A00,
		c.op1A01,
		c.op1A02,
		c.op1A03,
		c.op1A04,
		c.op1A05,
		c.op1A06,
		c.op1A07,
		c.op1A08,
		c.op1A09,
		c.op1A0A,
		c.op1A0B,
		c.op1A0C,
		c.op1A0D,
		c.op1A0E,
		c.op1A0F,
		c.op1A10,
		c.op1A11,
		c.op1A12,
		c.op1A13,
		c.op1A14,
		c.op1A15,
		c.op1A16,
		c.op1A17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1A38,
		c.op1A39,
		nil,
		nil,
		c.op1A3C,
		nil,
		nil,
		nil,
		c.op1A40,
		c.op1A41,
		c.op1A42,
		c.op1A43,
		c.op1A44,
		c.op1A45,
		c.op1A46,
		c.op1A47,
		c.op1A48,
		c.op1A49,
		c.op1A4A,
		c.op1A4B,
		c.op1A4C,
		c.op1A4D,
		c.op1A4E,
		c.op1A4F,
		c.op1A50,
		c.op1A51,
		c.op1A52,
		c.op1A53,
		c.op1A54,
		c.op1A55,
		c.op1A56,
		c.op1A57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1A78,
		c.op1A79,
		nil,
		nil,
		c.op1A7C,
		nil,
		nil,
		nil,
		c.op1A80,
		c.op1A81,
		c.op1A82,
		c.op1A83,
		c.op1A84,
		c.op1A85,
		c.op1A86,
		c.op1A87,
		c.op1A88,
		c.op1A89,
		c.op1A8A,
		c.op1A8B,
		c.op1A8C,
		c.op1A8D,
		c.op1A8E,
		c.op1A8F,
		c.op1A90,
		c.op1A91,
		c.op1A92,
		c.op1A93,
		c.op1A94,
		c.op1A95,
		c.op1A96,
		c.op1A97,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1AB8,
		c.op1AB9,
		nil,
		nil,
		c.op1ABC,
		nil,
		nil,
		nil,
		c.op1AC0,
		c.op1AC1,
		c.op1AC2,
		c.op1AC3,
		c.op1AC4,
		c.op1AC5,
		c.op1AC6,
		c.op1AC7,
		c.op1AC8,
		c.op1AC9,
		c.op1ACA,
		c.op1ACB,
		c.op1ACC,
		c.op1ACD,
		c.op1ACE,
		c.op1ACF,
		c.op1AD0,
		c.op1AD1,
		c.op1AD2,
		c.op1AD3,
		c.op1AD4,
		c.op1AD5,
		c.op1AD6,
		c.op1AD7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1AF8,
		c.op1AF9,
		nil,
		nil,
		c.op1AFC,
		nil,
		nil,
		nil,
		c.op1B00,
		c.op1B01,
		c.op1B02,
		c.op1B03,
		c.op1B04,
		c.op1B05,
		c.op1B06,
		c.op1B07,
		c.op1B08,
		c.op1B09,
		c.op1B0A,
		c.op1B0B,
		c.op1B0C,
		c.op1B0D,
		c.op1B0E,
		c.op1B0F,
		c.op1B10,
		c.op1B11,
		c.op1B12,
		c.op1B13,
		c.op1B14,
		c.op1B15,
		c.op1B16,
		c.op1B17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1B38,
		c.op1B39,
		nil,
		nil,
		c.op1B3C,
		nil,
		nil,
		nil,
		c.op1B40,
		c.op1B41,
		c.op1B42,
		c.op1B43,
		c.op1B44,
		c.op1B45,
		c.op1B46,
		c.op1B47,
		c.op1B48,
		c.op1B49,
		c.op1B4A,
		c.op1B4B,
		c.op1B4C,
		c.op1B4D,
		c.op1B4E,
		c.op1B4F,
		c.op1B50,
		c.op1B51,
		c.op1B52,
		c.op1B53,
		c.op1B54,
		c.op1B55,
		c.op1B56,
		c.op1B57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1B78,
		c.op1B79,
		nil,
		nil,
		c.op1B7C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1C00,
		c.op1C01,
		c.op1C02,
		c.op1C03,
		c.op1C04,
		c.op1C05,
		c.op1C06,
		c.op1C07,
		c.op1C08,
		c.op1C09,
		c.op1C0A,
		c.op1C0B,
		c.op1C0C,
		c.op1C0D,
		c.op1C0E,
		c.op1C0F,
		c.op1C10,
		c.op1C11,
		c.op1C12,
		c.op1C13,
		c.op1C14,
		c.op1C15,
		c.op1C16,
		c.op1C17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1C38,
		c.op1C39,
		nil,
		nil,
		c.op1C3C,
		nil,
		nil,
		nil,
		c.op1C40,
		c.op1C41,
		c.op1C42,
		c.op1C43,
		c.op1C44,
		c.op1C45,
		c.op1C46,
		c.op1C47,
		c.op1C48,
		c.op1C49,
		c.op1C4A,
		c.op1C4B,
		c.op1C4C,
		c.op1C4D,
		c.op1C4E,
		c.op1C4F,
		c.op1C50,
		c.op1C51,
		c.op1C52,
		c.op1C53,
		c.op1C54,
		c.op1C55,
		c.op1C56,
		c.op1C57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1C78,
		c.op1C79,
		nil,
		nil,
		c.op1C7C,
		nil,
		nil,
		nil,
		c.op1C80,
		c.op1C81,
		c.op1C82,
		c.op1C83,
		c.op1C84,
		c.op1C85,
		c.op1C86,
		c.op1C87,
		c.op1C88,
		c.op1C89,
		c.op1C8A,
		c.op1C8B,
		c.op1C8C,
		c.op1C8D,
		c.op1C8E,
		c.op1C8F,
		c.op1C90,
		c.op1C91,
		c.op1C92,
		c.op1C93,
		c.op1C94,
		c.op1C95,
		c.op1C96,
		c.op1C97,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1CB8,
		c.op1CB9,
		nil,
		nil,
		c.op1CBC,
		nil,
		nil,
		nil,
		c.op1CC0,
		c.op1CC1,
		c.op1CC2,
		c.op1CC3,
		c.op1CC4,
		c.op1CC5,
		c.op1CC6,
		c.op1CC7,
		c.op1CC8,
		c.op1CC9,
		c.op1CCA,
		c.op1CCB,
		c.op1CCC,
		c.op1CCD,
		c.op1CCE,
		c.op1CCF,
		c.op1CD0,
		c.op1CD1,
		c.op1CD2,
		c.op1CD3,
		c.op1CD4,
		c.op1CD5,
		c.op1CD6,
		c.op1CD7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1CF8,
		c.op1CF9,
		nil,
		nil,
		c.op1CFC,
		nil,
		nil,
		nil,
		c.op1D00,
		c.op1D01,
		c.op1D02,
		c.op1D03,
		c.op1D04,
		c.op1D05,
		c.op1D06,
		c.op1D07,
		c.op1D08,
		c.op1D09,
		c.op1D0A,
		c.op1D0B,
		c.op1D0C,
		c.op1D0D,
		c.op1D0E,
		c.op1D0F,
		c.op1D10,
		c.op1D11,
		c.op1D12,
		c.op1D13,
		c.op1D14,
		c.op1D15,
		c.op1D16,
		c.op1D17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1D38,
		c.op1D39,
		nil,
		nil,
		c.op1D3C,
		nil,
		nil,
		nil,
		c.op1D40,
		c.op1D41,
		c.op1D42,
		c.op1D43,
		c.op1D44,
		c.op1D45,
		c.op1D46,
		c.op1D47,
		c.op1D48,
		c.op1D49,
		c.op1D4A,
		c.op1D4B,
		c.op1D4C,
		c.op1D4D,
		c.op1D4E,
		c.op1D4F,
		c.op1D50,
		c.op1D51,
		c.op1D52,
		c.op1D53,
		c.op1D54,
		c.op1D55,
		c.op1D56,
		c.op1D57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1D78,
		c.op1D79,
		nil,
		nil,
		c.op1D7C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1E00,
		c.op1E01,
		c.op1E02,
		c.op1E03,
		c.op1E04,
		c.op1E05,
		c.op1E06,
		c.op1E07,
		c.op1E08,
		c.op1E09,
		c.op1E0A,
		c.op1E0B,
		c.op1E0C,
		c.op1E0D,
		c.op1E0E,
		c.op1E0F,
		c.op1E10,
		c.op1E11,
		c.op1E12,
		c.op1E13,
		c.op1E14,
		c.op1E15,
		c.op1E16,
		c.op1E17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1E38,
		c.op1E39,
		nil,
		nil,
		c.op1E3C,
		nil,
		nil,
		nil,
		c.op1E40,
		c.op1E41,
		c.op1E42,
		c.op1E43,
		c.op1E44,
		c.op1E45,
		c.op1E46,
		c.op1E47,
		c.op1E48,
		c.op1E49,
		c.op1E4A,
		c.op1E4B,
		c.op1E4C,
		c.op1E4D,
		c.op1E4E,
		c.op1E4F,
		c.op1E50,
		c.op1E51,
		c.op1E52,
		c.op1E53,
		c.op1E54,
		c.op1E55,
		c.op1E56,
		c.op1E57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1E78,
		c.op1E79,
		nil,
		nil,
		c.op1E7C,
		nil,
		nil,
		nil,
		c.op1E80,
		c.op1E81,
		c.op1E82,
		c.op1E83,
		c.op1E84,
		c.op1E85,
		c.op1E86,
		c.op1E87,
		c.op1E88,
		c.op1E89,
		c.op1E8A,
		c.op1E8B,
		c.op1E8C,
		c.op1E8D,
		c.op1E8E,
		c.op1E8F,
		c.op1E90,
		c.op1E91,
		c.op1E92,
		c.op1E93,
		c.op1E94,
		c.op1E95,
		c.op1E96,
		c.op1E97,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1EB8,
		c.op1EB9,
		nil,
		nil,
		c.op1EBC,
		nil,
		nil,
		nil,
		c.op1EC0,
		c.op1EC1,
		c.op1EC2,
		c.op1EC3,
		c.op1EC4,
		c.op1EC5,
		c.op1EC6,
		c.op1EC7,
		c.op1EC8,
		c.op1EC9,
		c.op1ECA,
		c.op1ECB,
		c.op1ECC,
		c.op1ECD,
		c.op1ECE,
		c.op1ECF,
		c.op1ED0,
		c.op1ED1,
		c.op1ED2,
		c.op1ED3,
		c.op1ED4,
		c.op1ED5,
		c.op1ED6,
		c.op1ED7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1EF8,
		c.op1EF9,
		nil,
		nil,
		c.op1EFC,
		nil,
		nil,
		nil,
		c.op1F00,
		c.op1F01,
		c.op1F02,
		c.op1F03,
		c.op1F04,
		c.op1F05,
		c.op1F06,
		c.op1F07,
		c.op1F08,
		c.op1F09,
		c.op1F0A,
		c.op1F0B,
		c.op1F0C,
		c.op1F0D,
		c.op1F0E,
		c.op1F0F,
		c.op1F10,
		c.op1F11,
		c.op1F12,
		c.op1F13,
		c.op1F14,
		c.op1F15,
		c.op1F16,
		c.op1F17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1F38,
		c.op1F39,
		nil,
		nil,
		c.op1F3C,
		nil,
		nil,
		nil,
		c.op1F40,
		c.op1F41,
		c.op1F42,
		c.op1F43,
		c.op1F44,
		c.op1F45,
		c.op1F46,
		c.op1F47,
		c.op1F48,
		c.op1F49,
		c.op1F4A,
		c.op1F4B,
		c.op1F4C,
		c.op1F4D,
		c.op1F4E,
		c.op1F4F,
		c.op1F50,
		c.op1F51,
		c.op1F52,
		c.op1F53,
		c.op1F54,
		c.op1F55,
		c.op1F56,
		c.op1F57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op1F78,
		c.op1F79,
		nil,
		nil,
		c.op1F7C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2000,
		c.op2001,
		c.op2002,
		c.op2003,
		c.op2004,
		c.op2005,
		c.op2006,
		c.op2007,
		c.op2008,
		c.op2009,
		c.op200A,
		c.op200B,
		c.op200C,
		c.op200D,
		c.op200E,
		c.op200F,
		c.op2010,
		c.op2011,
		c.op2012,
		c.op2013,
		c.op2014,
		c.op2015,
		c.op2016,
		c.op2017,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2038,
		c.op2039,
		nil,
		nil,
		c.op203C,
		nil,
		nil,
		nil,
		c.op2040,
		c.op2041,
		c.op2042,
		c.op2043,
		c.op2044,
		c.op2045,
		c.op2046,
		c.op2047,
		c.op2048,
		c.op2049,
		c.op204A,
		c.op204B,
		c.op204C,
		c.op204D,
		c.op204E,
		c.op204F,
		c.op2050,
		c.op2051,
		c.op2052,
		c.op2053,
		c.op2054,
		c.op2055,
		c.op2056,
		c.op2057,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2078,
		c.op2079,
		nil,
		nil,
		c.op207C,
		nil,
		nil,
		nil,
		c.op2080,
		c.op2081,
		c.op2082,
		c.op2083,
		c.op2084,
		c.op2085,
		c.op2086,
		c.op2087,
		c.op2088,
		c.op2089,
		c.op208A,
		c.op208B,
		c.op208C,
		c.op208D,
		c.op208E,
		c.op208F,
		c.op2090,
		c.op2091,
		c.op2092,
		c.op2093,
		c.op2094,
		c.op2095,
		c.op2096,
		c.op2097,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op20B8,
		c.op20B9,
		nil,
		nil,
		c.op20BC,
		nil,
		nil,
		nil,
		c.op20C0,
		c.op20C1,
		c.op20C2,
		c.op20C3,
		c.op20C4,
		c.op20C5,
		c.op20C6,
		c.op20C7,
		c.op20C8,
		c.op20C9,
		c.op20CA,
		c.op20CB,
		c.op20CC,
		c.op20CD,
		c.op20CE,
		c.op20CF,
		c.op20D0,
		c.op20D1,
		c.op20D2,
		c.op20D3,
		c.op20D4,
		c.op20D5,
		c.op20D6,
		c.op20D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op20F8,
		c.op20F9,
		nil,
		nil,
		c.op20FC,
		nil,
		nil,
		nil,
		c.op2100,
		c.op2101,
		c.op2102,
		c.op2103,
		c.op2104,
		c.op2105,
		c.op2106,
		c.op2107,
		c.op2108,
		c.op2109,
		c.op210A,
		c.op210B,
		c.op210C,
		c.op210D,
		c.op210E,
		c.op210F,
		c.op2110,
		c.op2111,
		c.op2112,
		c.op2113,
		c.op2114,
		c.op2115,
		c.op2116,
		c.op2117,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2138,
		c.op2139,
		nil,
		nil,
		c.op213C,
		nil,
		nil,
		nil,
		c.op2140,
		c.op2141,
		c.op2142,
		c.op2143,
		c.op2144,
		c.op2145,
		c.op2146,
		c.op2147,
		c.op2148,
		c.op2149,
		c.op214A,
		c.op214B,
		c.op214C,
		c.op214D,
		c.op214E,
		c.op214F,
		c.op2150,
		c.op2151,
		c.op2152,
		c.op2153,
		c.op2154,
		c.op2155,
		c.op2156,
		c.op2157,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2178,
		c.op2179,
		nil,
		nil,
		c.op217C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op21C0,
		c.op21C1,
		c.op21C2,
		c.op21C3,
		c.op21C4,
		c.op21C5,
		c.op21C6,
		c.op21C7,
		c.op21C8,
		c.op21C9,
		c.op21CA,
		c.op21CB,
		c.op21CC,
		c.op21CD,
		c.op21CE,
		c.op21CF,
		c.op21D0,
		c.op21D1,
		c.op21D2,
		c.op21D3,
		c.op21D4,
		c.op21D5,
		c.op21D6,
		c.op21D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op21F8,
		c.op21F9,
		nil,
		nil,
		c.op21FC,
		nil,
		nil,
		nil,
		c.op2200,
		c.op2201,
		c.op2202,
		c.op2203,
		c.op2204,
		c.op2205,
		c.op2206,
		c.op2207,
		c.op2208,
		c.op2209,
		c.op220A,
		c.op220B,
		c.op220C,
		c.op220D,
		c.op220E,
		c.op220F,
		c.op2210,
		c.op2211,
		c.op2212,
		c.op2213,
		c.op2214,
		c.op2215,
		c.op2216,
		c.op2217,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2238,
		c.op2239,
		nil,
		nil,
		c.op223C,
		nil,
		nil,
		nil,
		c.op2240,
		c.op2241,
		c.op2242,
		c.op2243,
		c.op2244,
		c.op2245,
		c.op2246,
		c.op2247,
		c.op2248,
		c.op2249,
		c.op224A,
		c.op224B,
		c.op224C,
		c.op224D,
		c.op224E,
		c.op224F,
		c.op2250,
		c.op2251,
		c.op2252,
		c.op2253,
		c.op2254,
		c.op2255,
		c.op2256,
		c.op2257,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2278,
		c.op2279,
		nil,
		nil,
		c.op227C,
		nil,
		nil,
		nil,
		c.op2280,
		c.op2281,
		c.op2282,
		c.op2283,
		c.op2284,
		c.op2285,
		c.op2286,
		c.op2287,
		c.op2288,
		c.op2289,
		c.op228A,
		c.op228B,
		c.op228C,
		c.op228D,
		c.op228E,
		c.op228F,
		c.op2290,
		c.op2291,
		c.op2292,
		c.op2293,
		c.op2294,
		c.op2295,
		c.op2296,
		c.op2297,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op22B8,
		c.op22B9,
		nil,
		nil,
		c.op22BC,
		nil,
		nil,
		nil,
		c.op22C0,
		c.op22C1,
		c.op22C2,
		c.op22C3,
		c.op22C4,
		c.op22C5,
		c.op22C6,
		c.op22C7,
		c.op22C8,
		c.op22C9,
		c.op22CA,
		c.op22CB,
		c.op22CC,
		c.op22CD,
		c.op22CE,
		c.op22CF,
		c.op22D0,
		c.op22D1,
		c.op22D2,
		c.op22D3,
		c.op22D4,
		c.op22D5,
		c.op22D6,
		c.op22D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op22F8,
		c.op22F9,
		nil,
		nil,
		c.op22FC,
		nil,
		nil,
		nil,
		c.op2300,
		c.op2301,
		c.op2302,
		c.op2303,
		c.op2304,
		c.op2305,
		c.op2306,
		c.op2307,
		c.op2308,
		c.op2309,
		c.op230A,
		c.op230B,
		c.op230C,
		c.op230D,
		c.op230E,
		c.op230F,
		c.op2310,
		c.op2311,
		c.op2312,
		c.op2313,
		c.op2314,
		c.op2315,
		c.op2316,
		c.op2317,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2338,
		c.op2339,
		nil,
		nil,
		c.op233C,
		nil,
		nil,
		nil,
		c.op2340,
		c.op2341,
		c.op2342,
		c.op2343,
		c.op2344,
		c.op2345,
		c.op2346,
		c.op2347,
		c.op2348,
		c.op2349,
		c.op234A,
		c.op234B,
		c.op234C,
		c.op234D,
		c.op234E,
		c.op234F,
		c.op2350,
		c.op2351,
		c.op2352,
		c.op2353,
		c.op2354,
		c.op2355,
		c.op2356,
		c.op2357,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2378,
		c.op2379,
		nil,
		nil,
		c.op237C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op23C0,
		c.op23C1,
		c.op23C2,
		c.op23C3,
		c.op23C4,
		c.op23C5,
		c.op23C6,
		c.op23C7,
		c.op23C8,
		c.op23C9,
		c.op23CA,
		c.op23CB,
		c.op23CC,
		c.op23CD,
		c.op23CE,
		c.op23CF,
		c.op23D0,
		c.op23D1,
		c.op23D2,
		c.op23D3,
		c.op23D4,
		c.op23D5,
		c.op23D6,
		c.op23D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op23F8,
		c.op23F9,
		nil,
		nil,
		c.op23FC,
		nil,
		nil,
		nil,
		c.op2400,
		c.op2401,
		c.op2402,
		c.op2403,
		c.op2404,
		c.op2405,
		c.op2406,
		c.op2407,
		c.op2408,
		c.op2409,
		c.op240A,
		c.op240B,
		c.op240C,
		c.op240D,
		c.op240E,
		c.op240F,
		c.op2410,
		c.op2411,
		c.op2412,
		c.op2413,
		c.op2414,
		c.op2415,
		c.op2416,
		c.op2417,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2438,
		c.op2439,
		nil,
		nil,
		c.op243C,
		nil,
		nil,
		nil,
		c.op2440,
		c.op2441,
		c.op2442,
		c.op2443,
		c.op2444,
		c.op2445,
		c.op2446,
		c.op2447,
		c.op2448,
		c.op2449,
		c.op244A,
		c.op244B,
		c.op244C,
		c.op244D,
		c.op244E,
		c.op244F,
		c.op2450,
		c.op2451,
		c.op2452,
		c.op2453,
		c.op2454,
		c.op2455,
		c.op2456,
		c.op2457,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2478,
		c.op2479,
		nil,
		nil,
		c.op247C,
		nil,
		nil,
		nil,
		c.op2480,
		c.op2481,
		c.op2482,
		c.op2483,
		c.op2484,
		c.op2485,
		c.op2486,
		c.op2487,
		c.op2488,
		c.op2489,
		c.op248A,
		c.op248B,
		c.op248C,
		c.op248D,
		c.op248E,
		c.op248F,
		c.op2490,
		c.op2491,
		c.op2492,
		c.op2493,
		c.op2494,
		c.op2495,
		c.op2496,
		c.op2497,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op24B8,
		c.op24B9,
		nil,
		nil,
		c.op24BC,
		nil,
		nil,
		nil,
		c.op24C0,
		c.op24C1,
		c.op24C2,
		c.op24C3,
		c.op24C4,
		c.op24C5,
		c.op24C6,
		c.op24C7,
		c.op24C8,
		c.op24C9,
		c.op24CA,
		c.op24CB,
		c.op24CC,
		c.op24CD,
		c.op24CE,
		c.op24CF,
		c.op24D0,
		c.op24D1,
		c.op24D2,
		c.op24D3,
		c.op24D4,
		c.op24D5,
		c.op24D6,
		c.op24D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op24F8,
		c.op24F9,
		nil,
		nil,
		c.op24FC,
		nil,
		nil,
		nil,
		c.op2500,
		c.op2501,
		c.op2502,
		c.op2503,
		c.op2504,
		c.op2505,
		c.op2506,
		c.op2507,
		c.op2508,
		c.op2509,
		c.op250A,
		c.op250B,
		c.op250C,
		c.op250D,
		c.op250E,
		c.op250F,
		c.op2510,
		c.op2511,
		c.op2512,
		c.op2513,
		c.op2514,
		c.op2515,
		c.op2516,
		c.op2517,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2538,
		c.op2539,
		nil,
		nil,
		c.op253C,
		nil,
		nil,
		nil,
		c.op2540,
		c.op2541,
		c.op2542,
		c.op2543,
		c.op2544,
		c.op2545,
		c.op2546,
		c.op2547,
		c.op2548,
		c.op2549,
		c.op254A,
		c.op254B,
		c.op254C,
		c.op254D,
		c.op254E,
		c.op254F,
		c.op2550,
		c.op2551,
		c.op2552,
		c.op2553,
		c.op2554,
		c.op2555,
		c.op2556,
		c.op2557,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2578,
		c.op2579,
		nil,
		nil,
		c.op257C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2600,
		c.op2601,
		c.op2602,
		c.op2603,
		c.op2604,
		c.op2605,
		c.op2606,
		c.op2607,
		c.op2608,
		c.op2609,
		c.op260A,
		c.op260B,
		c.op260C,
		c.op260D,
		c.op260E,
		c.op260F,
		c.op2610,
		c.op2611,
		c.op2612,
		c.op2613,
		c.op2614,
		c.op2615,
		c.op2616,
		c.op2617,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2638,
		c.op2639,
		nil,
		nil,
		c.op263C,
		nil,
		nil,
		nil,
		c.op2640,
		c.op2641,
		c.op2642,
		c.op2643,
		c.op2644,
		c.op2645,
		c.op2646,
		c.op2647,
		c.op2648,
		c.op2649,
		c.op264A,
		c.op264B,
		c.op264C,
		c.op264D,
		c.op264E,
		c.op264F,
		c.op2650,
		c.op2651,
		c.op2652,
		c.op2653,
		c.op2654,
		c.op2655,
		c.op2656,
		c.op2657,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2678,
		c.op2679,
		nil,
		nil,
		c.op267C,
		nil,
		nil,
		nil,
		c.op2680,
		c.op2681,
		c.op2682,
		c.op2683,
		c.op2684,
		c.op2685,
		c.op2686,
		c.op2687,
		c.op2688,
		c.op2689,
		c.op268A,
		c.op268B,
		c.op268C,
		c.op268D,
		c.op268E,
		c.op268F,
		c.op2690,
		c.op2691,
		c.op2692,
		c.op2693,
		c.op2694,
		c.op2695,
		c.op2696,
		c.op2697,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op26B8,
		c.op26B9,
		nil,
		nil,
		c.op26BC,
		nil,
		nil,
		nil,
		c.op26C0,
		c.op26C1,
		c.op26C2,
		c.op26C3,
		c.op26C4,
		c.op26C5,
		c.op26C6,
		c.op26C7,
		c.op26C8,
		c.op26C9,
		c.op26CA,
		c.op26CB,
		c.op26CC,
		c.op26CD,
		c.op26CE,
		c.op26CF,
		c.op26D0,
		c.op26D1,
		c.op26D2,
		c.op26D3,
		c.op26D4,
		c.op26D5,
		c.op26D6,
		c.op26D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op26F8,
		c.op26F9,
		nil,
		nil,
		c.op26FC,
		nil,
		nil,
		nil,
		c.op2700,
		c.op2701,
		c.op2702,
		c.op2703,
		c.op2704,
		c.op2705,
		c.op2706,
		c.op2707,
		c.op2708,
		c.op2709,
		c.op270A,
		c.op270B,
		c.op270C,
		c.op270D,
		c.op270E,
		c.op270F,
		c.op2710,
		c.op2711,
		c.op2712,
		c.op2713,
		c.op2714,
		c.op2715,
		c.op2716,
		c.op2717,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2738,
		c.op2739,
		nil,
		nil,
		c.op273C,
		nil,
		nil,
		nil,
		c.op2740,
		c.op2741,
		c.op2742,
		c.op2743,
		c.op2744,
		c.op2745,
		c.op2746,
		c.op2747,
		c.op2748,
		c.op2749,
		c.op274A,
		c.op274B,
		c.op274C,
		c.op274D,
		c.op274E,
		c.op274F,
		c.op2750,
		c.op2751,
		c.op2752,
		c.op2753,
		c.op2754,
		c.op2755,
		c.op2756,
		c.op2757,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2778,
		c.op2779,
		nil,
		nil,
		c.op277C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2800,
		c.op2801,
		c.op2802,
		c.op2803,
		c.op2804,
		c.op2805,
		c.op2806,
		c.op2807,
		c.op2808,
		c.op2809,
		c.op280A,
		c.op280B,
		c.op280C,
		c.op280D,
		c.op280E,
		c.op280F,
		c.op2810,
		c.op2811,
		c.op2812,
		c.op2813,
		c.op2814,
		c.op2815,
		c.op2816,
		c.op2817,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2838,
		c.op2839,
		nil,
		nil,
		c.op283C,
		nil,
		nil,
		nil,
		c.op2840,
		c.op2841,
		c.op2842,
		c.op2843,
		c.op2844,
		c.op2845,
		c.op2846,
		c.op2847,
		c.op2848,
		c.op2849,
		c.op284A,
		c.op284B,
		c.op284C,
		c.op284D,
		c.op284E,
		c.op284F,
		c.op2850,
		c.op2851,
		c.op2852,
		c.op2853,
		c.op2854,
		c.op2855,
		c.op2856,
		c.op2857,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2878,
		c.op2879,
		nil,
		nil,
		c.op287C,
		nil,
		nil,
		nil,
		c.op2880,
		c.op2881,
		c.op2882,
		c.op2883,
		c.op2884,
		c.op2885,
		c.op2886,
		c.op2887,
		c.op2888,
		c.op2889,
		c.op288A,
		c.op288B,
		c.op288C,
		c.op288D,
		c.op288E,
		c.op288F,
		c.op2890,
		c.op2891,
		c.op2892,
		c.op2893,
		c.op2894,
		c.op2895,
		c.op2896,
		c.op2897,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op28B8,
		c.op28B9,
		nil,
		nil,
		c.op28BC,
		nil,
		nil,
		nil,
		c.op28C0,
		c.op28C1,
		c.op28C2,
		c.op28C3,
		c.op28C4,
		c.op28C5,
		c.op28C6,
		c.op28C7,
		c.op28C8,
		c.op28C9,
		c.op28CA,
		c.op28CB,
		c.op28CC,
		c.op28CD,
		c.op28CE,
		c.op28CF,
		c.op28D0,
		c.op28D1,
		c.op28D2,
		c.op28D3,
		c.op28D4,
		c.op28D5,
		c.op28D6,
		c.op28D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op28F8,
		c.op28F9,
		nil,
		nil,
		c.op28FC,
		nil,
		nil,
		nil,
		c.op2900,
		c.op2901,
		c.op2902,
		c.op2903,
		c.op2904,
		c.op2905,
		c.op2906,
		c.op2907,
		c.op2908,
		c.op2909,
		c.op290A,
		c.op290B,
		c.op290C,
		c.op290D,
		c.op290E,
		c.op290F,
		c.op2910,
		c.op2911,
		c.op2912,
		c.op2913,
		c.op2914,
		c.op2915,
		c.op2916,
		c.op2917,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2938,
		c.op2939,
		nil,
		nil,
		c.op293C,
		nil,
		nil,
		nil,
		c.op2940,
		c.op2941,
		c.op2942,
		c.op2943,
		c.op2944,
		c.op2945,
		c.op2946,
		c.op2947,
		c.op2948,
		c.op2949,
		c.op294A,
		c.op294B,
		c.op294C,
		c.op294D,
		c.op294E,
		c.op294F,
		c.op2950,
		c.op2951,
		c.op2952,
		c.op2953,
		c.op2954,
		c.op2955,
		c.op2956,
		c.op2957,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2978,
		c.op2979,
		nil,
		nil,
		c.op297C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2A00,
		c.op2A01,
		c.op2A02,
		c.op2A03,
		c.op2A04,
		c.op2A05,
		c.op2A06,
		c.op2A07,
		c.op2A08,
		c.op2A09,
		c.op2A0A,
		c.op2A0B,
		c.op2A0C,
		c.op2A0D,
		c.op2A0E,
		c.op2A0F,
		c.op2A10,
		c.op2A11,
		c.op2A12,
		c.op2A13,
		c.op2A14,
		c.op2A15,
		c.op2A16,
		c.op2A17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2A38,
		c.op2A39,
		nil,
		nil,
		c.op2A3C,
		nil,
		nil,
		nil,
		c.op2A40,
		c.op2A41,
		c.op2A42,
		c.op2A43,
		c.op2A44,
		c.op2A45,
		c.op2A46,
		c.op2A47,
		c.op2A48,
		c.op2A49,
		c.op2A4A,
		c.op2A4B,
		c.op2A4C,
		c.op2A4D,
		c.op2A4E,
		c.op2A4F,
		c.op2A50,
		c.op2A51,
		c.op2A52,
		c.op2A53,
		c.op2A54,
		c.op2A55,
		c.op2A56,
		c.op2A57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2A78,
		c.op2A79,
		nil,
		nil,
		c.op2A7C,
		nil,
		nil,
		nil,
		c.op2A80,
		c.op2A81,
		c.op2A82,
		c.op2A83,
		c.op2A84,
		c.op2A85,
		c.op2A86,
		c.op2A87,
		c.op2A88,
		c.op2A89,
		c.op2A8A,
		c.op2A8B,
		c.op2A8C,
		c.op2A8D,
		c.op2A8E,
		c.op2A8F,
		c.op2A90,
		c.op2A91,
		c.op2A92,
		c.op2A93,
		c.op2A94,
		c.op2A95,
		c.op2A96,
		c.op2A97,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2AB8,
		c.op2AB9,
		nil,
		nil,
		c.op2ABC,
		nil,
		nil,
		nil,
		c.op2AC0,
		c.op2AC1,
		c.op2AC2,
		c.op2AC3,
		c.op2AC4,
		c.op2AC5,
		c.op2AC6,
		c.op2AC7,
		c.op2AC8,
		c.op2AC9,
		c.op2ACA,
		c.op2ACB,
		c.op2ACC,
		c.op2ACD,
		c.op2ACE,
		c.op2ACF,
		c.op2AD0,
		c.op2AD1,
		c.op2AD2,
		c.op2AD3,
		c.op2AD4,
		c.op2AD5,
		c.op2AD6,
		c.op2AD7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2AF8,
		c.op2AF9,
		nil,
		nil,
		c.op2AFC,
		nil,
		nil,
		nil,
		c.op2B00,
		c.op2B01,
		c.op2B02,
		c.op2B03,
		c.op2B04,
		c.op2B05,
		c.op2B06,
		c.op2B07,
		c.op2B08,
		c.op2B09,
		c.op2B0A,
		c.op2B0B,
		c.op2B0C,
		c.op2B0D,
		c.op2B0E,
		c.op2B0F,
		c.op2B10,
		c.op2B11,
		c.op2B12,
		c.op2B13,
		c.op2B14,
		c.op2B15,
		c.op2B16,
		c.op2B17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2B38,
		c.op2B39,
		nil,
		nil,
		c.op2B3C,
		nil,
		nil,
		nil,
		c.op2B40,
		c.op2B41,
		c.op2B42,
		c.op2B43,
		c.op2B44,
		c.op2B45,
		c.op2B46,
		c.op2B47,
		c.op2B48,
		c.op2B49,
		c.op2B4A,
		c.op2B4B,
		c.op2B4C,
		c.op2B4D,
		c.op2B4E,
		c.op2B4F,
		c.op2B50,
		c.op2B51,
		c.op2B52,
		c.op2B53,
		c.op2B54,
		c.op2B55,
		c.op2B56,
		c.op2B57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2B78,
		c.op2B79,
		nil,
		nil,
		c.op2B7C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2C00,
		c.op2C01,
		c.op2C02,
		c.op2C03,
		c.op2C04,
		c.op2C05,
		c.op2C06,
		c.op2C07,
		c.op2C08,
		c.op2C09,
		c.op2C0A,
		c.op2C0B,
		c.op2C0C,
		c.op2C0D,
		c.op2C0E,
		c.op2C0F,
		c.op2C10,
		c.op2C11,
		c.op2C12,
		c.op2C13,
		c.op2C14,
		c.op2C15,
		c.op2C16,
		c.op2C17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2C38,
		c.op2C39,
		nil,
		nil,
		c.op2C3C,
		nil,
		nil,
		nil,
		c.op2C40,
		c.op2C41,
		c.op2C42,
		c.op2C43,
		c.op2C44,
		c.op2C45,
		c.op2C46,
		c.op2C47,
		c.op2C48,
		c.op2C49,
		c.op2C4A,
		c.op2C4B,
		c.op2C4C,
		c.op2C4D,
		c.op2C4E,
		c.op2C4F,
		c.op2C50,
		c.op2C51,
		c.op2C52,
		c.op2C53,
		c.op2C54,
		c.op2C55,
		c.op2C56,
		c.op2C57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2C78,
		c.op2C79,
		nil,
		nil,
		c.op2C7C,
		nil,
		nil,
		nil,
		c.op2C80,
		c.op2C81,
		c.op2C82,
		c.op2C83,
		c.op2C84,
		c.op2C85,
		c.op2C86,
		c.op2C87,
		c.op2C88,
		c.op2C89,
		c.op2C8A,
		c.op2C8B,
		c.op2C8C,
		c.op2C8D,
		c.op2C8E,
		c.op2C8F,
		c.op2C90,
		c.op2C91,
		c.op2C92,
		c.op2C93,
		c.op2C94,
		c.op2C95,
		c.op2C96,
		c.op2C97,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2CB8,
		c.op2CB9,
		nil,
		nil,
		c.op2CBC,
		nil,
		nil,
		nil,
		c.op2CC0,
		c.op2CC1,
		c.op2CC2,
		c.op2CC3,
		c.op2CC4,
		c.op2CC5,
		c.op2CC6,
		c.op2CC7,
		c.op2CC8,
		c.op2CC9,
		c.op2CCA,
		c.op2CCB,
		c.op2CCC,
		c.op2CCD,
		c.op2CCE,
		c.op2CCF,
		c.op2CD0,
		c.op2CD1,
		c.op2CD2,
		c.op2CD3,
		c.op2CD4,
		c.op2CD5,
		c.op2CD6,
		c.op2CD7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2CF8,
		c.op2CF9,
		nil,
		nil,
		c.op2CFC,
		nil,
		nil,
		nil,
		c.op2D00,
		c.op2D01,
		c.op2D02,
		c.op2D03,
		c.op2D04,
		c.op2D05,
		c.op2D06,
		c.op2D07,
		c.op2D08,
		c.op2D09,
		c.op2D0A,
		c.op2D0B,
		c.op2D0C,
		c.op2D0D,
		c.op2D0E,
		c.op2D0F,
		c.op2D10,
		c.op2D11,
		c.op2D12,
		c.op2D13,
		c.op2D14,
		c.op2D15,
		c.op2D16,
		c.op2D17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2D38,
		c.op2D39,
		nil,
		nil,
		c.op2D3C,
		nil,
		nil,
		nil,
		c.op2D40,
		c.op2D41,
		c.op2D42,
		c.op2D43,
		c.op2D44,
		c.op2D45,
		c.op2D46,
		c.op2D47,
		c.op2D48,
		c.op2D49,
		c.op2D4A,
		c.op2D4B,
		c.op2D4C,
		c.op2D4D,
		c.op2D4E,
		c.op2D4F,
		c.op2D50,
		c.op2D51,
		c.op2D52,
		c.op2D53,
		c.op2D54,
		c.op2D55,
		c.op2D56,
		c.op2D57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2D78,
		c.op2D79,
		nil,
		nil,
		c.op2D7C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2E00,
		c.op2E01,
		c.op2E02,
		c.op2E03,
		c.op2E04,
		c.op2E05,
		c.op2E06,
		c.op2E07,
		c.op2E08,
		c.op2E09,
		c.op2E0A,
		c.op2E0B,
		c.op2E0C,
		c.op2E0D,
		c.op2E0E,
		c.op2E0F,
		c.op2E10,
		c.op2E11,
		c.op2E12,
		c.op2E13,
		c.op2E14,
		c.op2E15,
		c.op2E16,
		c.op2E17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2E38,
		c.op2E39,
		nil,
		nil,
		c.op2E3C,
		nil,
		nil,
		nil,
		c.op2E40,
		c.op2E41,
		c.op2E42,
		c.op2E43,
		c.op2E44,
		c.op2E45,
		c.op2E46,
		c.op2E47,
		c.op2E48,
		c.op2E49,
		c.op2E4A,
		c.op2E4B,
		c.op2E4C,
		c.op2E4D,
		c.op2E4E,
		c.op2E4F,
		c.op2E50,
		c.op2E51,
		c.op2E52,
		c.op2E53,
		c.op2E54,
		c.op2E55,
		c.op2E56,
		c.op2E57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2E78,
		c.op2E79,
		nil,
		nil,
		c.op2E7C,
		nil,
		nil,
		nil,
		c.op2E80,
		c.op2E81,
		c.op2E82,
		c.op2E83,
		c.op2E84,
		c.op2E85,
		c.op2E86,
		c.op2E87,
		c.op2E88,
		c.op2E89,
		c.op2E8A,
		c.op2E8B,
		c.op2E8C,
		c.op2E8D,
		c.op2E8E,
		c.op2E8F,
		c.op2E90,
		c.op2E91,
		c.op2E92,
		c.op2E93,
		c.op2E94,
		c.op2E95,
		c.op2E96,
		c.op2E97,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2EB8,
		c.op2EB9,
		nil,
		nil,
		c.op2EBC,
		nil,
		nil,
		nil,
		c.op2EC0,
		c.op2EC1,
		c.op2EC2,
		c.op2EC3,
		c.op2EC4,
		c.op2EC5,
		c.op2EC6,
		c.op2EC7,
		c.op2EC8,
		c.op2EC9,
		c.op2ECA,
		c.op2ECB,
		c.op2ECC,
		c.op2ECD,
		c.op2ECE,
		c.op2ECF,
		c.op2ED0,
		c.op2ED1,
		c.op2ED2,
		c.op2ED3,
		c.op2ED4,
		c.op2ED5,
		c.op2ED6,
		c.op2ED7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2EF8,
		c.op2EF9,
		nil,
		nil,
		c.op2EFC,
		nil,
		nil,
		nil,
		c.op2F00,
		c.op2F01,
		c.op2F02,
		c.op2F03,
		c.op2F04,
		c.op2F05,
		c.op2F06,
		c.op2F07,
		c.op2F08,
		c.op2F09,
		c.op2F0A,
		c.op2F0B,
		c.op2F0C,
		c.op2F0D,
		c.op2F0E,
		c.op2F0F,
		c.op2F10,
		c.op2F11,
		c.op2F12,
		c.op2F13,
		c.op2F14,
		c.op2F15,
		c.op2F16,
		c.op2F17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2F38,
		c.op2F39,
		nil,
		nil,
		c.op2F3C,
		nil,
		nil,
		nil,
		c.op2F40,
		c.op2F41,
		c.op2F42,
		c.op2F43,
		c.op2F44,
		c.op2F45,
		c.op2F46,
		c.op2F47,
		c.op2F48,
		c.op2F49,
		c.op2F4A,
		c.op2F4B,
		c.op2F4C,
		c.op2F4D,
		c.op2F4E,
		c.op2F4F,
		c.op2F50,
		c.op2F51,
		c.op2F52,
		c.op2F53,
		c.op2F54,
		c.op2F55,
		c.op2F56,
		c.op2F57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op2F78,
		c.op2F79,
		nil,
		nil,
		c.op2F7C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3000,
		c.op3001,
		c.op3002,
		c.op3003,
		c.op3004,
		c.op3005,
		c.op3006,
		c.op3007,
		c.op3008,
		c.op3009,
		c.op300A,
		c.op300B,
		c.op300C,
		c.op300D,
		c.op300E,
		c.op300F,
		c.op3010,
		c.op3011,
		c.op3012,
		c.op3013,
		c.op3014,
		c.op3015,
		c.op3016,
		c.op3017,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3038,
		c.op3039,
		nil,
		nil,
		c.op303C,
		nil,
		nil,
		nil,
		c.op3040,
		c.op3041,
		c.op3042,
		c.op3043,
		c.op3044,
		c.op3045,
		c.op3046,
		c.op3047,
		c.op3048,
		c.op3049,
		c.op304A,
		c.op304B,
		c.op304C,
		c.op304D,
		c.op304E,
		c.op304F,
		c.op3050,
		c.op3051,
		c.op3052,
		c.op3053,
		c.op3054,
		c.op3055,
		c.op3056,
		c.op3057,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3078,
		c.op3079,
		nil,
		nil,
		c.op307C,
		nil,
		nil,
		nil,
		c.op3080,
		c.op3081,
		c.op3082,
		c.op3083,
		c.op3084,
		c.op3085,
		c.op3086,
		c.op3087,
		c.op3088,
		c.op3089,
		c.op308A,
		c.op308B,
		c.op308C,
		c.op308D,
		c.op308E,
		c.op308F,
		c.op3090,
		c.op3091,
		c.op3092,
		c.op3093,
		c.op3094,
		c.op3095,
		c.op3096,
		c.op3097,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op30B8,
		c.op30B9,
		nil,
		nil,
		c.op30BC,
		nil,
		nil,
		nil,
		c.op30C0,
		c.op30C1,
		c.op30C2,
		c.op30C3,
		c.op30C4,
		c.op30C5,
		c.op30C6,
		c.op30C7,
		c.op30C8,
		c.op30C9,
		c.op30CA,
		c.op30CB,
		c.op30CC,
		c.op30CD,
		c.op30CE,
		c.op30CF,
		c.op30D0,
		c.op30D1,
		c.op30D2,
		c.op30D3,
		c.op30D4,
		c.op30D5,
		c.op30D6,
		c.op30D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op30F8,
		c.op30F9,
		nil,
		nil,
		c.op30FC,
		nil,
		nil,
		nil,
		c.op3100,
		c.op3101,
		c.op3102,
		c.op3103,
		c.op3104,
		c.op3105,
		c.op3106,
		c.op3107,
		c.op3108,
		c.op3109,
		c.op310A,
		c.op310B,
		c.op310C,
		c.op310D,
		c.op310E,
		c.op310F,
		c.op3110,
		c.op3111,
		c.op3112,
		c.op3113,
		c.op3114,
		c.op3115,
		c.op3116,
		c.op3117,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3138,
		c.op3139,
		nil,
		nil,
		c.op313C,
		nil,
		nil,
		nil,
		c.op3140,
		c.op3141,
		c.op3142,
		c.op3143,
		c.op3144,
		c.op3145,
		c.op3146,
		c.op3147,
		c.op3148,
		c.op3149,
		c.op314A,
		c.op314B,
		c.op314C,
		c.op314D,
		c.op314E,
		c.op314F,
		c.op3150,
		c.op3151,
		c.op3152,
		c.op3153,
		c.op3154,
		c.op3155,
		c.op3156,
		c.op3157,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3178,
		c.op3179,
		nil,
		nil,
		c.op317C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op31C0,
		c.op31C1,
		c.op31C2,
		c.op31C3,
		c.op31C4,
		c.op31C5,
		c.op31C6,
		c.op31C7,
		c.op31C8,
		c.op31C9,
		c.op31CA,
		c.op31CB,
		c.op31CC,
		c.op31CD,
		c.op31CE,
		c.op31CF,
		c.op31D0,
		c.op31D1,
		c.op31D2,
		c.op31D3,
		c.op31D4,
		c.op31D5,
		c.op31D6,
		c.op31D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op31F8,
		c.op31F9,
		nil,
		nil,
		c.op31FC,
		nil,
		nil,
		nil,
		c.op3200,
		c.op3201,
		c.op3202,
		c.op3203,
		c.op3204,
		c.op3205,
		c.op3206,
		c.op3207,
		c.op3208,
		c.op3209,
		c.op320A,
		c.op320B,
		c.op320C,
		c.op320D,
		c.op320E,
		c.op320F,
		c.op3210,
		c.op3211,
		c.op3212,
		c.op3213,
		c.op3214,
		c.op3215,
		c.op3216,
		c.op3217,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3238,
		c.op3239,
		nil,
		nil,
		c.op323C,
		nil,
		nil,
		nil,
		c.op3240,
		c.op3241,
		c.op3242,
		c.op3243,
		c.op3244,
		c.op3245,
		c.op3246,
		c.op3247,
		c.op3248,
		c.op3249,
		c.op324A,
		c.op324B,
		c.op324C,
		c.op324D,
		c.op324E,
		c.op324F,
		c.op3250,
		c.op3251,
		c.op3252,
		c.op3253,
		c.op3254,
		c.op3255,
		c.op3256,
		c.op3257,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3278,
		c.op3279,
		nil,
		nil,
		c.op327C,
		nil,
		nil,
		nil,
		c.op3280,
		c.op3281,
		c.op3282,
		c.op3283,
		c.op3284,
		c.op3285,
		c.op3286,
		c.op3287,
		c.op3288,
		c.op3289,
		c.op328A,
		c.op328B,
		c.op328C,
		c.op328D,
		c.op328E,
		c.op328F,
		c.op3290,
		c.op3291,
		c.op3292,
		c.op3293,
		c.op3294,
		c.op3295,
		c.op3296,
		c.op3297,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op32B8,
		c.op32B9,
		nil,
		nil,
		c.op32BC,
		nil,
		nil,
		nil,
		c.op32C0,
		c.op32C1,
		c.op32C2,
		c.op32C3,
		c.op32C4,
		c.op32C5,
		c.op32C6,
		c.op32C7,
		c.op32C8,
		c.op32C9,
		c.op32CA,
		c.op32CB,
		c.op32CC,
		c.op32CD,
		c.op32CE,
		c.op32CF,
		c.op32D0,
		c.op32D1,
		c.op32D2,
		c.op32D3,
		c.op32D4,
		c.op32D5,
		c.op32D6,
		c.op32D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op32F8,
		c.op32F9,
		nil,
		nil,
		c.op32FC,
		nil,
		nil,
		nil,
		c.op3300,
		c.op3301,
		c.op3302,
		c.op3303,
		c.op3304,
		c.op3305,
		c.op3306,
		c.op3307,
		c.op3308,
		c.op3309,
		c.op330A,
		c.op330B,
		c.op330C,
		c.op330D,
		c.op330E,
		c.op330F,
		c.op3310,
		c.op3311,
		c.op3312,
		c.op3313,
		c.op3314,
		c.op3315,
		c.op3316,
		c.op3317,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3338,
		c.op3339,
		nil,
		nil,
		c.op333C,
		nil,
		nil,
		nil,
		c.op3340,
		c.op3341,
		c.op3342,
		c.op3343,
		c.op3344,
		c.op3345,
		c.op3346,
		c.op3347,
		c.op3348,
		c.op3349,
		c.op334A,
		c.op334B,
		c.op334C,
		c.op334D,
		c.op334E,
		c.op334F,
		c.op3350,
		c.op3351,
		c.op3352,
		c.op3353,
		c.op3354,
		c.op3355,
		c.op3356,
		c.op3357,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3378,
		c.op3379,
		nil,
		nil,
		c.op337C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op33C0,
		c.op33C1,
		c.op33C2,
		c.op33C3,
		c.op33C4,
		c.op33C5,
		c.op33C6,
		c.op33C7,
		c.op33C8,
		c.op33C9,
		c.op33CA,
		c.op33CB,
		c.op33CC,
		c.op33CD,
		c.op33CE,
		c.op33CF,
		c.op33D0,
		c.op33D1,
		c.op33D2,
		c.op33D3,
		c.op33D4,
		c.op33D5,
		c.op33D6,
		c.op33D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op33F8,
		c.op33F9,
		nil,
		nil,
		c.op33FC,
		nil,
		nil,
		nil,
		c.op3400,
		c.op3401,
		c.op3402,
		c.op3403,
		c.op3404,
		c.op3405,
		c.op3406,
		c.op3407,
		c.op3408,
		c.op3409,
		c.op340A,
		c.op340B,
		c.op340C,
		c.op340D,
		c.op340E,
		c.op340F,
		c.op3410,
		c.op3411,
		c.op3412,
		c.op3413,
		c.op3414,
		c.op3415,
		c.op3416,
		c.op3417,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3438,
		c.op3439,
		nil,
		nil,
		c.op343C,
		nil,
		nil,
		nil,
		c.op3440,
		c.op3441,
		c.op3442,
		c.op3443,
		c.op3444,
		c.op3445,
		c.op3446,
		c.op3447,
		c.op3448,
		c.op3449,
		c.op344A,
		c.op344B,
		c.op344C,
		c.op344D,
		c.op344E,
		c.op344F,
		c.op3450,
		c.op3451,
		c.op3452,
		c.op3453,
		c.op3454,
		c.op3455,
		c.op3456,
		c.op3457,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3478,
		c.op3479,
		nil,
		nil,
		c.op347C,
		nil,
		nil,
		nil,
		c.op3480,
		c.op3481,
		c.op3482,
		c.op3483,
		c.op3484,
		c.op3485,
		c.op3486,
		c.op3487,
		c.op3488,
		c.op3489,
		c.op348A,
		c.op348B,
		c.op348C,
		c.op348D,
		c.op348E,
		c.op348F,
		c.op3490,
		c.op3491,
		c.op3492,
		c.op3493,
		c.op3494,
		c.op3495,
		c.op3496,
		c.op3497,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op34B8,
		c.op34B9,
		nil,
		nil,
		c.op34BC,
		nil,
		nil,
		nil,
		c.op34C0,
		c.op34C1,
		c.op34C2,
		c.op34C3,
		c.op34C4,
		c.op34C5,
		c.op34C6,
		c.op34C7,
		c.op34C8,
		c.op34C9,
		c.op34CA,
		c.op34CB,
		c.op34CC,
		c.op34CD,
		c.op34CE,
		c.op34CF,
		c.op34D0,
		c.op34D1,
		c.op34D2,
		c.op34D3,
		c.op34D4,
		c.op34D5,
		c.op34D6,
		c.op34D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op34F8,
		c.op34F9,
		nil,
		nil,
		c.op34FC,
		nil,
		nil,
		nil,
		c.op3500,
		c.op3501,
		c.op3502,
		c.op3503,
		c.op3504,
		c.op3505,
		c.op3506,
		c.op3507,
		c.op3508,
		c.op3509,
		c.op350A,
		c.op350B,
		c.op350C,
		c.op350D,
		c.op350E,
		c.op350F,
		c.op3510,
		c.op3511,
		c.op3512,
		c.op3513,
		c.op3514,
		c.op3515,
		c.op3516,
		c.op3517,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3538,
		c.op3539,
		nil,
		nil,
		c.op353C,
		nil,
		nil,
		nil,
		c.op3540,
		c.op3541,
		c.op3542,
		c.op3543,
		c.op3544,
		c.op3545,
		c.op3546,
		c.op3547,
		c.op3548,
		c.op3549,
		c.op354A,
		c.op354B,
		c.op354C,
		c.op354D,
		c.op354E,
		c.op354F,
		c.op3550,
		c.op3551,
		c.op3552,
		c.op3553,
		c.op3554,
		c.op3555,
		c.op3556,
		c.op3557,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3578,
		c.op3579,
		nil,
		nil,
		c.op357C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3600,
		c.op3601,
		c.op3602,
		c.op3603,
		c.op3604,
		c.op3605,
		c.op3606,
		c.op3607,
		c.op3608,
		c.op3609,
		c.op360A,
		c.op360B,
		c.op360C,
		c.op360D,
		c.op360E,
		c.op360F,
		c.op3610,
		c.op3611,
		c.op3612,
		c.op3613,
		c.op3614,
		c.op3615,
		c.op3616,
		c.op3617,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3638,
		c.op3639,
		nil,
		nil,
		c.op363C,
		nil,
		nil,
		nil,
		c.op3640,
		c.op3641,
		c.op3642,
		c.op3643,
		c.op3644,
		c.op3645,
		c.op3646,
		c.op3647,
		c.op3648,
		c.op3649,
		c.op364A,
		c.op364B,
		c.op364C,
		c.op364D,
		c.op364E,
		c.op364F,
		c.op3650,
		c.op3651,
		c.op3652,
		c.op3653,
		c.op3654,
		c.op3655,
		c.op3656,
		c.op3657,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3678,
		c.op3679,
		nil,
		nil,
		c.op367C,
		nil,
		nil,
		nil,
		c.op3680,
		c.op3681,
		c.op3682,
		c.op3683,
		c.op3684,
		c.op3685,
		c.op3686,
		c.op3687,
		c.op3688,
		c.op3689,
		c.op368A,
		c.op368B,
		c.op368C,
		c.op368D,
		c.op368E,
		c.op368F,
		c.op3690,
		c.op3691,
		c.op3692,
		c.op3693,
		c.op3694,
		c.op3695,
		c.op3696,
		c.op3697,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op36B8,
		c.op36B9,
		nil,
		nil,
		c.op36BC,
		nil,
		nil,
		nil,
		c.op36C0,
		c.op36C1,
		c.op36C2,
		c.op36C3,
		c.op36C4,
		c.op36C5,
		c.op36C6,
		c.op36C7,
		c.op36C8,
		c.op36C9,
		c.op36CA,
		c.op36CB,
		c.op36CC,
		c.op36CD,
		c.op36CE,
		c.op36CF,
		c.op36D0,
		c.op36D1,
		c.op36D2,
		c.op36D3,
		c.op36D4,
		c.op36D5,
		c.op36D6,
		c.op36D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op36F8,
		c.op36F9,
		nil,
		nil,
		c.op36FC,
		nil,
		nil,
		nil,
		c.op3700,
		c.op3701,
		c.op3702,
		c.op3703,
		c.op3704,
		c.op3705,
		c.op3706,
		c.op3707,
		c.op3708,
		c.op3709,
		c.op370A,
		c.op370B,
		c.op370C,
		c.op370D,
		c.op370E,
		c.op370F,
		c.op3710,
		c.op3711,
		c.op3712,
		c.op3713,
		c.op3714,
		c.op3715,
		c.op3716,
		c.op3717,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3738,
		c.op3739,
		nil,
		nil,
		c.op373C,
		nil,
		nil,
		nil,
		c.op3740,
		c.op3741,
		c.op3742,
		c.op3743,
		c.op3744,
		c.op3745,
		c.op3746,
		c.op3747,
		c.op3748,
		c.op3749,
		c.op374A,
		c.op374B,
		c.op374C,
		c.op374D,
		c.op374E,
		c.op374F,
		c.op3750,
		c.op3751,
		c.op3752,
		c.op3753,
		c.op3754,
		c.op3755,
		c.op3756,
		c.op3757,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3778,
		c.op3779,
		nil,
		nil,
		c.op377C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3800,
		c.op3801,
		c.op3802,
		c.op3803,
		c.op3804,
		c.op3805,
		c.op3806,
		c.op3807,
		c.op3808,
		c.op3809,
		c.op380A,
		c.op380B,
		c.op380C,
		c.op380D,
		c.op380E,
		c.op380F,
		c.op3810,
		c.op3811,
		c.op3812,
		c.op3813,
		c.op3814,
		c.op3815,
		c.op3816,
		c.op3817,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3838,
		c.op3839,
		nil,
		nil,
		c.op383C,
		nil,
		nil,
		nil,
		c.op3840,
		c.op3841,
		c.op3842,
		c.op3843,
		c.op3844,
		c.op3845,
		c.op3846,
		c.op3847,
		c.op3848,
		c.op3849,
		c.op384A,
		c.op384B,
		c.op384C,
		c.op384D,
		c.op384E,
		c.op384F,
		c.op3850,
		c.op3851,
		c.op3852,
		c.op3853,
		c.op3854,
		c.op3855,
		c.op3856,
		c.op3857,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3878,
		c.op3879,
		nil,
		nil,
		c.op387C,
		nil,
		nil,
		nil,
		c.op3880,
		c.op3881,
		c.op3882,
		c.op3883,
		c.op3884,
		c.op3885,
		c.op3886,
		c.op3887,
		c.op3888,
		c.op3889,
		c.op388A,
		c.op388B,
		c.op388C,
		c.op388D,
		c.op388E,
		c.op388F,
		c.op3890,
		c.op3891,
		c.op3892,
		c.op3893,
		c.op3894,
		c.op3895,
		c.op3896,
		c.op3897,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op38B8,
		c.op38B9,
		nil,
		nil,
		c.op38BC,
		nil,
		nil,
		nil,
		c.op38C0,
		c.op38C1,
		c.op38C2,
		c.op38C3,
		c.op38C4,
		c.op38C5,
		c.op38C6,
		c.op38C7,
		c.op38C8,
		c.op38C9,
		c.op38CA,
		c.op38CB,
		c.op38CC,
		c.op38CD,
		c.op38CE,
		c.op38CF,
		c.op38D0,
		c.op38D1,
		c.op38D2,
		c.op38D3,
		c.op38D4,
		c.op38D5,
		c.op38D6,
		c.op38D7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op38F8,
		c.op38F9,
		nil,
		nil,
		c.op38FC,
		nil,
		nil,
		nil,
		c.op3900,
		c.op3901,
		c.op3902,
		c.op3903,
		c.op3904,
		c.op3905,
		c.op3906,
		c.op3907,
		c.op3908,
		c.op3909,
		c.op390A,
		c.op390B,
		c.op390C,
		c.op390D,
		c.op390E,
		c.op390F,
		c.op3910,
		c.op3911,
		c.op3912,
		c.op3913,
		c.op3914,
		c.op3915,
		c.op3916,
		c.op3917,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3938,
		c.op3939,
		nil,
		nil,
		c.op393C,
		nil,
		nil,
		nil,
		c.op3940,
		c.op3941,
		c.op3942,
		c.op3943,
		c.op3944,
		c.op3945,
		c.op3946,
		c.op3947,
		c.op3948,
		c.op3949,
		c.op394A,
		c.op394B,
		c.op394C,
		c.op394D,
		c.op394E,
		c.op394F,
		c.op3950,
		c.op3951,
		c.op3952,
		c.op3953,
		c.op3954,
		c.op3955,
		c.op3956,
		c.op3957,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3978,
		c.op3979,
		nil,
		nil,
		c.op397C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3A00,
		c.op3A01,
		c.op3A02,
		c.op3A03,
		c.op3A04,
		c.op3A05,
		c.op3A06,
		c.op3A07,
		c.op3A08,
		c.op3A09,
		c.op3A0A,
		c.op3A0B,
		c.op3A0C,
		c.op3A0D,
		c.op3A0E,
		c.op3A0F,
		c.op3A10,
		c.op3A11,
		c.op3A12,
		c.op3A13,
		c.op3A14,
		c.op3A15,
		c.op3A16,
		c.op3A17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3A38,
		c.op3A39,
		nil,
		nil,
		c.op3A3C,
		nil,
		nil,
		nil,
		c.op3A40,
		c.op3A41,
		c.op3A42,
		c.op3A43,
		c.op3A44,
		c.op3A45,
		c.op3A46,
		c.op3A47,
		c.op3A48,
		c.op3A49,
		c.op3A4A,
		c.op3A4B,
		c.op3A4C,
		c.op3A4D,
		c.op3A4E,
		c.op3A4F,
		c.op3A50,
		c.op3A51,
		c.op3A52,
		c.op3A53,
		c.op3A54,
		c.op3A55,
		c.op3A56,
		c.op3A57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3A78,
		c.op3A79,
		nil,
		nil,
		c.op3A7C,
		nil,
		nil,
		nil,
		c.op3A80,
		c.op3A81,
		c.op3A82,
		c.op3A83,
		c.op3A84,
		c.op3A85,
		c.op3A86,
		c.op3A87,
		c.op3A88,
		c.op3A89,
		c.op3A8A,
		c.op3A8B,
		c.op3A8C,
		c.op3A8D,
		c.op3A8E,
		c.op3A8F,
		c.op3A90,
		c.op3A91,
		c.op3A92,
		c.op3A93,
		c.op3A94,
		c.op3A95,
		c.op3A96,
		c.op3A97,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3AB8,
		c.op3AB9,
		nil,
		nil,
		c.op3ABC,
		nil,
		nil,
		nil,
		c.op3AC0,
		c.op3AC1,
		c.op3AC2,
		c.op3AC3,
		c.op3AC4,
		c.op3AC5,
		c.op3AC6,
		c.op3AC7,
		c.op3AC8,
		c.op3AC9,
		c.op3ACA,
		c.op3ACB,
		c.op3ACC,
		c.op3ACD,
		c.op3ACE,
		c.op3ACF,
		c.op3AD0,
		c.op3AD1,
		c.op3AD2,
		c.op3AD3,
		c.op3AD4,
		c.op3AD5,
		c.op3AD6,
		c.op3AD7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3AF8,
		c.op3AF9,
		nil,
		nil,
		c.op3AFC,
		nil,
		nil,
		nil,
		c.op3B00,
		c.op3B01,
		c.op3B02,
		c.op3B03,
		c.op3B04,
		c.op3B05,
		c.op3B06,
		c.op3B07,
		c.op3B08,
		c.op3B09,
		c.op3B0A,
		c.op3B0B,
		c.op3B0C,
		c.op3B0D,
		c.op3B0E,
		c.op3B0F,
		c.op3B10,
		c.op3B11,
		c.op3B12,
		c.op3B13,
		c.op3B14,
		c.op3B15,
		c.op3B16,
		c.op3B17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3B38,
		c.op3B39,
		nil,
		nil,
		c.op3B3C,
		nil,
		nil,
		nil,
		c.op3B40,
		c.op3B41,
		c.op3B42,
		c.op3B43,
		c.op3B44,
		c.op3B45,
		c.op3B46,
		c.op3B47,
		c.op3B48,
		c.op3B49,
		c.op3B4A,
		c.op3B4B,
		c.op3B4C,
		c.op3B4D,
		c.op3B4E,
		c.op3B4F,
		c.op3B50,
		c.op3B51,
		c.op3B52,
		c.op3B53,
		c.op3B54,
		c.op3B55,
		c.op3B56,
		c.op3B57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3B78,
		c.op3B79,
		nil,
		nil,
		c.op3B7C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3C00,
		c.op3C01,
		c.op3C02,
		c.op3C03,
		c.op3C04,
		c.op3C05,
		c.op3C06,
		c.op3C07,
		c.op3C08,
		c.op3C09,
		c.op3C0A,
		c.op3C0B,
		c.op3C0C,
		c.op3C0D,
		c.op3C0E,
		c.op3C0F,
		c.op3C10,
		c.op3C11,
		c.op3C12,
		c.op3C13,
		c.op3C14,
		c.op3C15,
		c.op3C16,
		c.op3C17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3C38,
		c.op3C39,
		nil,
		nil,
		c.op3C3C,
		nil,
		nil,
		nil,
		c.op3C40,
		c.op3C41,
		c.op3C42,
		c.op3C43,
		c.op3C44,
		c.op3C45,
		c.op3C46,
		c.op3C47,
		c.op3C48,
		c.op3C49,
		c.op3C4A,
		c.op3C4B,
		c.op3C4C,
		c.op3C4D,
		c.op3C4E,
		c.op3C4F,
		c.op3C50,
		c.op3C51,
		c.op3C52,
		c.op3C53,
		c.op3C54,
		c.op3C55,
		c.op3C56,
		c.op3C57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3C78,
		c.op3C79,
		nil,
		nil,
		c.op3C7C,
		nil,
		nil,
		nil,
		c.op3C80,
		c.op3C81,
		c.op3C82,
		c.op3C83,
		c.op3C84,
		c.op3C85,
		c.op3C86,
		c.op3C87,
		c.op3C88,
		c.op3C89,
		c.op3C8A,
		c.op3C8B,
		c.op3C8C,
		c.op3C8D,
		c.op3C8E,
		c.op3C8F,
		c.op3C90,
		c.op3C91,
		c.op3C92,
		c.op3C93,
		c.op3C94,
		c.op3C95,
		c.op3C96,
		c.op3C97,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3CB8,
		c.op3CB9,
		nil,
		nil,
		c.op3CBC,
		nil,
		nil,
		nil,
		c.op3CC0,
		c.op3CC1,
		c.op3CC2,
		c.op3CC3,
		c.op3CC4,
		c.op3CC5,
		c.op3CC6,
		c.op3CC7,
		c.op3CC8,
		c.op3CC9,
		c.op3CCA,
		c.op3CCB,
		c.op3CCC,
		c.op3CCD,
		c.op3CCE,
		c.op3CCF,
		c.op3CD0,
		c.op3CD1,
		c.op3CD2,
		c.op3CD3,
		c.op3CD4,
		c.op3CD5,
		c.op3CD6,
		c.op3CD7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3CF8,
		c.op3CF9,
		nil,
		nil,
		c.op3CFC,
		nil,
		nil,
		nil,
		c.op3D00,
		c.op3D01,
		c.op3D02,
		c.op3D03,
		c.op3D04,
		c.op3D05,
		c.op3D06,
		c.op3D07,
		c.op3D08,
		c.op3D09,
		c.op3D0A,
		c.op3D0B,
		c.op3D0C,
		c.op3D0D,
		c.op3D0E,
		c.op3D0F,
		c.op3D10,
		c.op3D11,
		c.op3D12,
		c.op3D13,
		c.op3D14,
		c.op3D15,
		c.op3D16,
		c.op3D17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3D38,
		c.op3D39,
		nil,
		nil,
		c.op3D3C,
		nil,
		nil,
		nil,
		c.op3D40,
		c.op3D41,
		c.op3D42,
		c.op3D43,
		c.op3D44,
		c.op3D45,
		c.op3D46,
		c.op3D47,
		c.op3D48,
		c.op3D49,
		c.op3D4A,
		c.op3D4B,
		c.op3D4C,
		c.op3D4D,
		c.op3D4E,
		c.op3D4F,
		c.op3D50,
		c.op3D51,
		c.op3D52,
		c.op3D53,
		c.op3D54,
		c.op3D55,
		c.op3D56,
		c.op3D57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3D78,
		c.op3D79,
		nil,
		nil,
		c.op3D7C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3E00,
		c.op3E01,
		c.op3E02,
		c.op3E03,
		c.op3E04,
		c.op3E05,
		c.op3E06,
		c.op3E07,
		c.op3E08,
		c.op3E09,
		c.op3E0A,
		c.op3E0B,
		c.op3E0C,
		c.op3E0D,
		c.op3E0E,
		c.op3E0F,
		c.op3E10,
		c.op3E11,
		c.op3E12,
		c.op3E13,
		c.op3E14,
		c.op3E15,
		c.op3E16,
		c.op3E17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3E38,
		c.op3E39,
		nil,
		nil,
		c.op3E3C,
		nil,
		nil,
		nil,
		c.op3E40,
		c.op3E41,
		c.op3E42,
		c.op3E43,
		c.op3E44,
		c.op3E45,
		c.op3E46,
		c.op3E47,
		c.op3E48,
		c.op3E49,
		c.op3E4A,
		c.op3E4B,
		c.op3E4C,
		c.op3E4D,
		c.op3E4E,
		c.op3E4F,
		c.op3E50,
		c.op3E51,
		c.op3E52,
		c.op3E53,
		c.op3E54,
		c.op3E55,
		c.op3E56,
		c.op3E57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3E78,
		c.op3E79,
		nil,
		nil,
		c.op3E7C,
		nil,
		nil,
		nil,
		c.op3E80,
		c.op3E81,
		c.op3E82,
		c.op3E83,
		c.op3E84,
		c.op3E85,
		c.op3E86,
		c.op3E87,
		c.op3E88,
		c.op3E89,
		c.op3E8A,
		c.op3E8B,
		c.op3E8C,
		c.op3E8D,
		c.op3E8E,
		c.op3E8F,
		c.op3E90,
		c.op3E91,
		c.op3E92,
		c.op3E93,
		c.op3E94,
		c.op3E95,
		c.op3E96,
		c.op3E97,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3EB8,
		c.op3EB9,
		nil,
		nil,
		c.op3EBC,
		nil,
		nil,
		nil,
		c.op3EC0,
		c.op3EC1,
		c.op3EC2,
		c.op3EC3,
		c.op3EC4,
		c.op3EC5,
		c.op3EC6,
		c.op3EC7,
		c.op3EC8,
		c.op3EC9,
		c.op3ECA,
		c.op3ECB,
		c.op3ECC,
		c.op3ECD,
		c.op3ECE,
		c.op3ECF,
		c.op3ED0,
		c.op3ED1,
		c.op3ED2,
		c.op3ED3,
		c.op3ED4,
		c.op3ED5,
		c.op3ED6,
		c.op3ED7,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3EF8,
		c.op3EF9,
		nil,
		nil,
		c.op3EFC,
		nil,
		nil,
		nil,
		c.op3F00,
		c.op3F01,
		c.op3F02,
		c.op3F03,
		c.op3F04,
		c.op3F05,
		c.op3F06,
		c.op3F07,
		c.op3F08,
		c.op3F09,
		c.op3F0A,
		c.op3F0B,
		c.op3F0C,
		c.op3F0D,
		c.op3F0E,
		c.op3F0F,
		c.op3F10,
		c.op3F11,
		c.op3F12,
		c.op3F13,
		c.op3F14,
		c.op3F15,
		c.op3F16,
		c.op3F17,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3F38,
		c.op3F39,
		nil,
		nil,
		c.op3F3C,
		nil,
		nil,
		nil,
		c.op3F40,
		c.op3F41,
		c.op3F42,
		c.op3F43,
		c.op3F44,
		c.op3F45,
		c.op3F46,
		c.op3F47,
		c.op3F48,
		c.op3F49,
		c.op3F4A,
		c.op3F4B,
		c.op3F4C,
		c.op3F4D,
		c.op3F4E,
		c.op3F4F,
		c.op3F50,
		c.op3F51,
		c.op3F52,
		c.op3F53,
		c.op3F54,
		c.op3F55,
		c.op3F56,
		c.op3F57,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op3F78,
		c.op3F79,
		nil,
		nil,
		c.op3F7C,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		c.op4E40,
		c.op4E41,
		c.op4E42,
		c.op4E43,
		c.op4E44,
		c.op4E45,
		c.op4E46,
		c.op4E47,
		c.op4E48,
		c.op4E49,
		c.op4E4A,
		c.op4E4B,
		c.op4E4C,
		c.op4E4D,
		c.op4E4E,
		c.op4E4F,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
	}[op]
}
